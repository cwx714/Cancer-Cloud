/**
 * API接口请求/应答的消息定义。
 */

syntax = "proto2";

package ChargerLink.Gateway;
option java_package     = "com.chargerlink.gateway.bean.api";
option go_package       = "com.chargerlink.gateway.bean.api";
option csharp_namespace = "com.chargerlink.gateway.bean.api";
option java_multiple_files = false;

import "bean/EnumBase.proto";
import "bean/DeviceBase.proto";
import "bean/EventBase.proto";
import "bean/ApiVehicle.proto";
import "bean/ApiRecorder.proto";
import "bean/ApiCharger.proto";
import "bean/ApiParking.proto";
import "google/protobuf/any.proto";

/** 导入/更新终端设备信息的请求消息定义。*/
message ImportDeviceInfo {
	repeated DeviceInfo device_list = 1;                            /// (必填)终端设备的列表。
	required bool       overwrite   = 2;                            /// (必填)覆盖已有设备信息。true：覆盖已有设备信息，false：设备存在时不覆盖并返回失败。
}

/** 查询终端设备详细信息的请求消息定义。*/
message QueryDeviceInfo {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
}

/** 查询终端设备实时数据列表的请求消息定义。*/
message QueryDataList {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	optional string     sub_device  = 3;                            /// (可选)终端子设备标识。如果查询所有主设备和子设备的数据，则为null；否则为只查询主设备或指定子设备的数据，其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"，地锁的标识为"lock=地锁ID"，车位传感器的标识为"detcet=传感器ID"。。
	required int64      start_time  = 4;                            /// (必填)查询的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
	required int64      stop_time   = 5;                            /// (必填)查询的结束时间(北京时间的毫秒时间戳)。单位：毫秒。
}

/** 查询终端设备报警消息列表的请求消息定义。*/
message QueryAlarmList {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	optional string     sub_device  = 3;                            /// (可选)终端子设备标识。如果查询所有主设备和子设备的数据，则为null；否则为只查询主设备或指定子设备的数据，其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"，地锁的标识为"lock=地锁ID"，车位传感器的标识为"detcet=传感器ID"。。
	required int64      start_time  = 4;                            /// (必填)查询的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
	required int64      stop_time   = 5;                            /// (必填)查询的结束时间(北京时间的毫秒时间戳)。单位：毫秒。
	optional uint32     alarm_code  = 6;                            /// (可选)查询的报警代码。null：返回所有代码的报警消息。
}

/** 查询终端设备事件消息列表的请求消息定义。*/
message QueryEventList {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	optional string     sub_device  = 3;                            /// (可选)终端子设备标识。如果查询所有主设备和子设备的数据，则为null；否则为只查询主设备或指定子设备的数据，其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"，地锁的标识为"lock=地锁ID"，车位传感器的标识为"detcet=传感器ID"。
	required int64      start_time  = 4;                            /// (必填)查询的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
	required int64      stop_time   = 5;                            /// (必填)查询的结束时间(北京时间的毫秒时间戳)。单位：毫秒。
	optional EventType  event_type  = 6;                            /// (可选)查询的事件类型。null：返回所有类型的事件消息。
}

/** 查询终端设备行程信息列表的请求消息定义。目前只支持行车记录仪/后视镜设备。*/
message QueryTrackList {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。目前只支持行车记录仪/后视镜设备。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	required int64      start_time  = 3;                            /// (必填)查询的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
	required int64      stop_time   = 4;                            /// (必填)查询的结束时间(北京时间的毫秒时间戳)。单位：毫秒。
}

/** 查询终端设备行程状态的请求消息定义。目前只支持行车记录仪/后视镜设备。*/
message QueryTrackInfo {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。目前只支持行车记录仪/后视镜设备。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	optional int64      track_id    = 3;                            /// (可选)行程ID。null或0：查询设备的当前行驶状态，其他值：查询指定行程的行驶状态。
}

/** 查询终端设备上传媒体信息的请求消息定义。目前只支持行车记录仪/后视镜设备。*/
message QueryMediaInfo {
	required DeviceType device_type = 1;                            /// (必填)终端设备类型。目前只支持行车记录仪/后视镜设备。
	required string     device_id   = 2;                            /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	required int64      session_id  = 3;                            /// (必填)上传媒体的唯一标识。
}

/** 发送给终端设备的命令请求/事件应答的消息定义。其中：命令请求详情的定义分别在以下文件中：ApiVehicle.proto、ApiCharger.proto、ApiRecorder.proto、EventBase.proto。*/
message CommandInfo {
	required DeviceType       device_type     = 1;                  /// (必填)终端设备类型。
	required string           device_id       = 2;                  /// (必填)终端设备ID。
	optional string           command_id      = 3;                  /// (可选)命令唯一ID(设备内唯一即可)。null或空：表示接入平台不需要等待终端的应答消息就可以返回应答，其他值：表示接入平台需要收到终端的应答消息后才返回应答。
	optional int32            timeout         = 4;                  /// (可选)应答超时时间。单位：毫秒。null或小于等于0：表示一直等待应答。
	oneof                     detail {                              /// (必填)发给终端设备的请求消息。可选类型如下：
		EventResult           event_result    = 10;                 ///    发给终端设备的事件应答消息。
		CommandVehicleGB_v1   vehicle_gb_v1   = 100;                ///    发给国标GB/T32960-2016的电动车TBOX设备的命令请求。
		CommandRecorderAMI_v1 recorder_ami_v1 = 200;                ///    发给Amitek公司的V行车记录仪/后视镜设备的命令请求。
		CommandChargerCL_v2   charger_cl_v2   = 300;                ///    发给ChargeLink公司的充电桩TCU设备的命令请求。
		CommandParkingCL_v2   parking_cl_v2   = 400;                ///    发给ChargeLink公司的车位地锁/车位传感器设备的命令请求。
		google.protobuf.Any   other_device    = 999;                ///    发给其他自定义类型设备的命令请求。
	}
}

/** 接入平台/终端设备返回的命令应答的消息定义。其中：应答消息详情的定义分别在以下文件中：ApiVehicle.proto、ApiCharger.proto、ApiRecorder.proto。*/
message CommandResult {
	required DeviceType      device_type     = 1;                   /// (必填)终端设备类型。
	required string          device_id       = 2;                   /// (必填)终端设备ID。
	optional string          command_id      = 3;                   /// (可选)原始命令请求的命令唯一ID。
	oneof                    detail {                               /// (必填)接入平台/终端设备返回的应答消息。可选类型如下：
		ResultError          error           = 10;                  ///    错误应答消息。当接入平台发送请求或接收应答失败时，返回该错误应答消息。
		ResultSuccess        success         = 11;                  ///    成功应答消息。当接入平台发送请求成功且请求不需要终端设备返回的应答时，返回该成功应答消息。
		ResultVehicleGB_v1   vehicle_gb_v1   = 100;                 ///    国标GB/T32960-2016的电动车TBOX设备返回的命令应答消息。接入平台发送请求成功且接收到终端设备返回的成功应答时，返回该应答消息。
		ResultRecorderAMI_v1 recorder_ami_v1 = 200;                 ///    Amitek公司的行车记录仪/后视镜设备返回的命令应答消息。接入平台发送请求成功且接收到终端设备返回的成功应答时，返回该应答消息。
		ResultChargerCL_v2   charger_cl_v2   = 300;                 ///    ChargeLink公司的充电桩TCU设备返回的命令应答消息。接入平台发送请求成功且接收到终端设备返回的成功应答时，返回该应答消息。
		ResultParkingCL_v2   parking_cl_v2   = 400;                 ///    ChargeLink公司的车位地锁/车位传感器设备返回的命令应答消息。接入平台发送请求成功且接收到终端设备返回的成功应答时，返回该应答消息。
		google.protobuf.Any  other_device    = 999;                 ///    其他自定义类型设备返回的命令应答消息。接入平台发送请求成功且接收到终端设备返回的成功应答时，返回该应答消息。
	}

	/** 接入平台返回的错误应答的消息定义。*/
	message ResultError {
		required ErrorCode error_code = 1;                          /// (必填)错误代码。
		optional string    error_msg  = 2;                          /// (可选)错误信息。
		optional int32     extra_code = 3;                          /// (可选)附加的其他错误代码。如果错误代码为RESPONSE_ERROR，则为终端设备返回的错误代码。
		optional string    extra_msg  = 4;                          /// (可选)附加的其他错误信息。如果错误代码为RESPONSE_ERROR，则为终端设备返回的错误信息。
	}

	/** 接入平台返回的成功应答的消息定义。*/
	message ResultSuccess {
	}

	/** 错误代码的常量定义。*/
	enum ErrorCode {
		AUTHORITY_INVALID = 10;                                     /// 接口认证错误。
		DEVICE_UNKNOWN    = 11;                                     /// 设备不存在或不允许操作。
		DEVICE_INVALID    = 12;                                     /// 设备类型或ID无效。
		REQUEST_UNKNOWN   = 20;                                     /// 请求消息无法解析。
		REQUEST_INVALID   = 21;                                     /// 请求消息参数错误。
		REQUEST_TIMEOUT   = 22;                                     /// 请求消息发送给终端设备时超时错误。
		RESPONSE_TIMEOUT  = 30;                                     /// 从终端设备获取应答消息时超时错误。
		RESPONSE_ERROR    = 31;                                     /// 终端设备返回失败的应答消息。
		GENERIC_ERROR     = 100;                                    /// 其他错误。
	}
}

/** 注册终端设备的上行报警消息推送的请求。*/
message PushAlarmRequest {
	repeated AlarmType  with_alarm_types  = 1;                      /// (可选)注册的报警类型的推送条件。只有报警类型在此列表中的报警消息才会被推送。空列表：表示注册所有类型的报警消息。
	repeated uint32     with_alarm_codes  = 2;                      /// (可选)注册的报警代码的推送条件。只有报警代码在此列表中的报警消息才会被推送。空列表：表示注册所有类型的报警消息。
	repeated DeviceType with_device_types = 3;                      /// (可选)注册的终端类型的推送条件。只有在此列表中的终端类型产生的消息才会被推送。空列表：表示注册所有设备类型的报警消息。
	repeated string     with_device_ids   = 4;                      /// (可选)注册的终端ID的推送条件。只有在此列表中的终端ID产生的消息才会被推送。空列表：表示注册所有设备ID的报警消息。
}

/** 注册终端设备的上行事件消息推送的请求。*/
message PushEventRequest {
	repeated EventType  with_event_types  = 1;                      /// (可选)注册的事件类型的推送条件。只有事件类型在此列表中的事件消息才会被推送。空列表：表示注册所有类型的事件消息。
	repeated DeviceType with_device_types = 2;                      /// (可选)注册的终端类型的推送条件。只有在此列表中的终端类型产生的消息才会被推送。空列表：表示注册所有设备类型的报警消息。
	repeated string     with_device_ids   = 3;                      /// (可选)注册的终端ID的推送条件。只有在此列表中的终端ID产生的消息才会被推送。空列表：表示注册所有设备ID的报警消息。
}

/** 注册终端设备的上行实时上报数据消息推送的请求。*/
message PushDataRequest {
	required uint32     record_interval   = 1;                      /// (必填)回调数据的时间间隔。接入平台在指定时间间隔内只产生1条推送消息。单位：秒。
	repeated DataType   with_data_types   = 2;                      /// (可选)注册的上报数据类型的推送条件。只有数据类型在此列表中的上报数据消息才会被推送。空列表：表示注册所有类型的上报数据消息。
	repeated DeviceType with_device_types = 3;                      /// (可选)注册的终端类型的推送条件。只有在此列表中的终端类型产生的消息才会被推送。空列表：表示注册所有设备类型的上报数据消息。
	repeated string     with_device_ids   = 4;                      /// (可选)注册的终端ID的推送条件。只有在此列表中的终端ID产生的消息才会被推送。空列表：表示注册所有设备ID的上报数据消息。
}

/** 注册终端设备的指定区域内的上行实时上报数据消息推送的请求。*/
message PushDataByAreaRequest {
	required uint32   record_interval = 1;                          /// (必填)回调数据的时间间隔。接入平台在指定时间间隔内只产生1条推送消息。单位：秒。
	repeated DataType with_data_types = 2;                          /// (可选)注册的上报数据类型的推送条件。只有数据类型在此列表中的上报数据消息才会被推送。空列表：表示注册所有类型的上报数据消息。
	required double   left_longitude  = 3;                          /// (必填)注册的监听区域左上角的经度。只有在此区域中的终端设备产生的上报数据消息才会被推送。
	required double   top_latitude    = 4;                          /// (必填)注册的监听区域左上角的纬度。只有在此区域中的终端设备产生的上报数据消息才会被推送。
	required double   right_longitude = 5;                          /// (必填)注册的监听区域右下角的经度。只有在此区域中的终端设备产生的上报数据消息才会被推送。
	required double   bottom_latitude = 6;                          /// (必填)注册的监听区域右下角的纬度。只有在此区域中的终端设备产生的上报数据消息才会被推送。
}
