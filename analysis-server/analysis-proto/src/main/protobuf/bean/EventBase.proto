/**
 * 终端设备的事件消息/事件应答的消息定义。
 *
 * 1、终端设备事件消息是由终端设备动态上报的的事件信息(如：终端登录/登出/注销、充电开始/停止等)。
 *
 * 2、接入平台只处理和保存被导入到平台上的终端设备的事件消息。
 *
 * 3、事件消息只有1个有效的详情数据。详情数据的类型是根据事件类型的数值决定的。1个事件类型只对应1类详情数据。不同类型设备上报的不同格式的详情数据，根据事件
 * 类型的类别，被统一成相同格式的详情数据。
 *
 * 4、如果事件消息是只针对某个子设备的事件(如：充电枪等)，则事件消息的子设备标识信息必须与子设备的实际信息一致。
 *
 * 5、事件消息与对应的事件应答采用完全异步、互不依赖的方式。即业务平台收到事件消息后，需要通过终端命令接口下发对应的事件应答。
 */

syntax = "proto2";

package ChargerLink.Gateway;
option java_package     = "com.chargerlink.gateway.bean.event";
option go_package       = "com.chargerlink.gateway.bean.event";
option csharp_namespace = "com.chargerlink.gateway.bean.event";
option java_multiple_files = false;

import "bean/EnumBase.proto";
import "bean/EventDevice.proto";
import "bean/EventVehicle.proto";
import "bean/EventRecorder.proto";
import "bean/EventCharger.proto";
import "bean/EventParking.proto";

/** 终端设备事件消息的消息定义。其中：事件消息详情的定义分别在以下文件中：EventDevice.proto、EventVehicle.proto、EventCharger.proto、EventRecorder.proto。*/
message EventInfo {
	required DeviceType        device_type         = 1;             /// (必填)终端设备类型。
	required string            device_id           = 2;             /// (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
	required string            sub_device          = 3;             /// (必填)子设备标识信息。其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"。
	required EventType         event_type          = 4;             /// (必填)事件类型。
	required int64             event_time          = 5;             /// (必填)事件时间(北京时间的毫秒时间戳)。单位：毫秒。
	optional string            event_id            = 6;             /// (可选)事件唯一ID(设备内唯一即可)。null或空：表示接入平台不等待业务平台的应答消息而自动处理给终端的应答，其他值：表示接入平台需要等待业务平台的应答消息后才给终端应答。
	oneof                      event_detail {                       /// (必填)终端设备的事件详情数据。可选类型如下：
		EventDevReportLogin    dev_report_login    = 10;            ///    终端设备登录/登出/注销状态的通知事件。
		EventDevReportActivity dev_report_activity = 11;            ///    终端设备活跃/离线状态的通知事件。
		EventDevReportFirmware dev_report_firmware = 12;            ///    终端设备固件更新状态的通知事件。
		EventDevReportDiag     dev_report_diag     = 13;            ///    终端设备诊断信息状态的通知事件。
		EventDevCheckRegister  dev_check_register  = 20;            ///    终端设备注册激活的请求事件。
		EventDevCheckConfig    dev_check_config    = 21;            ///    终端设备查询配置更新的请求事件。
		EventDevCheckSiminfo   dev_check_siminfo   = 22;            ///    终端设备查询SIM卡流量的请求事件。
		EventDevCheckBind      dev_check_bind      = 23;            ///    终端设备查询绑定/解绑的请求事件。
		EventRecTrackStart     rec_track_start     = 200;           ///    行车记录仪/后视镜设备行程启动的通知事件。
		EventRecTrackStop      rec_track_stop      = 201;           ///    行车记录仪/后视镜设备行程停止的通知事件。
		EventRecMediaUpload    rec_media_upload    = 202;           ///    行车记录仪/后视镜设备媒体文件的通知事件。
		EventChgChargeStarted  chg_charge_started  = 300;           ///    充电桩TCU设备充电开始的请求事件。
		EventChgChargeStopped  chg_charge_stopped  = 301;           ///    充电桩TCU设备充电停止的请求事件。
		EventChgChargeAuth     chg_charge_auth     = 302;           ///    充电桩TCU设备充电鉴权的请求事件。
		EventChgChargeProcess  chg_charge_process  = 303;           ///    充电桩TCU设备充电过程的请求事件。
		EventChgOrderList      chg_order_list      = 304;           ///    充电桩TCU设备充电订单上传的通知事件。
		EventPkLockerUnlock    pk_locker_unlock    = 400;           ///    车位地锁设备解锁的通知事件。
		EventPkLockerLock      pk_locker_lock      = 401;           ///    车位地锁设备上锁的通知事件。
		EventPkDetectorFree    pk_detector_free    = 410;           ///    车位探测器设备空闲的通知事件。
		EventPkDetectorUsed    pk_detector_used    = 411;           ///    车位探测器设备占用的通知事件。
	}
}

/** 终端设备事件消息列表的消息定义。*/
message EventList {
	repeated EventInfo event_list = 1;                              /// (必填)事件消息的列表。
}

/** 终端设备事件应答的消息定义。其中：事件应答详情的定义分别在以下文件中：EventDevice.proto、EventVehicle.proto、EventCharger.proto、EventRecorder.proto。*/
message EventResult {
	required string            event_id           = 1;              /// (必填)原始事件消息的事件唯一ID(设备内唯一即可)。
	oneof                      result_detail {                      /// (必填)终端设备的应答详情数据。可选类型如下：
		ResultDevCheckRegister dev_check_register = 20;             ///    终端设备注册激活的事件应答。
		ResultChgChargeStarted chg_charge_started = 300;            ///    充电桩TCU设备充电开始的事件应答。
		ResultChgChargeStopped chg_charge_stopped = 301;            ///    充电桩TCU设备充电停止的事件应答。
		ResultChgChargeAuth    chg_charge_auth    = 302;            ///    充电桩TCU设备充电鉴权的事件应答。
		ResultChgChargeProcess chg_charge_process = 303;            ///    充电桩TCU设备充电过程的事件应答。
		ResultChgOrderList     chg_order_list     = 304;            ///    充电桩TCU设备充电订单上传的事件应答。
	}
}
