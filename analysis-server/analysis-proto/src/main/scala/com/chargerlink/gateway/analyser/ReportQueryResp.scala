// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.chargerlink.gateway.analyser



/** * 报表查询应答的消息定义。
  *
  * @param result
  *  / (必填)返回的请求结果。
  * @param offset
  *  / (操作成功时必填)统计结果的起始记录。
  * @param total
  *  / (操作成功时必填)统计结果的总记录数。注：包含未返回的统计记录。
  * @param records
  *  / (操作成功时必填)统计记录列表。
  */
@SerialVersionUID(0L)
final case class ReportQueryResp(
    result: scala.Option[com.chargerlink.gateway.analyser.Result] = None,
    offset: Int = 0,
    total: Int = 0,
    records: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryResp.Record] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReportQueryResp] with com.trueaccord.lenses.Updatable[ReportQueryResp] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (result.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(result.get.serializedSize) + result.get.serializedSize }
      if (offset != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, offset) }
      if (total != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, total) }
      records.foreach(records => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(records.serializedSize) + records.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      result.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = offset
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = total
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      records.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.ReportQueryResp = {
      var __result = this.result
      var __offset = this.offset
      var __total = this.total
      val __records = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.analyser.ReportQueryResp.Record] ++= this.records)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __result = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __result.getOrElse(com.chargerlink.gateway.analyser.Result.defaultInstance)))
          case 16 =>
            __offset = _input__.readUInt32()
          case 24 =>
            __total = _input__.readUInt32()
          case 34 =>
            __records += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.analyser.ReportQueryResp.Record.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.analyser.ReportQueryResp(
          result = __result,
          offset = __offset,
          total = __total,
          records = __records.result()
      )
    }
    def getResult: com.chargerlink.gateway.analyser.Result = result.getOrElse(com.chargerlink.gateway.analyser.Result.defaultInstance)
    def clearResult: ReportQueryResp = copy(result = None)
    def withResult(__v: com.chargerlink.gateway.analyser.Result): ReportQueryResp = copy(result = Some(__v))
    def withOffset(__v: Int): ReportQueryResp = copy(offset = __v)
    def withTotal(__v: Int): ReportQueryResp = copy(total = __v)
    def clearRecords = copy(records = _root_.scala.collection.Seq.empty)
    def addRecords(__vs: com.chargerlink.gateway.analyser.ReportQueryResp.Record*): ReportQueryResp = addAllRecords(__vs)
    def addAllRecords(__vs: TraversableOnce[com.chargerlink.gateway.analyser.ReportQueryResp.Record]): ReportQueryResp = copy(records = records ++ __vs)
    def withRecords(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryResp.Record]): ReportQueryResp = copy(records = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => result.orNull
        case 2 => {
          val __t = offset
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = total
          if (__t != 0) __t else null
        }
        case 4 => records
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => result.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PInt(offset)
        case 3 => _root_.scalapb.descriptors.PInt(total)
        case 4 => _root_.scalapb.descriptors.PRepeated(records.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.analyser.ReportQueryResp
}

object ReportQueryResp extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryResp] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryResp] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.ReportQueryResp = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.analyser.ReportQueryResp(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.analyser.Result]],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryResp.Record]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.ReportQueryResp] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.analyser.ReportQueryResp(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.analyser.Result]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryResp.Record]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = QueryProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = QueryProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.analyser.Result
      case 4 => __out = com.chargerlink.gateway.analyser.ReportQueryResp.Record
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.analyser.ReportQueryResp(
  )
  /** * 报表统计记录值的消息定义。
    *
    * @param time
    *  / (必填)统计时间(北京时间的毫秒时间戳)。单位：毫秒。
    * @param values
    *  / (必填)统计值列表。
    */
  @SerialVersionUID(0L)
  final case class Record(
      time: Long = 0L,
      values: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Record] with com.trueaccord.lenses.Updatable[Record] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (time != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, time) }
        values.foreach(values => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(values.serializedSize) + values.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = time
          if (__v != 0L) {
            _output__.writeUInt64(1, __v)
          }
        };
        values.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.ReportQueryResp.Record = {
        var __time = this.time
        val __values = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.analyser.Value] ++= this.values)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __time = _input__.readUInt64()
            case 18 =>
              __values += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.analyser.Value.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.analyser.ReportQueryResp.Record(
            time = __time,
            values = __values.result()
        )
      }
      def withTime(__v: Long): Record = copy(time = __v)
      def clearValues = copy(values = _root_.scala.collection.Seq.empty)
      def addValues(__vs: com.chargerlink.gateway.analyser.Value*): Record = addAllValues(__vs)
      def addAllValues(__vs: TraversableOnce[com.chargerlink.gateway.analyser.Value]): Record = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]): Record = copy(values = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = time
            if (__t != 0L) __t else null
          }
          case 2 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(time)
          case 2 => _root_.scalapb.descriptors.PRepeated(values.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.analyser.ReportQueryResp.Record
  }
  
  object Record extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryResp.Record] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryResp.Record] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.ReportQueryResp.Record = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.analyser.ReportQueryResp.Record(
        __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[Long],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.ReportQueryResp.Record] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.analyser.ReportQueryResp.Record(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryResp.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryResp.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.analyser.Value
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.analyser.ReportQueryResp.Record(
    )
    implicit class RecordLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryResp.Record]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryResp.Record](_l) {
      def time: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.time)((c_, f_) => c_.copy(time = f_))
      def values: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val TIME_FIELD_NUMBER = 1
    final val VALUES_FIELD_NUMBER = 2
  }
  
  implicit class ReportQueryRespLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryResp]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryResp](_l) {
    def result: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Result] = field(_.getResult)((c_, f_) => c_.copy(result = Some(f_)))
    def optionalResult: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.analyser.Result]] = field(_.result)((c_, f_) => c_.copy(result = f_))
    def offset: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def total: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def records: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryResp.Record]] = field(_.records)((c_, f_) => c_.copy(records = f_))
  }
  final val RESULT_FIELD_NUMBER = 1
  final val OFFSET_FIELD_NUMBER = 2
  final val TOTAL_FIELD_NUMBER = 3
  final val RECORDS_FIELD_NUMBER = 4
}
