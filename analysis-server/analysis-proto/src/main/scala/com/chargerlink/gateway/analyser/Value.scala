// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.chargerlink.gateway.analyser



/** * 数据值的消息定义。
  */
@SerialVersionUID(0L)
final case class Value(
    v: com.chargerlink.gateway.analyser.Value.V = com.chargerlink.gateway.analyser.Value.V.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Value] with com.trueaccord.lenses.Updatable[Value] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (v.d.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, v.d.get) }
      if (v.i.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, v.i.get) }
      if (v.l.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, v.l.get) }
      if (v.s.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, v.s.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      v.d.foreach { __v =>
        _output__.writeDouble(1, __v)
      };
      v.i.foreach { __v =>
        _output__.writeInt32(2, __v)
      };
      v.l.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      v.s.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.Value = {
      var __v = this.v
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __v = com.chargerlink.gateway.analyser.Value.V.D(_input__.readDouble())
          case 16 =>
            __v = com.chargerlink.gateway.analyser.Value.V.I(_input__.readInt32())
          case 24 =>
            __v = com.chargerlink.gateway.analyser.Value.V.L(_input__.readInt64())
          case 34 =>
            __v = com.chargerlink.gateway.analyser.Value.V.S(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.analyser.Value(
          v = __v
      )
    }
    def getD: Double = v.d.getOrElse(0.0)
    def withD(__v: Double): Value = copy(v = com.chargerlink.gateway.analyser.Value.V.D(__v))
    def getI: Int = v.i.getOrElse(0)
    def withI(__v: Int): Value = copy(v = com.chargerlink.gateway.analyser.Value.V.I(__v))
    def getL: Long = v.l.getOrElse(0L)
    def withL(__v: Long): Value = copy(v = com.chargerlink.gateway.analyser.Value.V.L(__v))
    def getS: String = v.s.getOrElse("")
    def withS(__v: String): Value = copy(v = com.chargerlink.gateway.analyser.Value.V.S(__v))
    def clearV: Value = copy(v = com.chargerlink.gateway.analyser.Value.V.Empty)
    def withV(__v: com.chargerlink.gateway.analyser.Value.V): Value = copy(v = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => v.d.orNull
        case 2 => v.i.orNull
        case 3 => v.l.orNull
        case 4 => v.s.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => v.d.map(_root_.scalapb.descriptors.PDouble).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => v.i.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => v.l.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => v.s.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.analyser.Value
}

object Value extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Value] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Value] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.Value = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.analyser.Value(
      v = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Double]].map(com.chargerlink.gateway.analyser.Value.V.D) orElse
__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]].map(com.chargerlink.gateway.analyser.Value.V.I) orElse
__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]].map(com.chargerlink.gateway.analyser.Value.V.L) orElse
__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]].map(com.chargerlink.gateway.analyser.Value.V.S) getOrElse com.chargerlink.gateway.analyser.Value.V.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.Value] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.analyser.Value(
        v = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Double]]).map(com.chargerlink.gateway.analyser.Value.V.D) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]).map(com.chargerlink.gateway.analyser.Value.V.I) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]).map(com.chargerlink.gateway.analyser.Value.V.L) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]).map(com.chargerlink.gateway.analyser.Value.V.S) getOrElse com.chargerlink.gateway.analyser.Value.V.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = CommonProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = CommonProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.analyser.Value(
  )
  sealed trait V extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isD: Boolean = false
    def isI: Boolean = false
    def isL: Boolean = false
    def isS: Boolean = false
    def d: scala.Option[Double] = None
    def i: scala.Option[Int] = None
    def l: scala.Option[Long] = None
    def s: scala.Option[String] = None
  }
  object V extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.analyser.Value.V {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class D(value: Double) extends com.chargerlink.gateway.analyser.Value.V {
      override def isD: Boolean = true
      override def d: scala.Option[Double] = Some(value)
      override def number: Int = 1
    }
    @SerialVersionUID(0L)
    case class I(value: Int) extends com.chargerlink.gateway.analyser.Value.V {
      override def isI: Boolean = true
      override def i: scala.Option[Int] = Some(value)
      override def number: Int = 2
    }
    @SerialVersionUID(0L)
    case class L(value: Long) extends com.chargerlink.gateway.analyser.Value.V {
      override def isL: Boolean = true
      override def l: scala.Option[Long] = Some(value)
      override def number: Int = 3
    }
    @SerialVersionUID(0L)
    case class S(value: String) extends com.chargerlink.gateway.analyser.Value.V {
      override def isS: Boolean = true
      override def s: scala.Option[String] = Some(value)
      override def number: Int = 4
    }
  }
  implicit class ValueLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Value]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.Value](_l) {
    def d: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getD)((c_, f_) => c_.copy(v = com.chargerlink.gateway.analyser.Value.V.D(f_)))
    def i: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getI)((c_, f_) => c_.copy(v = com.chargerlink.gateway.analyser.Value.V.I(f_)))
    def l: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getL)((c_, f_) => c_.copy(v = com.chargerlink.gateway.analyser.Value.V.L(f_)))
    def s: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getS)((c_, f_) => c_.copy(v = com.chargerlink.gateway.analyser.Value.V.S(f_)))
    def v: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Value.V] = field(_.v)((c_, f_) => c_.copy(v = f_))
  }
  final val D_FIELD_NUMBER = 1
  final val I_FIELD_NUMBER = 2
  final val L_FIELD_NUMBER = 3
  final val S_FIELD_NUMBER = 4
}
