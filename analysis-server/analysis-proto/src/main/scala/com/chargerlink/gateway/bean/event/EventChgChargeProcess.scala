// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 充电桩TCU设备充电过程通知事件的消息定义。其中：event_id为请求消息的消息头的消息序列号。
  *
  * @param orderInfo
  *  / (必填)当前充电订单信息。
  * @param chargeInfo
  *  / (可选)当前充电车辆信息。
  */
@SerialVersionUID(0L)
final case class EventChgChargeProcess(
    orderInfo: com.chargerlink.gateway.bean.data.DataChgOrder,
    chargeInfo: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EventChgChargeProcess] with com.trueaccord.lenses.Updatable[EventChgChargeProcess] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(orderInfo.serializedSize) + orderInfo.serializedSize
      if (chargeInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(chargeInfo.get.serializedSize) + chargeInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(orderInfo.serializedSize)
      orderInfo.writeTo(_output__)
      chargeInfo.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.EventChgChargeProcess = {
      var __orderInfo = this.orderInfo
      var __chargeInfo = this.chargeInfo
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __orderInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __orderInfo)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __chargeInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __chargeInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.EventChgChargeProcess(
          orderInfo = __orderInfo,
          chargeInfo = __chargeInfo
      )
    }
    def withOrderInfo(__v: com.chargerlink.gateway.bean.data.DataChgOrder): EventChgChargeProcess = copy(orderInfo = __v)
    def getChargeInfo: com.chargerlink.gateway.bean.data.DataChgCharge = chargeInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.defaultInstance)
    def clearChargeInfo: EventChgChargeProcess = copy(chargeInfo = None)
    def withChargeInfo(__v: com.chargerlink.gateway.bean.data.DataChgCharge): EventChgChargeProcess = copy(chargeInfo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => orderInfo
        case 2 => chargeInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => orderInfo.toPMessage
        case 2 => chargeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.EventChgChargeProcess
}

object EventChgChargeProcess extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventChgChargeProcess] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventChgChargeProcess] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.EventChgChargeProcess = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.EventChgChargeProcess(
      __fieldsMap(__fields.get(0)).asInstanceOf[com.chargerlink.gateway.bean.data.DataChgOrder],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.EventChgChargeProcess] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.EventChgChargeProcess(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[com.chargerlink.gateway.bean.data.DataChgOrder],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventChargerProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventChargerProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgOrder
      case 2 => __out = com.chargerlink.gateway.bean.data.DataChgCharge
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.EventChgChargeProcess(
    orderInfo = com.chargerlink.gateway.bean.data.DataChgOrder.defaultInstance
  )
  implicit class EventChgChargeProcessLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeProcess]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeProcess](_l) {
    def orderInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder] = field(_.orderInfo)((c_, f_) => c_.copy(orderInfo = f_))
    def chargeInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge] = field(_.getChargeInfo)((c_, f_) => c_.copy(chargeInfo = Some(f_)))
    def optionalChargeInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]] = field(_.chargeInfo)((c_, f_) => c_.copy(chargeInfo = f_))
  }
  final val ORDER_INFO_FIELD_NUMBER = 1
  final val CHARGE_INFO_FIELD_NUMBER = 2
}
