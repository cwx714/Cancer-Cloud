// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 充电桩计费模板的消息定义。
  *
  * @param priceSchemeId
  *  / (必填)计费模板ID。在相同计费模板内，所有费率编号ID必须唯一。
  * @param priceSchemeDesc
  *  / (可选)计费模板的备注信息。
  * @param tariffSetList
  *  / (可选)费率集合的列表。格式为：费率类型-&gt;费率集合。其中：费率类型使用TariffType常量的值。
  */
@SerialVersionUID(0L)
final case class DataChgPriceScheme(
    priceSchemeId: Int,
    priceSchemeDesc: scala.Option[String] = None,
    tariffSetList: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] = scala.collection.immutable.Map.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgPriceScheme] with com.trueaccord.lenses.Updatable[DataChgPriceScheme] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, priceSchemeId)
      if (priceSchemeDesc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, priceSchemeDesc.get) }
      tariffSetList.foreach(tariffSetList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase(tariffSetList).serializedSize) + com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase(tariffSetList).serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, priceSchemeId)
      priceSchemeDesc.foreach { __v =>
        _output__.writeString(2, __v)
      };
      tariffSetList.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgPriceScheme = {
      var __priceSchemeId = this.priceSchemeId
      var __priceSchemeDesc = this.priceSchemeDesc
      val __tariffSetList = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] ++= this.tariffSetList)
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __priceSchemeId = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __priceSchemeDesc = Some(_input__.readString())
          case 26 =>
            __tariffSetList += com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataChgPriceScheme(
          priceSchemeId = __priceSchemeId,
          priceSchemeDesc = __priceSchemeDesc,
          tariffSetList = __tariffSetList.result()
      )
    }
    def withPriceSchemeId(__v: Int): DataChgPriceScheme = copy(priceSchemeId = __v)
    def getPriceSchemeDesc: String = priceSchemeDesc.getOrElse("")
    def clearPriceSchemeDesc: DataChgPriceScheme = copy(priceSchemeDesc = None)
    def withPriceSchemeDesc(__v: String): DataChgPriceScheme = copy(priceSchemeDesc = Some(__v))
    def clearTariffSetList = copy(tariffSetList = scala.collection.immutable.Map.empty)
    def addTariffSetList(__vs: (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)*): DataChgPriceScheme = addAllTariffSetList(__vs)
    def addAllTariffSetList(__vs: TraversableOnce[(Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)]): DataChgPriceScheme = copy(tariffSetList = tariffSetList ++ __vs)
    def withTariffSetList(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]): DataChgPriceScheme = copy(tariffSetList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => priceSchemeId
        case 2 => priceSchemeDesc.orNull
        case 3 => tariffSetList.map(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(priceSchemeId)
        case 2 => priceSchemeDesc.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(tariffSetList.map(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgPriceScheme
}

object DataChgPriceScheme extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgPriceScheme = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgPriceScheme(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry]].map(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgPriceScheme] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgPriceScheme(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataChgPriceScheme._typemapper_tariffSetList.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgPriceScheme(
    priceSchemeId = 0
  )
  @SerialVersionUID(0L)
  final case class TariffSetListEntry(
      key: scala.Option[Int] = None,
      value: scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TariffSetListEntry] with com.trueaccord.lenses.Updatable[TariffSetListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key.get) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readUInt32())
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Int = key.getOrElse(0)
      def clearKey: TariffSetListEntry = copy(key = None)
      def withKey(__v: Int): TariffSetListEntry = copy(key = Some(__v))
      def getValue: com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList = value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.defaultInstance)
      def clearValue: TariffSetListEntry = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList): TariffSetListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry
  }
  
  object TariffSetListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry(
    )
    implicit class TariffSetListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry(Some(__p._1), Some(__p._2)))
  }
  
  /** * 计费模板的费率集合的消息定义。
    *
    * @param tariffType
    *  / (必填)费率类型。
    * @param tariffList
    *  / (必填)费率列表。格式为：费率编号ID-&gt;费率价格。如果此费率集合不分时段，则费率列表只有一个费率价格；如果此费率集合是分时段的，则费率列表包含多个不同分段时间的费率价格。
    * @param tariffDesc
    *  / (可选)费率集合的备注信息。
    * @param tariffTime
    *  / (可选)计费的计时单位。单位：1分钟。null：默认为30分钟。
    */
  @SerialVersionUID(0L)
  final case class TariffList(
      tariffType: com.chargerlink.gateway.bean.common.ChgTariffType,
      tariffList: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] = scala.collection.immutable.Map.empty,
      tariffDesc: scala.Option[String] = None,
      tariffTime: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TariffList] with com.trueaccord.lenses.Updatable[TariffList] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, tariffType.value)
        tariffList.foreach(tariffList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase(tariffList).serializedSize) + com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase(tariffList).serializedSize)
        if (tariffDesc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, tariffDesc.get) }
        if (tariffTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, tariffTime.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeEnum(1, tariffType.value)
        tariffList.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase(__v).serializedSize)
          com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase(__v).writeTo(_output__)
        };
        tariffDesc.foreach { __v =>
          _output__.writeString(3, __v)
        };
        tariffTime.foreach { __v =>
          _output__.writeUInt32(4, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList = {
        var __tariffType = this.tariffType
        val __tariffList = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] ++= this.tariffList)
        var __tariffDesc = this.tariffDesc
        var __tariffTime = this.tariffTime
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __tariffType = com.chargerlink.gateway.bean.common.ChgTariffType.fromValue(_input__.readEnum())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __tariffList += com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry.defaultInstance))
            case 26 =>
              __tariffDesc = Some(_input__.readString())
            case 32 =>
              __tariffTime = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList(
            tariffType = __tariffType,
            tariffList = __tariffList.result(),
            tariffDesc = __tariffDesc,
            tariffTime = __tariffTime
        )
      }
      def withTariffType(__v: com.chargerlink.gateway.bean.common.ChgTariffType): TariffList = copy(tariffType = __v)
      def clearTariffList = copy(tariffList = scala.collection.immutable.Map.empty)
      def addTariffList(__vs: (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)*): TariffList = addAllTariffList(__vs)
      def addAllTariffList(__vs: TraversableOnce[(Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)]): TariffList = copy(tariffList = tariffList ++ __vs)
      def withTariffList(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]): TariffList = copy(tariffList = __v)
      def getTariffDesc: String = tariffDesc.getOrElse("")
      def clearTariffDesc: TariffList = copy(tariffDesc = None)
      def withTariffDesc(__v: String): TariffList = copy(tariffDesc = Some(__v))
      def getTariffTime: Int = tariffTime.getOrElse(0)
      def clearTariffTime: TariffList = copy(tariffTime = None)
      def withTariffTime(__v: Int): TariffList = copy(tariffTime = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => tariffType.javaValueDescriptor
          case 2 => tariffList.map(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase)(_root_.scala.collection.breakOut)
          case 3 => tariffDesc.orNull
          case 4 => tariffTime.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(tariffType.scalaValueDescriptor)
          case 2 => _root_.scalapb.descriptors.PRepeated(tariffList.map(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
          case 3 => tariffDesc.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => tariffTime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList
  }
  
  object TariffList extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList(
        com.chargerlink.gateway.bean.common.ChgTariffType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry]].map(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList(
          com.chargerlink.gateway.bean.common.ChgTariffType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList._typemapper_tariffList.toCustom)(_root_.scala.collection.breakOut),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.chargerlink.gateway.bean.common.ChgTariffType
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList(
      tariffType = com.chargerlink.gateway.bean.common.ChgTariffType.CHG_TARIFF_CHARGING_KWH
    )
    @SerialVersionUID(0L)
    final case class TariffListEntry(
        key: scala.Option[Int] = None,
        value: scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TariffListEntry] with com.trueaccord.lenses.Updatable[TariffListEntry] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key.get) }
          if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          key.foreach { __v =>
            _output__.writeUInt32(1, __v)
          };
          value.foreach { __v =>
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry = {
          var __key = this.key
          var __value = this.value
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 8 =>
                __key = Some(_input__.readUInt32())
              case 18 =>
                __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice.defaultInstance)))
              case tag => _input__.skipField(tag)
            }
          }
          com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry(
              key = __key,
              value = __value
          )
        }
        def getKey: Int = key.getOrElse(0)
        def clearKey: TariffListEntry = copy(key = None)
        def withKey(__v: Int): TariffListEntry = copy(key = Some(__v))
        def getValue: com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice = value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice.defaultInstance)
        def clearValue: TariffListEntry = copy(value = None)
        def withValue(__v: com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice): TariffListEntry = copy(value = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => key.orNull
            case 2 => value.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
        def companion = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry
    }
    
    object TariffListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry(
          __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
          __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 2 => __out = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry(
      )
      implicit class TariffListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry](_l) {
        def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
        def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
        def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)] =
        _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry(Some(__p._1), Some(__p._2)))
    }
    
    implicit class TariffListLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList](_l) {
      def tariffType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgTariffType] = field(_.tariffType)((c_, f_) => c_.copy(tariffType = f_))
      def tariffList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]] = field(_.tariffList)((c_, f_) => c_.copy(tariffList = f_))
      def tariffDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getTariffDesc)((c_, f_) => c_.copy(tariffDesc = Some(f_)))
      def optionalTariffDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.tariffDesc)((c_, f_) => c_.copy(tariffDesc = f_))
      def tariffTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getTariffTime)((c_, f_) => c_.copy(tariffTime = Some(f_)))
      def optionalTariffTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.tariffTime)((c_, f_) => c_.copy(tariffTime = f_))
    }
    final val TARIFF_TYPE_FIELD_NUMBER = 1
    final val TARIFF_LIST_FIELD_NUMBER = 2
    final val TARIFF_DESC_FIELD_NUMBER = 3
    final val TARIFF_TIME_FIELD_NUMBER = 4
    @transient
    private val _typemapper_tariffList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList.TariffListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice)]]
  }
  
  /** * 计费模板的费率价格的消息定义。
    *
    * @param tariffId
    *  / (必填)费率编号ID。
    * @param priceMoney
    *  / (必填)费率价格，单位：0.01元。
    * @param priceDesc
    *  / (可选)费率价格的备注信息。
    * @param startTime
    *  / (可选)每日分段费率的开始时间(24小时内绝对时间)。单位：1分，范围：0分～1440分。例如，420表示早上7:00点开始计费。
    * @param startPeriod
    *  / (可选)订单分段费率的开始时间(订单期间相对时间)。单位：1分钟。例如，120表示订单开始后120分钟开始计费。
    * @param tariffPeriod
    *  / (可选)多费率电表计费的电量时段类型类型。当使用多费率电表时，使用此字段。
    */
  @SerialVersionUID(0L)
  final case class TariffPrice(
      tariffId: Int,
      priceMoney: Int,
      priceDesc: scala.Option[String] = None,
      startTime: scala.Option[Int] = None,
      startPeriod: scala.Option[Int] = None,
      tariffPeriod: scala.Option[com.chargerlink.gateway.bean.common.ChgTariffPeriod] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TariffPrice] with com.trueaccord.lenses.Updatable[TariffPrice] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, tariffId)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, priceMoney)
        if (priceDesc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, priceDesc.get) }
        if (startTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, startTime.get) }
        if (startPeriod.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, startPeriod.get) }
        if (tariffPeriod.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, tariffPeriod.get.value) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, tariffId)
        _output__.writeUInt32(2, priceMoney)
        priceDesc.foreach { __v =>
          _output__.writeString(3, __v)
        };
        startTime.foreach { __v =>
          _output__.writeUInt32(4, __v)
        };
        startPeriod.foreach { __v =>
          _output__.writeUInt32(5, __v)
        };
        tariffPeriod.foreach { __v =>
          _output__.writeEnum(6, __v.value)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice = {
        var __tariffId = this.tariffId
        var __priceMoney = this.priceMoney
        var __priceDesc = this.priceDesc
        var __startTime = this.startTime
        var __startPeriod = this.startPeriod
        var __tariffPeriod = this.tariffPeriod
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __tariffId = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __priceMoney = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 26 =>
              __priceDesc = Some(_input__.readString())
            case 32 =>
              __startTime = Some(_input__.readUInt32())
            case 40 =>
              __startPeriod = Some(_input__.readUInt32())
            case 48 =>
              __tariffPeriod = Some(com.chargerlink.gateway.bean.common.ChgTariffPeriod.fromValue(_input__.readEnum()))
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice(
            tariffId = __tariffId,
            priceMoney = __priceMoney,
            priceDesc = __priceDesc,
            startTime = __startTime,
            startPeriod = __startPeriod,
            tariffPeriod = __tariffPeriod
        )
      }
      def withTariffId(__v: Int): TariffPrice = copy(tariffId = __v)
      def withPriceMoney(__v: Int): TariffPrice = copy(priceMoney = __v)
      def getPriceDesc: String = priceDesc.getOrElse("")
      def clearPriceDesc: TariffPrice = copy(priceDesc = None)
      def withPriceDesc(__v: String): TariffPrice = copy(priceDesc = Some(__v))
      def getStartTime: Int = startTime.getOrElse(0)
      def clearStartTime: TariffPrice = copy(startTime = None)
      def withStartTime(__v: Int): TariffPrice = copy(startTime = Some(__v))
      def getStartPeriod: Int = startPeriod.getOrElse(0)
      def clearStartPeriod: TariffPrice = copy(startPeriod = None)
      def withStartPeriod(__v: Int): TariffPrice = copy(startPeriod = Some(__v))
      def getTariffPeriod: com.chargerlink.gateway.bean.common.ChgTariffPeriod = tariffPeriod.getOrElse(com.chargerlink.gateway.bean.common.ChgTariffPeriod.CHG_TARIFF_PERIOD_TIP)
      def clearTariffPeriod: TariffPrice = copy(tariffPeriod = None)
      def withTariffPeriod(__v: com.chargerlink.gateway.bean.common.ChgTariffPeriod): TariffPrice = copy(tariffPeriod = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => tariffId
          case 2 => priceMoney
          case 3 => priceDesc.orNull
          case 4 => startTime.orNull
          case 5 => startPeriod.orNull
          case 6 => tariffPeriod.map(_.javaValueDescriptor).orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(tariffId)
          case 2 => _root_.scalapb.descriptors.PInt(priceMoney)
          case 3 => priceDesc.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => startTime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => startPeriod.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => tariffPeriod.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice
  }
  
  object TariffPrice extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgTariffPeriod.fromValue(__e.getNumber))
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgTariffPeriod.fromValue(__e.number))
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgPriceScheme.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 6 => com.chargerlink.gateway.bean.common.ChgTariffPeriod
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice(
      tariffId = 0,
      priceMoney = 0
    )
    implicit class TariffPriceLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffPrice](_l) {
      def tariffId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.tariffId)((c_, f_) => c_.copy(tariffId = f_))
      def priceMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.priceMoney)((c_, f_) => c_.copy(priceMoney = f_))
      def priceDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPriceDesc)((c_, f_) => c_.copy(priceDesc = Some(f_)))
      def optionalPriceDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.priceDesc)((c_, f_) => c_.copy(priceDesc = f_))
      def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getStartTime)((c_, f_) => c_.copy(startTime = Some(f_)))
      def optionalStartTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
      def startPeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getStartPeriod)((c_, f_) => c_.copy(startPeriod = Some(f_)))
      def optionalStartPeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.startPeriod)((c_, f_) => c_.copy(startPeriod = f_))
      def tariffPeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgTariffPeriod] = field(_.getTariffPeriod)((c_, f_) => c_.copy(tariffPeriod = Some(f_)))
      def optionalTariffPeriod: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgTariffPeriod]] = field(_.tariffPeriod)((c_, f_) => c_.copy(tariffPeriod = f_))
    }
    final val TARIFF_ID_FIELD_NUMBER = 1
    final val PRICE_MONEY_FIELD_NUMBER = 2
    final val PRICE_DESC_FIELD_NUMBER = 3
    final val START_TIME_FIELD_NUMBER = 4
    final val START_PERIOD_FIELD_NUMBER = 5
    final val TARIFF_PERIOD_FIELD_NUMBER = 6
  }
  
  implicit class DataChgPriceSchemeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme](_l) {
    def priceSchemeId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.priceSchemeId)((c_, f_) => c_.copy(priceSchemeId = f_))
    def priceSchemeDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPriceSchemeDesc)((c_, f_) => c_.copy(priceSchemeDesc = Some(f_)))
    def optionalPriceSchemeDesc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.priceSchemeDesc)((c_, f_) => c_.copy(priceSchemeDesc = f_))
    def tariffSetList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList]] = field(_.tariffSetList)((c_, f_) => c_.copy(tariffSetList = f_))
  }
  final val PRICE_SCHEME_ID_FIELD_NUMBER = 1
  final val PRICE_SCHEME_DESC_FIELD_NUMBER = 2
  final val TARIFF_SET_LIST_FIELD_NUMBER = 3
  @transient
  private val _typemapper_tariffSetList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffSetListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPriceScheme.TariffList)]]
}
