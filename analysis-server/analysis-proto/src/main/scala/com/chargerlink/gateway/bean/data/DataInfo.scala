// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 终端设备实时状态数据的消息定义。其中：上报消息详情的定义分别在以下文件中：DataVehicle.proto、DataCharger.proto、DataRecorder.proto。
  *
  * @param deviceType
  *  / (必填)终端设备类型。
  * @param deviceId
  *  / (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
  * @param subDevice
  *  / (必填)子设备标识信息。其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"。
  * @param dataTime
  *  / (必填)数据采集的时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param dataType
  *  / (必填)数据类型。数据值为DataType常量的按位组合。
  */
@SerialVersionUID(0L)
final case class DataInfo(
    deviceType: com.chargerlink.gateway.bean.common.DeviceType,
    deviceId: String,
    subDevice: String,
    dataTime: Long,
    dataType: Int,
    dataDetail: com.chargerlink.gateway.bean.data.DataInfo.DataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataInfo] with com.trueaccord.lenses.Updatable[DataInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, deviceType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, deviceId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, subDevice)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, dataTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, dataType)
      if (dataDetail.dataVehicle.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataDetail.dataVehicle.get.serializedSize) + dataDetail.dataVehicle.get.serializedSize }
      if (dataDetail.dataRecorder.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataDetail.dataRecorder.get.serializedSize) + dataDetail.dataRecorder.get.serializedSize }
      if (dataDetail.dataCharger.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataDetail.dataCharger.get.serializedSize) + dataDetail.dataCharger.get.serializedSize }
      if (dataDetail.dataParking.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataDetail.dataParking.get.serializedSize) + dataDetail.dataParking.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, deviceType.value)
      _output__.writeString(2, deviceId)
      _output__.writeString(3, subDevice)
      _output__.writeInt64(4, dataTime)
      _output__.writeInt32(5, dataType)
      dataDetail.dataVehicle.foreach { __v =>
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      dataDetail.dataRecorder.foreach { __v =>
        _output__.writeTag(200, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      dataDetail.dataCharger.foreach { __v =>
        _output__.writeTag(300, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      dataDetail.dataParking.foreach { __v =>
        _output__.writeTag(400, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataInfo = {
      var __deviceType = this.deviceType
      var __deviceId = this.deviceId
      var __subDevice = this.subDevice
      var __dataTime = this.dataTime
      var __dataType = this.dataType
      var __requiredFields0: Long = 0x1fL
      var __dataDetail = this.dataDetail
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __deviceId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __subDevice = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __dataTime = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __dataType = _input__.readInt32()
            __requiredFields0 &= 0xffffffffffffffefL
          case 802 =>
            __dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataVehicle(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, dataDetail.dataVehicle.getOrElse(com.chargerlink.gateway.bean.data.DataVehicle.defaultInstance)))
          case 1602 =>
            __dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataRecorder(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, dataDetail.dataRecorder.getOrElse(com.chargerlink.gateway.bean.data.DataRecorder.defaultInstance)))
          case 2402 =>
            __dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataCharger(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, dataDetail.dataCharger.getOrElse(com.chargerlink.gateway.bean.data.DataCharger.defaultInstance)))
          case 3202 =>
            __dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataParking(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, dataDetail.dataParking.getOrElse(com.chargerlink.gateway.bean.data.DataParking.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataInfo(
          deviceType = __deviceType,
          deviceId = __deviceId,
          subDevice = __subDevice,
          dataTime = __dataTime,
          dataType = __dataType,
          dataDetail = __dataDetail
      )
    }
    def withDeviceType(__v: com.chargerlink.gateway.bean.common.DeviceType): DataInfo = copy(deviceType = __v)
    def withDeviceId(__v: String): DataInfo = copy(deviceId = __v)
    def withSubDevice(__v: String): DataInfo = copy(subDevice = __v)
    def withDataTime(__v: Long): DataInfo = copy(dataTime = __v)
    def withDataType(__v: Int): DataInfo = copy(dataType = __v)
    def getDataVehicle: com.chargerlink.gateway.bean.data.DataVehicle = dataDetail.dataVehicle.getOrElse(com.chargerlink.gateway.bean.data.DataVehicle.defaultInstance)
    def withDataVehicle(__v: com.chargerlink.gateway.bean.data.DataVehicle): DataInfo = copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataVehicle(__v))
    def getDataRecorder: com.chargerlink.gateway.bean.data.DataRecorder = dataDetail.dataRecorder.getOrElse(com.chargerlink.gateway.bean.data.DataRecorder.defaultInstance)
    def withDataRecorder(__v: com.chargerlink.gateway.bean.data.DataRecorder): DataInfo = copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataRecorder(__v))
    def getDataCharger: com.chargerlink.gateway.bean.data.DataCharger = dataDetail.dataCharger.getOrElse(com.chargerlink.gateway.bean.data.DataCharger.defaultInstance)
    def withDataCharger(__v: com.chargerlink.gateway.bean.data.DataCharger): DataInfo = copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataCharger(__v))
    def getDataParking: com.chargerlink.gateway.bean.data.DataParking = dataDetail.dataParking.getOrElse(com.chargerlink.gateway.bean.data.DataParking.defaultInstance)
    def withDataParking(__v: com.chargerlink.gateway.bean.data.DataParking): DataInfo = copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataParking(__v))
    def clearDataDetail: DataInfo = copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.Empty)
    def withDataDetail(__v: com.chargerlink.gateway.bean.data.DataInfo.DataDetail): DataInfo = copy(dataDetail = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.javaValueDescriptor
        case 2 => deviceId
        case 3 => subDevice
        case 4 => dataTime
        case 5 => dataType
        case 100 => dataDetail.dataVehicle.orNull
        case 200 => dataDetail.dataRecorder.orNull
        case 300 => dataDetail.dataCharger.orNull
        case 400 => dataDetail.dataParking.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(deviceType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(deviceId)
        case 3 => _root_.scalapb.descriptors.PString(subDevice)
        case 4 => _root_.scalapb.descriptors.PLong(dataTime)
        case 5 => _root_.scalapb.descriptors.PInt(dataType)
        case 100 => dataDetail.dataVehicle.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 200 => dataDetail.dataRecorder.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 300 => dataDetail.dataCharger.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 400 => dataDetail.dataParking.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataInfo
}

object DataInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataInfo(
      com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap(__fields.get(2)).asInstanceOf[String],
      __fieldsMap(__fields.get(3)).asInstanceOf[Long],
      __fieldsMap(__fields.get(4)).asInstanceOf[Int],
      dataDetail = __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehicle]].map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataVehicle) orElse
__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataRecorder]].map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataRecorder) orElse
__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataCharger]].map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataCharger) orElse
__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataParking]].map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataParking) getOrElse com.chargerlink.gateway.bean.data.DataInfo.DataDetail.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataInfo(
        com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Int],
        dataDetail = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehicle]]).map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataVehicle) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(200).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataRecorder]]).map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataRecorder) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(300).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataCharger]]).map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataCharger) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(400).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataParking]]).map(com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataParking) getOrElse com.chargerlink.gateway.bean.data.DataInfo.DataDetail.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataBaseProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataBaseProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 100 => __out = com.chargerlink.gateway.bean.data.DataVehicle
      case 200 => __out = com.chargerlink.gateway.bean.data.DataRecorder
      case 300 => __out = com.chargerlink.gateway.bean.data.DataCharger
      case 400 => __out = com.chargerlink.gateway.bean.data.DataParking
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.DeviceType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataInfo(
    deviceType = com.chargerlink.gateway.bean.common.DeviceType.DEVICE_VEHICLE_GB_V1,
    deviceId = "",
    subDevice = "",
    dataTime = 0L,
    dataType = 0
  )
  sealed trait DataDetail extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isDataVehicle: Boolean = false
    def isDataRecorder: Boolean = false
    def isDataCharger: Boolean = false
    def isDataParking: Boolean = false
    def dataVehicle: scala.Option[com.chargerlink.gateway.bean.data.DataVehicle] = None
    def dataRecorder: scala.Option[com.chargerlink.gateway.bean.data.DataRecorder] = None
    def dataCharger: scala.Option[com.chargerlink.gateway.bean.data.DataCharger] = None
    def dataParking: scala.Option[com.chargerlink.gateway.bean.data.DataParking] = None
  }
  object DataDetail extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.bean.data.DataInfo.DataDetail {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class DataVehicle(value: com.chargerlink.gateway.bean.data.DataVehicle) extends com.chargerlink.gateway.bean.data.DataInfo.DataDetail {
      override def isDataVehicle: Boolean = true
      override def dataVehicle: scala.Option[com.chargerlink.gateway.bean.data.DataVehicle] = Some(value)
      override def number: Int = 100
    }
    @SerialVersionUID(0L)
    case class DataRecorder(value: com.chargerlink.gateway.bean.data.DataRecorder) extends com.chargerlink.gateway.bean.data.DataInfo.DataDetail {
      override def isDataRecorder: Boolean = true
      override def dataRecorder: scala.Option[com.chargerlink.gateway.bean.data.DataRecorder] = Some(value)
      override def number: Int = 200
    }
    @SerialVersionUID(0L)
    case class DataCharger(value: com.chargerlink.gateway.bean.data.DataCharger) extends com.chargerlink.gateway.bean.data.DataInfo.DataDetail {
      override def isDataCharger: Boolean = true
      override def dataCharger: scala.Option[com.chargerlink.gateway.bean.data.DataCharger] = Some(value)
      override def number: Int = 300
    }
    @SerialVersionUID(0L)
    case class DataParking(value: com.chargerlink.gateway.bean.data.DataParking) extends com.chargerlink.gateway.bean.data.DataInfo.DataDetail {
      override def isDataParking: Boolean = true
      override def dataParking: scala.Option[com.chargerlink.gateway.bean.data.DataParking] = Some(value)
      override def number: Int = 400
    }
  }
  implicit class DataInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataInfo](_l) {
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.DeviceType] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def subDevice: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.subDevice)((c_, f_) => c_.copy(subDevice = f_))
    def dataTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.dataTime)((c_, f_) => c_.copy(dataTime = f_))
    def dataType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.dataType)((c_, f_) => c_.copy(dataType = f_))
    def dataVehicle: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehicle] = field(_.getDataVehicle)((c_, f_) => c_.copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataVehicle(f_)))
    def dataRecorder: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataRecorder] = field(_.getDataRecorder)((c_, f_) => c_.copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataRecorder(f_)))
    def dataCharger: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger] = field(_.getDataCharger)((c_, f_) => c_.copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataCharger(f_)))
    def dataParking: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataParking] = field(_.getDataParking)((c_, f_) => c_.copy(dataDetail = com.chargerlink.gateway.bean.data.DataInfo.DataDetail.DataParking(f_)))
    def dataDetail: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataInfo.DataDetail] = field(_.dataDetail)((c_, f_) => c_.copy(dataDetail = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val SUB_DEVICE_FIELD_NUMBER = 3
  final val DATA_TIME_FIELD_NUMBER = 4
  final val DATA_TYPE_FIELD_NUMBER = 5
  final val DATA_VEHICLE_FIELD_NUMBER = 100
  final val DATA_RECORDER_FIELD_NUMBER = 200
  final val DATA_CHARGER_FIELD_NUMBER = 300
  final val DATA_PARKING_FIELD_NUMBER = 400
}
