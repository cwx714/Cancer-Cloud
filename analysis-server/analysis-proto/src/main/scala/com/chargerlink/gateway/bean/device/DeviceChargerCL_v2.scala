// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.device



/** * ChargeLink公司的充电桩TCU设备信息的消息定义。设备类型：DEVICE_CHARGER_CL_V1/DEVICE_CHARGER_CL_V2，设备ID：最多9位数字的字符串。
  *
  * @param vendorId
  *  / (可选)供应商名称。缺省：空串。
  * @param modelNumber
  *  / (可选)设备型号。缺省：空串。
  * @param serialNumber
  *  / (可选)设备序列号。缺省：空串。
  * @param firmwareVersion
  *  / (可选)固件版本号。缺省：空串。
  * @param protocolVersion
  *  / (可选)协议版本号。缺省：空串。
  * @param clientVersion
  *  / (可选)客户端程序版本号。缺省：空串。
  * @param simIccid
  *  / (可选)SIM卡ICCID号。缺省：空串。
  * @param plugNum
  *  / (可选)充电枪数量。每个充电桩可以有多个充电枪。缺省：0，表示数量未知。
  * @param plugType
  *  / (可选)充电枪类型列表。
  */
@SerialVersionUID(0L)
final case class DeviceChargerCL_v2(
    vendorId: scala.Option[String] = None,
    modelNumber: scala.Option[String] = None,
    serialNumber: scala.Option[String] = None,
    firmwareVersion: scala.Option[String] = None,
    protocolVersion: scala.Option[String] = None,
    clientVersion: scala.Option[String] = None,
    simIccid: scala.Option[String] = None,
    plugNum: scala.Option[Int] = None,
    plugType: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.ChgPlugType] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DeviceChargerCL_v2] with com.trueaccord.lenses.Updatable[DeviceChargerCL_v2] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (vendorId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, vendorId.get) }
      if (modelNumber.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, modelNumber.get) }
      if (serialNumber.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, serialNumber.get) }
      if (firmwareVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, firmwareVersion.get) }
      if (protocolVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, protocolVersion.get) }
      if (clientVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, clientVersion.get) }
      if (simIccid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, simIccid.get) }
      if (plugNum.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, plugNum.get) }
      plugType.foreach(plugType => __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(11, plugType.value))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      vendorId.foreach { __v =>
        _output__.writeString(1, __v)
      };
      modelNumber.foreach { __v =>
        _output__.writeString(2, __v)
      };
      serialNumber.foreach { __v =>
        _output__.writeString(3, __v)
      };
      firmwareVersion.foreach { __v =>
        _output__.writeString(4, __v)
      };
      protocolVersion.foreach { __v =>
        _output__.writeString(5, __v)
      };
      clientVersion.foreach { __v =>
        _output__.writeString(6, __v)
      };
      simIccid.foreach { __v =>
        _output__.writeString(7, __v)
      };
      plugNum.foreach { __v =>
        _output__.writeUInt32(10, __v)
      };
      plugType.foreach { __v =>
        _output__.writeEnum(11, __v.value)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.device.DeviceChargerCL_v2 = {
      var __vendorId = this.vendorId
      var __modelNumber = this.modelNumber
      var __serialNumber = this.serialNumber
      var __firmwareVersion = this.firmwareVersion
      var __protocolVersion = this.protocolVersion
      var __clientVersion = this.clientVersion
      var __simIccid = this.simIccid
      var __plugNum = this.plugNum
      val __plugType = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.common.ChgPlugType] ++= this.plugType)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __vendorId = Some(_input__.readString())
          case 18 =>
            __modelNumber = Some(_input__.readString())
          case 26 =>
            __serialNumber = Some(_input__.readString())
          case 34 =>
            __firmwareVersion = Some(_input__.readString())
          case 42 =>
            __protocolVersion = Some(_input__.readString())
          case 50 =>
            __clientVersion = Some(_input__.readString())
          case 58 =>
            __simIccid = Some(_input__.readString())
          case 80 =>
            __plugNum = Some(_input__.readUInt32())
          case 88 =>
            __plugType += com.chargerlink.gateway.bean.common.ChgPlugType.fromValue(_input__.readEnum())
          case 90 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __plugType += com.chargerlink.gateway.bean.common.ChgPlugType.fromValue(_input__.readEnum)
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.device.DeviceChargerCL_v2(
          vendorId = __vendorId,
          modelNumber = __modelNumber,
          serialNumber = __serialNumber,
          firmwareVersion = __firmwareVersion,
          protocolVersion = __protocolVersion,
          clientVersion = __clientVersion,
          simIccid = __simIccid,
          plugNum = __plugNum,
          plugType = __plugType.result()
      )
    }
    def getVendorId: String = vendorId.getOrElse("")
    def clearVendorId: DeviceChargerCL_v2 = copy(vendorId = None)
    def withVendorId(__v: String): DeviceChargerCL_v2 = copy(vendorId = Some(__v))
    def getModelNumber: String = modelNumber.getOrElse("")
    def clearModelNumber: DeviceChargerCL_v2 = copy(modelNumber = None)
    def withModelNumber(__v: String): DeviceChargerCL_v2 = copy(modelNumber = Some(__v))
    def getSerialNumber: String = serialNumber.getOrElse("")
    def clearSerialNumber: DeviceChargerCL_v2 = copy(serialNumber = None)
    def withSerialNumber(__v: String): DeviceChargerCL_v2 = copy(serialNumber = Some(__v))
    def getFirmwareVersion: String = firmwareVersion.getOrElse("")
    def clearFirmwareVersion: DeviceChargerCL_v2 = copy(firmwareVersion = None)
    def withFirmwareVersion(__v: String): DeviceChargerCL_v2 = copy(firmwareVersion = Some(__v))
    def getProtocolVersion: String = protocolVersion.getOrElse("")
    def clearProtocolVersion: DeviceChargerCL_v2 = copy(protocolVersion = None)
    def withProtocolVersion(__v: String): DeviceChargerCL_v2 = copy(protocolVersion = Some(__v))
    def getClientVersion: String = clientVersion.getOrElse("")
    def clearClientVersion: DeviceChargerCL_v2 = copy(clientVersion = None)
    def withClientVersion(__v: String): DeviceChargerCL_v2 = copy(clientVersion = Some(__v))
    def getSimIccid: String = simIccid.getOrElse("")
    def clearSimIccid: DeviceChargerCL_v2 = copy(simIccid = None)
    def withSimIccid(__v: String): DeviceChargerCL_v2 = copy(simIccid = Some(__v))
    def getPlugNum: Int = plugNum.getOrElse(0)
    def clearPlugNum: DeviceChargerCL_v2 = copy(plugNum = None)
    def withPlugNum(__v: Int): DeviceChargerCL_v2 = copy(plugNum = Some(__v))
    def clearPlugType = copy(plugType = _root_.scala.collection.Seq.empty)
    def addPlugType(__vs: com.chargerlink.gateway.bean.common.ChgPlugType*): DeviceChargerCL_v2 = addAllPlugType(__vs)
    def addAllPlugType(__vs: TraversableOnce[com.chargerlink.gateway.bean.common.ChgPlugType]): DeviceChargerCL_v2 = copy(plugType = plugType ++ __vs)
    def withPlugType(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.ChgPlugType]): DeviceChargerCL_v2 = copy(plugType = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => vendorId.orNull
        case 2 => modelNumber.orNull
        case 3 => serialNumber.orNull
        case 4 => firmwareVersion.orNull
        case 5 => protocolVersion.orNull
        case 6 => clientVersion.orNull
        case 7 => simIccid.orNull
        case 10 => plugNum.orNull
        case 11 => plugType.map(_.javaValueDescriptor)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => vendorId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => modelNumber.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => serialNumber.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => firmwareVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => protocolVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => clientVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => simIccid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => plugNum.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => _root_.scalapb.descriptors.PRepeated(plugType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor))(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.device.DeviceChargerCL_v2
}

object DeviceChargerCL_v2 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.device.DeviceChargerCL_v2 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.device.DeviceChargerCL_v2(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgPlugType.fromValue(__e.getNumber))(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.device.DeviceChargerCL_v2(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.collection.Seq.empty).map(__e => com.chargerlink.gateway.bean.common.ChgPlugType.fromValue(__e.number))(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DeviceChargerProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DeviceChargerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 11 => com.chargerlink.gateway.bean.common.ChgPlugType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.device.DeviceChargerCL_v2(
  )
  implicit class DeviceChargerCL_v2Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceChargerCL_v2]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.device.DeviceChargerCL_v2](_l) {
    def vendorId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVendorId)((c_, f_) => c_.copy(vendorId = Some(f_)))
    def optionalVendorId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.vendorId)((c_, f_) => c_.copy(vendorId = f_))
    def modelNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getModelNumber)((c_, f_) => c_.copy(modelNumber = Some(f_)))
    def optionalModelNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.modelNumber)((c_, f_) => c_.copy(modelNumber = f_))
    def serialNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSerialNumber)((c_, f_) => c_.copy(serialNumber = Some(f_)))
    def optionalSerialNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.serialNumber)((c_, f_) => c_.copy(serialNumber = f_))
    def firmwareVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getFirmwareVersion)((c_, f_) => c_.copy(firmwareVersion = Some(f_)))
    def optionalFirmwareVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.firmwareVersion)((c_, f_) => c_.copy(firmwareVersion = f_))
    def protocolVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProtocolVersion)((c_, f_) => c_.copy(protocolVersion = Some(f_)))
    def optionalProtocolVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.protocolVersion)((c_, f_) => c_.copy(protocolVersion = f_))
    def clientVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getClientVersion)((c_, f_) => c_.copy(clientVersion = Some(f_)))
    def optionalClientVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.clientVersion)((c_, f_) => c_.copy(clientVersion = f_))
    def simIccid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSimIccid)((c_, f_) => c_.copy(simIccid = Some(f_)))
    def optionalSimIccid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.simIccid)((c_, f_) => c_.copy(simIccid = f_))
    def plugNum: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlugNum)((c_, f_) => c_.copy(plugNum = Some(f_)))
    def optionalPlugNum: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plugNum)((c_, f_) => c_.copy(plugNum = f_))
    def plugType: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.ChgPlugType]] = field(_.plugType)((c_, f_) => c_.copy(plugType = f_))
  }
  final val VENDOR_ID_FIELD_NUMBER = 1
  final val MODEL_NUMBER_FIELD_NUMBER = 2
  final val SERIAL_NUMBER_FIELD_NUMBER = 3
  final val FIRMWARE_VERSION_FIELD_NUMBER = 4
  final val PROTOCOL_VERSION_FIELD_NUMBER = 5
  final val CLIENT_VERSION_FIELD_NUMBER = 6
  final val SIM_ICCID_FIELD_NUMBER = 7
  final val PLUG_NUM_FIELD_NUMBER = 10
  final val PLUG_TYPE_FIELD_NUMBER = 11
}
