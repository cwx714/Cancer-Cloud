// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 当前充电订单数据的消息定义。只有当前充电桩处于充电状态时数据才有效。
  *
  * @param plugId
  *  / (必填)充电枪ID(从1开始)。
  * @param devOrderId
  *  / (必填)充电桩生成的唯一充电记录号。
  * @param svpOrderId
  *  / (可选)业务系统生成的全局唯一充电订单号。此订单号是从“远程启动充电”请求消息或"充电开始请求事件"应答消息中获取的。
  * @param svpBookId
  *  / (可选)业务系统生成的全局唯一预约订单号。此订单号是从“远程预约充电”请求消息中获取的。
  * @param serviceType
  *  / (可选)充电服务类型。
  * @param pinCode
  *  / (可选)充电服务校验码。用户可以通过在充电桩屏幕输入pin码结束充电。
  * @param errorCode
  *  / (可选)充电桩故障码。如果充电桩故障导致开启异常或充电结束，填入充电桩故障码。
  * @param startTime
  *  / (必填)充电开始时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param startMeter
  *  / (必填)充电开始电表度数。单位：0.01kwh。
  * @param startType
  *  / (可选)充电启动类型。
  * @param currentTime
  *  / (充电未结束时必填)充电当前时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param currentMeter
  *  / (充电未结束时必填)充电当前电表度数。单位：0.01kwh。
  * @param currentPower
  *  / (可选)充电当前输出功率。单位：0.01kw。
  * @param stopTime
  *  / (充电结束时必填)充电结束时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param stopMeter
  *  / (充电结束时必填)充电结束电表度数。单位：0.01kwh。
  * @param stopType
  *  / (可选)充电结束原因。
  * @param isCharged
  *  / (可选)充电订单是否已经扣款。true：订单已扣款，false：订单未扣款。
  * @param isComfirmed
  *  / (可选)充电订单后台是否已经确认。true：订单已确认，false：订单未确认。
  * @param userInfo
  *  / (必填)计费用户信息。
  * @param billInfo
  *  / (可选)计费账单信息。
  * @param deductInfo
  *  / (可选)计费扣款信息。
  * @param elecList
  *  / (可选)充电过程电量信息。
  * @param deviceExtra
  *  / (可选)设备附加信息。即需要透传到终端设备的自定义信息。具体使用和传输方法，根据设备类型自行实现。
  * @param serverExtra
  *  / (可选)平台附加信息。即需要保存到服务器订单消息的自定义信息。具体使用和传输方法，根据设备类型自行处理。
  */
@SerialVersionUID(0L)
final case class DataChgOrder(
    plugId: Int,
    devOrderId: Long,
    svpOrderId: scala.Option[String] = None,
    svpBookId: scala.Option[String] = None,
    serviceType: scala.Option[com.chargerlink.gateway.bean.common.ChgServiceType] = None,
    pinCode: scala.Option[String] = None,
    errorCode: scala.Option[Int] = None,
    startTime: Long,
    startMeter: Int,
    startType: scala.Option[com.chargerlink.gateway.bean.common.ChgStartType] = None,
    currentTime: scala.Option[Long] = None,
    currentMeter: scala.Option[Int] = None,
    currentPower: scala.Option[Int] = None,
    stopTime: scala.Option[Long] = None,
    stopMeter: scala.Option[Int] = None,
    stopType: scala.Option[com.chargerlink.gateway.bean.common.ChgStopType] = None,
    isCharged: scala.Option[Boolean] = None,
    isComfirmed: scala.Option[Boolean] = None,
    userInfo: com.chargerlink.gateway.bean.data.DataChgUser,
    billInfo: scala.Option[com.chargerlink.gateway.bean.data.DataChgBill] = None,
    deductInfo: scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction] = None,
    elecList: scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList] = None,
    deviceExtra: scala.Option[com.google.protobuf.any.Any] = None,
    serverExtra: scala.Option[com.google.protobuf.any.Any] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgOrder] with com.trueaccord.lenses.Updatable[DataChgOrder] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, plugId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, devOrderId)
      if (svpOrderId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, svpOrderId.get) }
      if (svpBookId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, svpBookId.get) }
      if (serviceType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, serviceType.get.value) }
      if (pinCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, pinCode.get) }
      if (errorCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, errorCode.get) }
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, startTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, startMeter)
      if (startType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(12, startType.get.value) }
      if (currentTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(13, currentTime.get) }
      if (currentMeter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(14, currentMeter.get) }
      if (currentPower.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(15, currentPower.get) }
      if (stopTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, stopTime.get) }
      if (stopMeter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(17, stopMeter.get) }
      if (stopType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(18, stopType.get.value) }
      if (isCharged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(20, isCharged.get) }
      if (isComfirmed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(21, isComfirmed.get) }
      __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(userInfo.serializedSize) + userInfo.serializedSize
      if (billInfo.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(billInfo.get.serializedSize) + billInfo.get.serializedSize }
      if (deductInfo.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deductInfo.get.serializedSize) + deductInfo.get.serializedSize }
      if (elecList.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(elecList.get.serializedSize) + elecList.get.serializedSize }
      if (deviceExtra.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceExtra.get.serializedSize) + deviceExtra.get.serializedSize }
      if (serverExtra.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(serverExtra.get.serializedSize) + serverExtra.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, plugId)
      _output__.writeInt64(2, devOrderId)
      svpOrderId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      svpBookId.foreach { __v =>
        _output__.writeString(4, __v)
      };
      serviceType.foreach { __v =>
        _output__.writeEnum(5, __v.value)
      };
      pinCode.foreach { __v =>
        _output__.writeString(6, __v)
      };
      errorCode.foreach { __v =>
        _output__.writeInt32(7, __v)
      };
      _output__.writeInt64(10, startTime)
      _output__.writeUInt32(11, startMeter)
      startType.foreach { __v =>
        _output__.writeEnum(12, __v.value)
      };
      currentTime.foreach { __v =>
        _output__.writeInt64(13, __v)
      };
      currentMeter.foreach { __v =>
        _output__.writeUInt32(14, __v)
      };
      currentPower.foreach { __v =>
        _output__.writeUInt32(15, __v)
      };
      stopTime.foreach { __v =>
        _output__.writeInt64(16, __v)
      };
      stopMeter.foreach { __v =>
        _output__.writeUInt32(17, __v)
      };
      stopType.foreach { __v =>
        _output__.writeEnum(18, __v.value)
      };
      isCharged.foreach { __v =>
        _output__.writeBool(20, __v)
      };
      isComfirmed.foreach { __v =>
        _output__.writeBool(21, __v)
      };
      _output__.writeTag(22, 2)
      _output__.writeUInt32NoTag(userInfo.serializedSize)
      userInfo.writeTo(_output__)
      billInfo.foreach { __v =>
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deductInfo.foreach { __v =>
        _output__.writeTag(24, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      elecList.foreach { __v =>
        _output__.writeTag(25, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deviceExtra.foreach { __v =>
        _output__.writeTag(30, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      serverExtra.foreach { __v =>
        _output__.writeTag(31, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgOrder = {
      var __plugId = this.plugId
      var __devOrderId = this.devOrderId
      var __svpOrderId = this.svpOrderId
      var __svpBookId = this.svpBookId
      var __serviceType = this.serviceType
      var __pinCode = this.pinCode
      var __errorCode = this.errorCode
      var __startTime = this.startTime
      var __startMeter = this.startMeter
      var __startType = this.startType
      var __currentTime = this.currentTime
      var __currentMeter = this.currentMeter
      var __currentPower = this.currentPower
      var __stopTime = this.stopTime
      var __stopMeter = this.stopMeter
      var __stopType = this.stopType
      var __isCharged = this.isCharged
      var __isComfirmed = this.isComfirmed
      var __userInfo = this.userInfo
      var __billInfo = this.billInfo
      var __deductInfo = this.deductInfo
      var __elecList = this.elecList
      var __deviceExtra = this.deviceExtra
      var __serverExtra = this.serverExtra
      var __requiredFields0: Long = 0x1fL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __plugId = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __devOrderId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __svpOrderId = Some(_input__.readString())
          case 34 =>
            __svpBookId = Some(_input__.readString())
          case 40 =>
            __serviceType = Some(com.chargerlink.gateway.bean.common.ChgServiceType.fromValue(_input__.readEnum()))
          case 50 =>
            __pinCode = Some(_input__.readString())
          case 56 =>
            __errorCode = Some(_input__.readInt32())
          case 80 =>
            __startTime = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 88 =>
            __startMeter = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 96 =>
            __startType = Some(com.chargerlink.gateway.bean.common.ChgStartType.fromValue(_input__.readEnum()))
          case 104 =>
            __currentTime = Some(_input__.readInt64())
          case 112 =>
            __currentMeter = Some(_input__.readUInt32())
          case 120 =>
            __currentPower = Some(_input__.readUInt32())
          case 128 =>
            __stopTime = Some(_input__.readInt64())
          case 136 =>
            __stopMeter = Some(_input__.readUInt32())
          case 144 =>
            __stopType = Some(com.chargerlink.gateway.bean.common.ChgStopType.fromValue(_input__.readEnum()))
          case 160 =>
            __isCharged = Some(_input__.readBool())
          case 168 =>
            __isComfirmed = Some(_input__.readBool())
          case 178 =>
            __userInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __userInfo)
            __requiredFields0 &= 0xffffffffffffffefL
          case 186 =>
            __billInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __billInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgBill.defaultInstance)))
          case 194 =>
            __deductInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __deductInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction.defaultInstance)))
          case 202 =>
            __elecList = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __elecList.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList.defaultInstance)))
          case 242 =>
            __deviceExtra = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __deviceExtra.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case 250 =>
            __serverExtra = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __serverExtra.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataChgOrder(
          plugId = __plugId,
          devOrderId = __devOrderId,
          svpOrderId = __svpOrderId,
          svpBookId = __svpBookId,
          serviceType = __serviceType,
          pinCode = __pinCode,
          errorCode = __errorCode,
          startTime = __startTime,
          startMeter = __startMeter,
          startType = __startType,
          currentTime = __currentTime,
          currentMeter = __currentMeter,
          currentPower = __currentPower,
          stopTime = __stopTime,
          stopMeter = __stopMeter,
          stopType = __stopType,
          isCharged = __isCharged,
          isComfirmed = __isComfirmed,
          userInfo = __userInfo,
          billInfo = __billInfo,
          deductInfo = __deductInfo,
          elecList = __elecList,
          deviceExtra = __deviceExtra,
          serverExtra = __serverExtra
      )
    }
    def withPlugId(__v: Int): DataChgOrder = copy(plugId = __v)
    def withDevOrderId(__v: Long): DataChgOrder = copy(devOrderId = __v)
    def getSvpOrderId: String = svpOrderId.getOrElse("")
    def clearSvpOrderId: DataChgOrder = copy(svpOrderId = None)
    def withSvpOrderId(__v: String): DataChgOrder = copy(svpOrderId = Some(__v))
    def getSvpBookId: String = svpBookId.getOrElse("")
    def clearSvpBookId: DataChgOrder = copy(svpBookId = None)
    def withSvpBookId(__v: String): DataChgOrder = copy(svpBookId = Some(__v))
    def getServiceType: com.chargerlink.gateway.bean.common.ChgServiceType = serviceType.getOrElse(com.chargerlink.gateway.bean.common.ChgServiceType.CHG_SERVICE_CHARGE_AUTO)
    def clearServiceType: DataChgOrder = copy(serviceType = None)
    def withServiceType(__v: com.chargerlink.gateway.bean.common.ChgServiceType): DataChgOrder = copy(serviceType = Some(__v))
    def getPinCode: String = pinCode.getOrElse("")
    def clearPinCode: DataChgOrder = copy(pinCode = None)
    def withPinCode(__v: String): DataChgOrder = copy(pinCode = Some(__v))
    def getErrorCode: Int = errorCode.getOrElse(0)
    def clearErrorCode: DataChgOrder = copy(errorCode = None)
    def withErrorCode(__v: Int): DataChgOrder = copy(errorCode = Some(__v))
    def withStartTime(__v: Long): DataChgOrder = copy(startTime = __v)
    def withStartMeter(__v: Int): DataChgOrder = copy(startMeter = __v)
    def getStartType: com.chargerlink.gateway.bean.common.ChgStartType = startType.getOrElse(com.chargerlink.gateway.bean.common.ChgStartType.CHG_START_LOCAL_PLUG)
    def clearStartType: DataChgOrder = copy(startType = None)
    def withStartType(__v: com.chargerlink.gateway.bean.common.ChgStartType): DataChgOrder = copy(startType = Some(__v))
    def getCurrentTime: Long = currentTime.getOrElse(0L)
    def clearCurrentTime: DataChgOrder = copy(currentTime = None)
    def withCurrentTime(__v: Long): DataChgOrder = copy(currentTime = Some(__v))
    def getCurrentMeter: Int = currentMeter.getOrElse(0)
    def clearCurrentMeter: DataChgOrder = copy(currentMeter = None)
    def withCurrentMeter(__v: Int): DataChgOrder = copy(currentMeter = Some(__v))
    def getCurrentPower: Int = currentPower.getOrElse(0)
    def clearCurrentPower: DataChgOrder = copy(currentPower = None)
    def withCurrentPower(__v: Int): DataChgOrder = copy(currentPower = Some(__v))
    def getStopTime: Long = stopTime.getOrElse(0L)
    def clearStopTime: DataChgOrder = copy(stopTime = None)
    def withStopTime(__v: Long): DataChgOrder = copy(stopTime = Some(__v))
    def getStopMeter: Int = stopMeter.getOrElse(0)
    def clearStopMeter: DataChgOrder = copy(stopMeter = None)
    def withStopMeter(__v: Int): DataChgOrder = copy(stopMeter = Some(__v))
    def getStopType: com.chargerlink.gateway.bean.common.ChgStopType = stopType.getOrElse(com.chargerlink.gateway.bean.common.ChgStopType.CHG_STOP_NORMAL)
    def clearStopType: DataChgOrder = copy(stopType = None)
    def withStopType(__v: com.chargerlink.gateway.bean.common.ChgStopType): DataChgOrder = copy(stopType = Some(__v))
    def getIsCharged: Boolean = isCharged.getOrElse(false)
    def clearIsCharged: DataChgOrder = copy(isCharged = None)
    def withIsCharged(__v: Boolean): DataChgOrder = copy(isCharged = Some(__v))
    def getIsComfirmed: Boolean = isComfirmed.getOrElse(false)
    def clearIsComfirmed: DataChgOrder = copy(isComfirmed = None)
    def withIsComfirmed(__v: Boolean): DataChgOrder = copy(isComfirmed = Some(__v))
    def withUserInfo(__v: com.chargerlink.gateway.bean.data.DataChgUser): DataChgOrder = copy(userInfo = __v)
    def getBillInfo: com.chargerlink.gateway.bean.data.DataChgBill = billInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgBill.defaultInstance)
    def clearBillInfo: DataChgOrder = copy(billInfo = None)
    def withBillInfo(__v: com.chargerlink.gateway.bean.data.DataChgBill): DataChgOrder = copy(billInfo = Some(__v))
    def getDeductInfo: com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction = deductInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction.defaultInstance)
    def clearDeductInfo: DataChgOrder = copy(deductInfo = None)
    def withDeductInfo(__v: com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction): DataChgOrder = copy(deductInfo = Some(__v))
    def getElecList: com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList = elecList.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList.defaultInstance)
    def clearElecList: DataChgOrder = copy(elecList = None)
    def withElecList(__v: com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList): DataChgOrder = copy(elecList = Some(__v))
    def getDeviceExtra: com.google.protobuf.any.Any = deviceExtra.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearDeviceExtra: DataChgOrder = copy(deviceExtra = None)
    def withDeviceExtra(__v: com.google.protobuf.any.Any): DataChgOrder = copy(deviceExtra = Some(__v))
    def getServerExtra: com.google.protobuf.any.Any = serverExtra.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearServerExtra: DataChgOrder = copy(serverExtra = None)
    def withServerExtra(__v: com.google.protobuf.any.Any): DataChgOrder = copy(serverExtra = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => plugId
        case 2 => devOrderId
        case 3 => svpOrderId.orNull
        case 4 => svpBookId.orNull
        case 5 => serviceType.map(_.javaValueDescriptor).orNull
        case 6 => pinCode.orNull
        case 7 => errorCode.orNull
        case 10 => startTime
        case 11 => startMeter
        case 12 => startType.map(_.javaValueDescriptor).orNull
        case 13 => currentTime.orNull
        case 14 => currentMeter.orNull
        case 15 => currentPower.orNull
        case 16 => stopTime.orNull
        case 17 => stopMeter.orNull
        case 18 => stopType.map(_.javaValueDescriptor).orNull
        case 20 => isCharged.orNull
        case 21 => isComfirmed.orNull
        case 22 => userInfo
        case 23 => billInfo.orNull
        case 24 => deductInfo.orNull
        case 25 => elecList.orNull
        case 30 => deviceExtra.orNull
        case 31 => serverExtra.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(plugId)
        case 2 => _root_.scalapb.descriptors.PLong(devOrderId)
        case 3 => svpOrderId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => svpBookId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => serviceType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => pinCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => errorCode.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PLong(startTime)
        case 11 => _root_.scalapb.descriptors.PInt(startMeter)
        case 12 => startType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => currentTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => currentMeter.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => currentPower.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => stopTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => stopMeter.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => stopType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => isCharged.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => isComfirmed.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => userInfo.toPMessage
        case 23 => billInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 24 => deductInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 25 => elecList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 30 => deviceExtra.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 31 => serverExtra.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgOrder
}

object DataChgOrder extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgOrder = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgOrder(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Long],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgServiceType.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
      __fieldsMap(__fields.get(7)).asInstanceOf[Long],
      __fieldsMap(__fields.get(8)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgStartType.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgStopType.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap(__fields.get(18)).asInstanceOf[com.chargerlink.gateway.bean.data.DataChgUser],
      __fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]],
      __fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction]],
      __fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList]],
      __fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]],
      __fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgOrder] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgOrder(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgServiceType.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgStartType.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgStopType.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).get.as[com.chargerlink.gateway.bean.data.DataChgUser],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 22 => __out = com.chargerlink.gateway.bean.data.DataChgUser
      case 23 => __out = com.chargerlink.gateway.bean.data.DataChgBill
      case 24 => __out = com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction
      case 25 => __out = com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList
      case 30 => __out = com.google.protobuf.any.Any
      case 31 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => com.chargerlink.gateway.bean.common.ChgServiceType
      case 12 => com.chargerlink.gateway.bean.common.ChgStartType
      case 18 => com.chargerlink.gateway.bean.common.ChgStopType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgOrder(
    plugId = 0,
    devOrderId = 0L,
    startTime = 0L,
    startMeter = 0,
    userInfo = com.chargerlink.gateway.bean.data.DataChgUser.defaultInstance
  )
  /** * 订单计费扣款的消息定义。
    *
    * @param money
    *  / (可选)扣款金额。单位：0.01元。
    * @param balance
    *  / (可选)钱包卡余额。单位：0.01元。
    * @param tac
    *  / (可选)扣款交易验证码(TAC)。
    */
  @SerialVersionUID(0L)
  final case class OrderDeduction(
      money: scala.Option[Int] = None,
      balance: scala.Option[Int] = None,
      tac: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderDeduction] with com.trueaccord.lenses.Updatable[OrderDeduction] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (money.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, money.get) }
        if (balance.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, balance.get) }
        if (tac.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, tac.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        money.foreach { __v =>
          _output__.writeInt32(1, __v)
        };
        balance.foreach { __v =>
          _output__.writeInt32(2, __v)
        };
        tac.foreach { __v =>
          _output__.writeString(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction = {
        var __money = this.money
        var __balance = this.balance
        var __tac = this.tac
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __money = Some(_input__.readInt32())
            case 16 =>
              __balance = Some(_input__.readInt32())
            case 26 =>
              __tac = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction(
            money = __money,
            balance = __balance,
            tac = __tac
        )
      }
      def getMoney: Int = money.getOrElse(0)
      def clearMoney: OrderDeduction = copy(money = None)
      def withMoney(__v: Int): OrderDeduction = copy(money = Some(__v))
      def getBalance: Int = balance.getOrElse(0)
      def clearBalance: OrderDeduction = copy(balance = None)
      def withBalance(__v: Int): OrderDeduction = copy(balance = Some(__v))
      def getTac: String = tac.getOrElse("")
      def clearTac: OrderDeduction = copy(tac = None)
      def withTac(__v: String): OrderDeduction = copy(tac = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => money.orNull
          case 2 => balance.orNull
          case 3 => tac.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => money.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => balance.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => tac.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction
  }
  
  object OrderDeduction extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction(
    )
    implicit class OrderDeductionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction](_l) {
      def money: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMoney)((c_, f_) => c_.copy(money = Some(f_)))
      def optionalMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.money)((c_, f_) => c_.copy(money = f_))
      def balance: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBalance)((c_, f_) => c_.copy(balance = Some(f_)))
      def optionalBalance: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.balance)((c_, f_) => c_.copy(balance = f_))
      def tac: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getTac)((c_, f_) => c_.copy(tac = Some(f_)))
      def optionalTac: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.tac)((c_, f_) => c_.copy(tac = f_))
    }
    final val MONEY_FIELD_NUMBER = 1
    final val BALANCE_FIELD_NUMBER = 2
    final val TAC_FIELD_NUMBER = 3
  }
  
  /** * 订单充电过程电量列表的消息定义。
    *
    * @param interval
    *  / (必填)分片时间间隔。单位：1分钟。最小时间间隔15分钟。
    * @param elecList
    *  / (可选)分片电量数据。每2个字节表示一个时间点电量。最大不超过96个数据，即数组最大为192。单位：0.01kwh。
    */
  @SerialVersionUID(0L)
  final case class OrderElecList(
      interval: Int,
      elecList: scala.Option[_root_.com.google.protobuf.ByteString] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderElecList] with com.trueaccord.lenses.Updatable[OrderElecList] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, interval)
        if (elecList.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, elecList.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, interval)
        elecList.foreach { __v =>
          _output__.writeBytes(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList = {
        var __interval = this.interval
        var __elecList = this.elecList
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __interval = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __elecList = Some(_input__.readBytes())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList(
            interval = __interval,
            elecList = __elecList
        )
      }
      def withInterval(__v: Int): OrderElecList = copy(interval = __v)
      def getElecList: _root_.com.google.protobuf.ByteString = elecList.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      def clearElecList: OrderElecList = copy(elecList = None)
      def withElecList(__v: _root_.com.google.protobuf.ByteString): OrderElecList = copy(elecList = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => interval
          case 2 => elecList.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(interval)
          case 2 => elecList.map(_root_.scalapb.descriptors.PByteString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList
  }
  
  object OrderElecList extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.com.google.protobuf.ByteString]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.com.google.protobuf.ByteString]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList(
      interval = 0
    )
    implicit class OrderElecListLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList](_l) {
      def interval: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.interval)((c_, f_) => c_.copy(interval = f_))
      def elecList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getElecList)((c_, f_) => c_.copy(elecList = Some(f_)))
      def optionalElecList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.elecList)((c_, f_) => c_.copy(elecList = f_))
    }
    final val INTERVAL_FIELD_NUMBER = 1
    final val ELEC_LIST_FIELD_NUMBER = 2
  }
  
  /** * ChargerLink公司的设备附加信息的消息定义。
    *
    * @param transparentToken
    *  // (可选)透明传输到设备的TOKEN信息。
    */
  @SerialVersionUID(0L)
  final case class OrderDeviceExtraCL1(
      transparentToken: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderDeviceExtraCL1] with com.trueaccord.lenses.Updatable[OrderDeviceExtraCL1] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (transparentToken.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, transparentToken.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        transparentToken.foreach { __v =>
          _output__.writeString(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1 = {
        var __transparentToken = this.transparentToken
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __transparentToken = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1(
            transparentToken = __transparentToken
        )
      }
      def getTransparentToken: String = transparentToken.getOrElse("")
      def clearTransparentToken: OrderDeviceExtraCL1 = copy(transparentToken = None)
      def withTransparentToken(__v: String): OrderDeviceExtraCL1 = copy(transparentToken = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => transparentToken.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => transparentToken.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1
  }
  
  object OrderDeviceExtraCL1 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1 = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1(
    )
    implicit class OrderDeviceExtraCL1Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeviceExtraCL1](_l) {
      def transparentToken: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getTransparentToken)((c_, f_) => c_.copy(transparentToken = Some(f_)))
      def optionalTransparentToken: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.transparentToken)((c_, f_) => c_.copy(transparentToken = f_))
    }
    final val TRANSPARENT_TOKEN_FIELD_NUMBER = 1
  }
  
  /** * ChargerLink公司的平台附加信息的消息定义。
    *
    * @param channelId
    *  / (可选)订单来源类型。
    * @param platformId
    *  / (可选)平台标识ID。
    * @param channelOrderId
    *  / (可选)第三⽅订单。
    */
  @SerialVersionUID(0L)
  final case class OrderServerExtraCL1(
      channelId: scala.Option[Int] = None,
      platformId: scala.Option[String] = None,
      channelOrderId: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderServerExtraCL1] with com.trueaccord.lenses.Updatable[OrderServerExtraCL1] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (channelId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, channelId.get) }
        if (platformId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, platformId.get) }
        if (channelOrderId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, channelOrderId.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        channelId.foreach { __v =>
          _output__.writeInt32(1, __v)
        };
        platformId.foreach { __v =>
          _output__.writeString(2, __v)
        };
        channelOrderId.foreach { __v =>
          _output__.writeString(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1 = {
        var __channelId = this.channelId
        var __platformId = this.platformId
        var __channelOrderId = this.channelOrderId
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __channelId = Some(_input__.readInt32())
            case 18 =>
              __platformId = Some(_input__.readString())
            case 26 =>
              __channelOrderId = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1(
            channelId = __channelId,
            platformId = __platformId,
            channelOrderId = __channelOrderId
        )
      }
      def getChannelId: Int = channelId.getOrElse(0)
      def clearChannelId: OrderServerExtraCL1 = copy(channelId = None)
      def withChannelId(__v: Int): OrderServerExtraCL1 = copy(channelId = Some(__v))
      def getPlatformId: String = platformId.getOrElse("")
      def clearPlatformId: OrderServerExtraCL1 = copy(platformId = None)
      def withPlatformId(__v: String): OrderServerExtraCL1 = copy(platformId = Some(__v))
      def getChannelOrderId: String = channelOrderId.getOrElse("")
      def clearChannelOrderId: OrderServerExtraCL1 = copy(channelOrderId = None)
      def withChannelOrderId(__v: String): OrderServerExtraCL1 = copy(channelOrderId = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => channelId.orNull
          case 2 => platformId.orNull
          case 3 => channelOrderId.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => channelId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => platformId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => channelOrderId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1
  }
  
  object OrderServerExtraCL1 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1 = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgOrder.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1(
    )
    implicit class OrderServerExtraCL1Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderServerExtraCL1](_l) {
      def channelId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChannelId)((c_, f_) => c_.copy(channelId = Some(f_)))
      def optionalChannelId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.channelId)((c_, f_) => c_.copy(channelId = f_))
      def platformId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPlatformId)((c_, f_) => c_.copy(platformId = Some(f_)))
      def optionalPlatformId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.platformId)((c_, f_) => c_.copy(platformId = f_))
      def channelOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getChannelOrderId)((c_, f_) => c_.copy(channelOrderId = Some(f_)))
      def optionalChannelOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.channelOrderId)((c_, f_) => c_.copy(channelOrderId = f_))
    }
    final val CHANNEL_ID_FIELD_NUMBER = 1
    final val PLATFORM_ID_FIELD_NUMBER = 2
    final val CHANNEL_ORDER_ID_FIELD_NUMBER = 3
  }
  
  implicit class DataChgOrderLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder](_l) {
    def plugId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.plugId)((c_, f_) => c_.copy(plugId = f_))
    def devOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.devOrderId)((c_, f_) => c_.copy(devOrderId = f_))
    def svpOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSvpOrderId)((c_, f_) => c_.copy(svpOrderId = Some(f_)))
    def optionalSvpOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.svpOrderId)((c_, f_) => c_.copy(svpOrderId = f_))
    def svpBookId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSvpBookId)((c_, f_) => c_.copy(svpBookId = Some(f_)))
    def optionalSvpBookId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.svpBookId)((c_, f_) => c_.copy(svpBookId = f_))
    def serviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgServiceType] = field(_.getServiceType)((c_, f_) => c_.copy(serviceType = Some(f_)))
    def optionalServiceType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgServiceType]] = field(_.serviceType)((c_, f_) => c_.copy(serviceType = f_))
    def pinCode: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPinCode)((c_, f_) => c_.copy(pinCode = Some(f_)))
    def optionalPinCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.pinCode)((c_, f_) => c_.copy(pinCode = f_))
    def errorCode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getErrorCode)((c_, f_) => c_.copy(errorCode = Some(f_)))
    def optionalErrorCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.errorCode)((c_, f_) => c_.copy(errorCode = f_))
    def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def startMeter: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.startMeter)((c_, f_) => c_.copy(startMeter = f_))
    def startType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgStartType] = field(_.getStartType)((c_, f_) => c_.copy(startType = Some(f_)))
    def optionalStartType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgStartType]] = field(_.startType)((c_, f_) => c_.copy(startType = f_))
    def currentTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getCurrentTime)((c_, f_) => c_.copy(currentTime = Some(f_)))
    def optionalCurrentTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.currentTime)((c_, f_) => c_.copy(currentTime = f_))
    def currentMeter: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCurrentMeter)((c_, f_) => c_.copy(currentMeter = Some(f_)))
    def optionalCurrentMeter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.currentMeter)((c_, f_) => c_.copy(currentMeter = f_))
    def currentPower: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCurrentPower)((c_, f_) => c_.copy(currentPower = Some(f_)))
    def optionalCurrentPower: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.currentPower)((c_, f_) => c_.copy(currentPower = f_))
    def stopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStopTime)((c_, f_) => c_.copy(stopTime = Some(f_)))
    def optionalStopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stopTime)((c_, f_) => c_.copy(stopTime = f_))
    def stopMeter: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getStopMeter)((c_, f_) => c_.copy(stopMeter = Some(f_)))
    def optionalStopMeter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.stopMeter)((c_, f_) => c_.copy(stopMeter = f_))
    def stopType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgStopType] = field(_.getStopType)((c_, f_) => c_.copy(stopType = Some(f_)))
    def optionalStopType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgStopType]] = field(_.stopType)((c_, f_) => c_.copy(stopType = f_))
    def isCharged: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getIsCharged)((c_, f_) => c_.copy(isCharged = Some(f_)))
    def optionalIsCharged: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.isCharged)((c_, f_) => c_.copy(isCharged = f_))
    def isComfirmed: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getIsComfirmed)((c_, f_) => c_.copy(isComfirmed = Some(f_)))
    def optionalIsComfirmed: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.isComfirmed)((c_, f_) => c_.copy(isComfirmed = f_))
    def userInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgUser] = field(_.userInfo)((c_, f_) => c_.copy(userInfo = f_))
    def billInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill] = field(_.getBillInfo)((c_, f_) => c_.copy(billInfo = Some(f_)))
    def optionalBillInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]] = field(_.billInfo)((c_, f_) => c_.copy(billInfo = f_))
    def deductInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction] = field(_.getDeductInfo)((c_, f_) => c_.copy(deductInfo = Some(f_)))
    def optionalDeductInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderDeduction]] = field(_.deductInfo)((c_, f_) => c_.copy(deductInfo = f_))
    def elecList: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList] = field(_.getElecList)((c_, f_) => c_.copy(elecList = Some(f_)))
    def optionalElecList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder.OrderElecList]] = field(_.elecList)((c_, f_) => c_.copy(elecList = f_))
    def deviceExtra: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getDeviceExtra)((c_, f_) => c_.copy(deviceExtra = Some(f_)))
    def optionalDeviceExtra: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.deviceExtra)((c_, f_) => c_.copy(deviceExtra = f_))
    def serverExtra: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getServerExtra)((c_, f_) => c_.copy(serverExtra = Some(f_)))
    def optionalServerExtra: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.serverExtra)((c_, f_) => c_.copy(serverExtra = f_))
  }
  final val PLUG_ID_FIELD_NUMBER = 1
  final val DEV_ORDER_ID_FIELD_NUMBER = 2
  final val SVP_ORDER_ID_FIELD_NUMBER = 3
  final val SVP_BOOK_ID_FIELD_NUMBER = 4
  final val SERVICE_TYPE_FIELD_NUMBER = 5
  final val PIN_CODE_FIELD_NUMBER = 6
  final val ERROR_CODE_FIELD_NUMBER = 7
  final val START_TIME_FIELD_NUMBER = 10
  final val START_METER_FIELD_NUMBER = 11
  final val START_TYPE_FIELD_NUMBER = 12
  final val CURRENT_TIME_FIELD_NUMBER = 13
  final val CURRENT_METER_FIELD_NUMBER = 14
  final val CURRENT_POWER_FIELD_NUMBER = 15
  final val STOP_TIME_FIELD_NUMBER = 16
  final val STOP_METER_FIELD_NUMBER = 17
  final val STOP_TYPE_FIELD_NUMBER = 18
  final val IS_CHARGED_FIELD_NUMBER = 20
  final val IS_COMFIRMED_FIELD_NUMBER = 21
  final val USER_INFO_FIELD_NUMBER = 22
  final val BILL_INFO_FIELD_NUMBER = 23
  final val DEDUCT_INFO_FIELD_NUMBER = 24
  final val ELEC_LIST_FIELD_NUMBER = 25
  final val DEVICE_EXTRA_FIELD_NUMBER = 30
  final val SERVER_EXTRA_FIELD_NUMBER = 31
}
