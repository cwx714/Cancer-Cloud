// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 充电桩TCU设备实时状态数据的消息定义。
  *
  * @param evseData
  *  / (必填)充电桩状态数据。
  * @param plugList
  *  / (可选)充电枪状态数据列表。格式为：充电枪ID-&gt;充电枪状态数据。
  * @param orderList
  *  / (可选)当前充电订单数据列表。格式为：充电枪ID-&gt;当前充电订单数据。
  * @param chargeList
  *  / (可选)当前充电车辆数据列表。格式为：充电枪ID-&gt;当前充电车辆数据。
  * @param extendData
  *  / (可选)充电桩扩展数据的数组。
  */
@SerialVersionUID(0L)
final case class DataCharger(
    evseData: com.chargerlink.gateway.bean.data.DataChgEvse,
    plugList: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPlug] = scala.collection.immutable.Map.empty,
    orderList: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgOrder] = scala.collection.immutable.Map.empty,
    chargeList: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgCharge] = scala.collection.immutable.Map.empty,
    extendData: scala.Option[com.google.protobuf.any.Any] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataCharger] with com.trueaccord.lenses.Updatable[DataCharger] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(evseData.serializedSize) + evseData.serializedSize
      plugList.foreach(plugList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase(plugList).serializedSize) + com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase(plugList).serializedSize)
      orderList.foreach(orderList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase(orderList).serializedSize) + com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase(orderList).serializedSize)
      chargeList.foreach(chargeList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase(chargeList).serializedSize) + com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase(chargeList).serializedSize)
      if (extendData.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(extendData.get.serializedSize) + extendData.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(evseData.serializedSize)
      evseData.writeTo(_output__)
      plugList.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase(__v).writeTo(_output__)
      };
      orderList.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase(__v).writeTo(_output__)
      };
      chargeList.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase(__v).writeTo(_output__)
      };
      extendData.foreach { __v =>
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataCharger = {
      var __evseData = this.evseData
      val __plugList = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.bean.data.DataChgPlug] ++= this.plugList)
      val __orderList = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.bean.data.DataChgOrder] ++= this.orderList)
      val __chargeList = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.bean.data.DataChgCharge] ++= this.chargeList)
      var __extendData = this.extendData
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __evseData = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __evseData)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __plugList += com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry.defaultInstance))
          case 82 =>
            __orderList += com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry.defaultInstance))
          case 90 =>
            __chargeList += com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry.defaultInstance))
          case 802 =>
            __extendData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataCharger(
          evseData = __evseData,
          plugList = __plugList.result(),
          orderList = __orderList.result(),
          chargeList = __chargeList.result(),
          extendData = __extendData
      )
    }
    def withEvseData(__v: com.chargerlink.gateway.bean.data.DataChgEvse): DataCharger = copy(evseData = __v)
    def clearPlugList = copy(plugList = scala.collection.immutable.Map.empty)
    def addPlugList(__vs: (Int, com.chargerlink.gateway.bean.data.DataChgPlug)*): DataCharger = addAllPlugList(__vs)
    def addAllPlugList(__vs: TraversableOnce[(Int, com.chargerlink.gateway.bean.data.DataChgPlug)]): DataCharger = copy(plugList = plugList ++ __vs)
    def withPlugList(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPlug]): DataCharger = copy(plugList = __v)
    def clearOrderList = copy(orderList = scala.collection.immutable.Map.empty)
    def addOrderList(__vs: (Int, com.chargerlink.gateway.bean.data.DataChgOrder)*): DataCharger = addAllOrderList(__vs)
    def addAllOrderList(__vs: TraversableOnce[(Int, com.chargerlink.gateway.bean.data.DataChgOrder)]): DataCharger = copy(orderList = orderList ++ __vs)
    def withOrderList(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgOrder]): DataCharger = copy(orderList = __v)
    def clearChargeList = copy(chargeList = scala.collection.immutable.Map.empty)
    def addChargeList(__vs: (Int, com.chargerlink.gateway.bean.data.DataChgCharge)*): DataCharger = addAllChargeList(__vs)
    def addAllChargeList(__vs: TraversableOnce[(Int, com.chargerlink.gateway.bean.data.DataChgCharge)]): DataCharger = copy(chargeList = chargeList ++ __vs)
    def withChargeList(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgCharge]): DataCharger = copy(chargeList = __v)
    def getExtendData: com.google.protobuf.any.Any = extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearExtendData: DataCharger = copy(extendData = None)
    def withExtendData(__v: com.google.protobuf.any.Any): DataCharger = copy(extendData = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => evseData
        case 2 => plugList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase)(_root_.scala.collection.breakOut)
        case 10 => orderList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase)(_root_.scala.collection.breakOut)
        case 11 => chargeList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase)(_root_.scala.collection.breakOut)
        case 100 => extendData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => evseData.toPMessage
        case 2 => _root_.scalapb.descriptors.PRepeated(plugList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PRepeated(orderList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 11 => _root_.scalapb.descriptors.PRepeated(chargeList.map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 100 => extendData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataCharger
}

object DataCharger extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataCharger = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataCharger(
      __fieldsMap(__fields.get(0)).asInstanceOf[com.chargerlink.gateway.bean.data.DataChgEvse],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry]].map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry]].map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry]].map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataCharger] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataCharger(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[com.chargerlink.gateway.bean.data.DataChgEvse],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_plugList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_orderList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataCharger._typemapper_chargeList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgEvse
      case 2 => __out = com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry
      case 10 => __out = com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry
      case 11 => __out = com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry
      case 100 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataCharger(
    evseData = com.chargerlink.gateway.bean.data.DataChgEvse.defaultInstance
  )
  @SerialVersionUID(0L)
  final case class PlugListEntry(
      key: scala.Option[Int] = None,
      value: scala.Option[com.chargerlink.gateway.bean.data.DataChgPlug] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PlugListEntry] with com.trueaccord.lenses.Updatable[PlugListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key.get) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readUInt32())
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPlug.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Int = key.getOrElse(0)
      def clearKey: PlugListEntry = copy(key = None)
      def withKey(__v: Int): PlugListEntry = copy(key = Some(__v))
      def getValue: com.chargerlink.gateway.bean.data.DataChgPlug = value.getOrElse(com.chargerlink.gateway.bean.data.DataChgPlug.defaultInstance)
      def clearValue: PlugListEntry = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.bean.data.DataChgPlug): PlugListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry
  }
  
  object PlugListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgPlug]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgPlug]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.bean.data.DataChgPlug
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry(
    )
    implicit class PlugListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPlug] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgPlug]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPlug)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPlug)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry(Some(__p._1), Some(__p._2)))
  }
  
  @SerialVersionUID(0L)
  final case class OrderListEntry(
      key: scala.Option[Int] = None,
      value: scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[OrderListEntry] with com.trueaccord.lenses.Updatable[OrderListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key.get) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readUInt32())
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Int = key.getOrElse(0)
      def clearKey: OrderListEntry = copy(key = None)
      def withKey(__v: Int): OrderListEntry = copy(key = Some(__v))
      def getValue: com.chargerlink.gateway.bean.data.DataChgOrder = value.getOrElse(com.chargerlink.gateway.bean.data.DataChgOrder.defaultInstance)
      def clearValue: OrderListEntry = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.bean.data.DataChgOrder): OrderListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry
  }
  
  object OrderListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.bean.data.DataChgOrder
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry(
    )
    implicit class OrderListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgOrder] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgOrder]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgOrder)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgOrder)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry(Some(__p._1), Some(__p._2)))
  }
  
  @SerialVersionUID(0L)
  final case class ChargeListEntry(
      key: scala.Option[Int] = None,
      value: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChargeListEntry] with com.trueaccord.lenses.Updatable[ChargeListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key.get) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readUInt32())
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Int = key.getOrElse(0)
      def clearKey: ChargeListEntry = copy(key = None)
      def withKey(__v: Int): ChargeListEntry = copy(key = Some(__v))
      def getValue: com.chargerlink.gateway.bean.data.DataChgCharge = value.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.defaultInstance)
      def clearValue: ChargeListEntry = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.bean.data.DataChgCharge): ChargeListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry
  }
  
  object ChargeListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataCharger.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.bean.data.DataChgCharge
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry(
    )
    implicit class ChargeListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgCharge)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgCharge)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry(Some(__p._1), Some(__p._2)))
  }
  
  implicit class DataChargerLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataCharger](_l) {
    def evseData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgEvse] = field(_.evseData)((c_, f_) => c_.copy(evseData = f_))
    def plugList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgPlug]] = field(_.plugList)((c_, f_) => c_.copy(plugList = f_))
    def orderList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgOrder]] = field(_.orderList)((c_, f_) => c_.copy(orderList = f_))
    def chargeList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.bean.data.DataChgCharge]] = field(_.chargeList)((c_, f_) => c_.copy(chargeList = f_))
    def extendData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getExtendData)((c_, f_) => c_.copy(extendData = Some(f_)))
    def optionalExtendData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.extendData)((c_, f_) => c_.copy(extendData = f_))
  }
  final val EVSE_DATA_FIELD_NUMBER = 1
  final val PLUG_LIST_FIELD_NUMBER = 2
  final val ORDER_LIST_FIELD_NUMBER = 10
  final val CHARGE_LIST_FIELD_NUMBER = 11
  final val EXTEND_DATA_FIELD_NUMBER = 100
  @transient
  private val _typemapper_plugList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPlug)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.PlugListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgPlug)]]
  @transient
  private val _typemapper_orderList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgOrder)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.OrderListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgOrder)]]
  @transient
  private val _typemapper_chargeList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgCharge)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataCharger.ChargeListEntry, (Int, com.chargerlink.gateway.bean.data.DataChgCharge)]]
}
