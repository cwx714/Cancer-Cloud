// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 终端设备上传媒体信息的消息定义。目前只支持行车记录仪设备。
  *
  * @param deviceType
  *  / (必填)终端设备类型。
  * @param deviceId
  *  / (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
  * @param dataTime
  *  / (必填)数据采集的时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param sessionId
  *  / (必填)上传的唯一标识。如果上传类型为行程结束图片，则必须与行程的track_id相同。
  * @param uploadType
  *  / (必填)上传类型。
  * @param fileUrl
  *  / (必填)上传文件的下载地址。
  * @param fileSize
  *  / (必填)上传文件长度。
  * @param mimeType
  *  / (必填)上传文件类型。
  * @param dataInfo
  *  / (可选)上传时设备实时数据信息。
  */
@SerialVersionUID(0L)
final case class MediaInfo(
    deviceType: com.chargerlink.gateway.bean.common.DeviceType,
    deviceId: String,
    dataTime: Long,
    sessionId: Long,
    uploadType: com.chargerlink.gateway.bean.common.UploadType,
    fileUrl: String,
    fileSize: Long,
    mimeType: String,
    dataInfo: scala.Option[com.chargerlink.gateway.bean.data.DataInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MediaInfo] with com.trueaccord.lenses.Updatable[MediaInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, deviceType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, deviceId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, dataTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, sessionId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, uploadType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, fileUrl)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, fileSize)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, mimeType)
      if (dataInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dataInfo.get.serializedSize) + dataInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, deviceType.value)
      _output__.writeString(2, deviceId)
      _output__.writeInt64(3, dataTime)
      _output__.writeInt64(4, sessionId)
      _output__.writeEnum(5, uploadType.value)
      _output__.writeString(6, fileUrl)
      _output__.writeInt64(7, fileSize)
      _output__.writeString(8, mimeType)
      dataInfo.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.MediaInfo = {
      var __deviceType = this.deviceType
      var __deviceId = this.deviceId
      var __dataTime = this.dataTime
      var __sessionId = this.sessionId
      var __uploadType = this.uploadType
      var __fileUrl = this.fileUrl
      var __fileSize = this.fileSize
      var __mimeType = this.mimeType
      var __dataInfo = this.dataInfo
      var __requiredFields0: Long = 0xffL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __deviceId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __dataTime = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __sessionId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __uploadType = com.chargerlink.gateway.bean.common.UploadType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xffffffffffffffefL
          case 50 =>
            __fileUrl = _input__.readString()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 56 =>
            __fileSize = _input__.readInt64()
            __requiredFields0 &= 0xffffffffffffffbfL
          case 66 =>
            __mimeType = _input__.readString()
            __requiredFields0 &= 0xffffffffffffff7fL
          case 74 =>
            __dataInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __dataInfo.getOrElse(com.chargerlink.gateway.bean.data.DataInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.MediaInfo(
          deviceType = __deviceType,
          deviceId = __deviceId,
          dataTime = __dataTime,
          sessionId = __sessionId,
          uploadType = __uploadType,
          fileUrl = __fileUrl,
          fileSize = __fileSize,
          mimeType = __mimeType,
          dataInfo = __dataInfo
      )
    }
    def withDeviceType(__v: com.chargerlink.gateway.bean.common.DeviceType): MediaInfo = copy(deviceType = __v)
    def withDeviceId(__v: String): MediaInfo = copy(deviceId = __v)
    def withDataTime(__v: Long): MediaInfo = copy(dataTime = __v)
    def withSessionId(__v: Long): MediaInfo = copy(sessionId = __v)
    def withUploadType(__v: com.chargerlink.gateway.bean.common.UploadType): MediaInfo = copy(uploadType = __v)
    def withFileUrl(__v: String): MediaInfo = copy(fileUrl = __v)
    def withFileSize(__v: Long): MediaInfo = copy(fileSize = __v)
    def withMimeType(__v: String): MediaInfo = copy(mimeType = __v)
    def getDataInfo: com.chargerlink.gateway.bean.data.DataInfo = dataInfo.getOrElse(com.chargerlink.gateway.bean.data.DataInfo.defaultInstance)
    def clearDataInfo: MediaInfo = copy(dataInfo = None)
    def withDataInfo(__v: com.chargerlink.gateway.bean.data.DataInfo): MediaInfo = copy(dataInfo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.javaValueDescriptor
        case 2 => deviceId
        case 3 => dataTime
        case 4 => sessionId
        case 5 => uploadType.javaValueDescriptor
        case 6 => fileUrl
        case 7 => fileSize
        case 8 => mimeType
        case 9 => dataInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(deviceType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(deviceId)
        case 3 => _root_.scalapb.descriptors.PLong(dataTime)
        case 4 => _root_.scalapb.descriptors.PLong(sessionId)
        case 5 => _root_.scalapb.descriptors.PEnum(uploadType.scalaValueDescriptor)
        case 6 => _root_.scalapb.descriptors.PString(fileUrl)
        case 7 => _root_.scalapb.descriptors.PLong(fileSize)
        case 8 => _root_.scalapb.descriptors.PString(mimeType)
        case 9 => dataInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.MediaInfo
}

object MediaInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.MediaInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.MediaInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.MediaInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.MediaInfo(
      com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap(__fields.get(2)).asInstanceOf[Long],
      __fieldsMap(__fields.get(3)).asInstanceOf[Long],
      com.chargerlink.gateway.bean.common.UploadType.fromValue(__fieldsMap(__fields.get(4)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(5)).asInstanceOf[String],
      __fieldsMap(__fields.get(6)).asInstanceOf[Long],
      __fieldsMap(__fields.get(7)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.MediaInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.MediaInfo(
        com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[Long],
        com.chargerlink.gateway.bean.common.UploadType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataBaseProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataBaseProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 9 => __out = com.chargerlink.gateway.bean.data.DataInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.DeviceType
      case 5 => com.chargerlink.gateway.bean.common.UploadType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.MediaInfo(
    deviceType = com.chargerlink.gateway.bean.common.DeviceType.DEVICE_VEHICLE_GB_V1,
    deviceId = "",
    dataTime = 0L,
    sessionId = 0L,
    uploadType = com.chargerlink.gateway.bean.common.UploadType.UPLOAD_TRACK,
    fileUrl = "",
    fileSize = 0L,
    mimeType = ""
  )
  implicit class MediaInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.MediaInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.MediaInfo](_l) {
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.DeviceType] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def dataTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.dataTime)((c_, f_) => c_.copy(dataTime = f_))
    def sessionId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.sessionId)((c_, f_) => c_.copy(sessionId = f_))
    def uploadType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.UploadType] = field(_.uploadType)((c_, f_) => c_.copy(uploadType = f_))
    def fileUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.fileUrl)((c_, f_) => c_.copy(fileUrl = f_))
    def fileSize: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.fileSize)((c_, f_) => c_.copy(fileSize = f_))
    def mimeType: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.mimeType)((c_, f_) => c_.copy(mimeType = f_))
    def dataInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataInfo] = field(_.getDataInfo)((c_, f_) => c_.copy(dataInfo = Some(f_)))
    def optionalDataInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataInfo]] = field(_.dataInfo)((c_, f_) => c_.copy(dataInfo = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val DATA_TIME_FIELD_NUMBER = 3
  final val SESSION_ID_FIELD_NUMBER = 4
  final val UPLOAD_TYPE_FIELD_NUMBER = 5
  final val FILE_URL_FIELD_NUMBER = 6
  final val FILE_SIZE_FIELD_NUMBER = 7
  final val MIME_TYPE_FIELD_NUMBER = 8
  final val DATA_INFO_FIELD_NUMBER = 9
}
