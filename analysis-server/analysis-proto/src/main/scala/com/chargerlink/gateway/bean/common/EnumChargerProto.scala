// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.common



object EnumChargerProto {
  private lazy val ProtoBytes: Array[Byte] =
      com.trueaccord.scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChZiZWFuL0VudW1DaGFyZ2VyLnByb3RvEhNDaGFyZ2VyTGluay5HYXRld2F5KvwBCgtDaGdDb21wVHlwZRIRCg1DSEdfQ09NU
  F9OT05FEAASEAoMQ0hHX0NPTVBfU1lTEAESEAoMQ0hHX0NPTVBfVENVEAISEAoMQ0hHX0NPTVBfQ0NNEAMSEAoMQ0hHX0NPTVBfQ
  k1TEAQSEAoMQ0hHX0NPTVBfUEtMEAUSEAoMQ0hHX0NPTVBfUEtEEAYSEgoOQ0hHX0NPTVBfTUVURVIQBxIQCgxDSEdfQ09NUF9MQ
  0QQCBIRCg1DSEdfQ09NUF9DQVJEEAkSEAoMQ0hHX0NPTVBfRkFOEAoSEQoNQ0hHX0NPTVBfQ09OThALEhAKDENIR19DT01QX1BTT
  RAMKpUBCgtDaGdQbHVnVHlwZRIUChBDSEdfUExVR19VTktOT1dOEAASFgoSQ0hHX1BMVUdfQUNfU09DS0VUEAESEwoPQ0hHX1BMV
  UdfQUNfR1VOEAISEwoPQ0hHX1BMVUdfRENfR1VOEAMSFQoRQ0hHX1BMVUdfVFJJQU5HTEUQBBIXChNDSEdfUExVR19ESVNDSEFSR
  0VSEGQq3gEKDUNoZ0V2c2VTdGF0dXMSGwoXQ0hHX0VWU0VfU1RBVFVTX1dPUktJTkcQABIbChdDSEdfRVZTRV9TVEFUVVNfQk9PV
  ElORxAKEhsKF0NIR19FVlNFX1NUQVRVU19PRkZMSU5FEGQSHAoYQ0hHX0VWU0VfU1RBVFVTX01BSU5UQUlOEGUSHAoYQ0hHX0VWU
  0VfU1RBVFVTX0RJU0FCTEVEEGYSGwoXQ0hHX0VWU0VfU1RBVFVTX0ZBSUxVUkUQbhIdChhDSEdfRVZTRV9TVEFUVVNfUE9XRVJPR
  kYQyAEqrwMKDUNoZ1BsdWdTdGF0dXMSGAoUQ0hHX1BMVUdfU1RBVFVTX0lETEUQABIcChhDSEdfUExVR19TVEFUVVNfUkVTRVJWR
  UQQChIdChlDSEdfUExVR19TVEFUVVNfUFJFUEFSSU5HEAsSHQoZQ0hHX1BMVUdfU1RBVFVTX1dBSVRfRVZTRRAMEhwKGENIR19QT
  FVHX1NUQVRVU19XQUlUX0NBUhANEhwKGENIR19QTFVHX1NUQVRVU19DSEFSR0lORxAUEh8KG0NIR19QTFVHX1NUQVRVU19ESVNDS
  EFSR0lORxAVEhoKFkNIR19QTFVHX1NUQVRVU19QQVVTRUQQFhIcChhDSEdfUExVR19TVEFUVVNfU1RPUFBJTkcQHhIbChdDSEdfU
  ExVR19TVEFUVVNfU1RPUFBFRBAfEhsKF0NIR19QTFVHX1NUQVRVU19PRkZMSU5FEGQSHAoYQ0hHX1BMVUdfU1RBVFVTX01BSU5UQ
  UlOEGUSHAoYQ0hHX1BMVUdfU1RBVFVTX0RJU0FCTEVEEGYSGwoXQ0hHX1BMVUdfU1RBVFVTX0ZBSUxVUkUQbirFAQoOQ2hnU2Vyd
  mljZVR5cGUSGwoXQ0hHX1NFUlZJQ0VfQ0hBUkdFX0FVVE8QABIbChdDSEdfU0VSVklDRV9DSEFSR0VfRUxFQxABEhsKF0NIR19TR
  VJWSUNFX0NIQVJHRV9USU1FEAISHAoYQ0hHX1NFUlZJQ0VfQ0hBUkdFX01PTkVZEAMSHgoaQ0hHX1NFUlZJQ0VfRElTQ0hBUkdFX
  0VMRUMQBBIeChpDSEdfU0VSVklDRV9ESVNDSEFSR0VfQVVUTxAFKuICCgxDaGdTdGFydFR5cGUSGAoUQ0hHX1NUQVJUX0xPQ0FMX
  1BMVUcQARIZChVDSEdfU1RBUlRfTE9DQUxfQURNSU4QAhIYChRDSEdfU1RBUlRfTE9DQUxfQ0FSRBADEhkKFUNIR19TVEFSVF9PT
  kxJTkVfQ0FSRBAEEhoKFkNIR19TVEFSVF9MT0NBTF9XQUxMRVQQBRIXChNDSEdfU1RBUlRfTE9DQUxfUExDEAYSGAoUQ0hHX1NUQ
  VJUX09OTElORV9QTEMQBxIXChNDSEdfU1RBUlRfTE9DQUxfVklOEAgSGAoUQ0hHX1NUQVJUX09OTElORV9WSU4QCRIWChJDSEdfU
  1RBUlRfTE9DQUxfQlQQChIXChNDSEdfU1RBUlRfTE9BQ0xfUElOEAsSGgoWQ0hHX1NUQVJUX1JFTU9URV9BRE1JThAMEhkKFUNIR
  19TVEFSVF9SRU1PVEVfVVNFUhANKucCCgtDaGdTdG9wVHlwZRITCg9DSEdfU1RPUF9OT1JNQUwQABIXChNDSEdfU1RPUF9MT0NBT
  F9DQVJEEAESFgoSQ0hHX1NUT1BfTE9DQUxfUElOEAISGAoUQ0hHX1NUT1BfUkVNT1RFX1VTRVIQAxIZChVDSEdfU1RPUF9SRU1PV
  EVfQURNSU4QBBIbChdDSEdfU1RPUF9FTUVSR0VOQ1lfU1RPUBAFEhoKFkNIR19TVE9QX0VWX0RJU0NPTk5FQ1QQBhITCg9DSEdfU
  1RPUF9SRUJPT1QQBxIUChBDSEdfU1RPUF9PRkZMSU5FEAgSFwoTQ0hHX1NUT1BfUE9XRVJfTE9TUxAJEhkKFUNIR19TVE9QX1NZU
  1RFTV9GQVVMVBAKEhYKEkNIR19TVE9QX0JNU19GQVVMVBALEhgKFENIR19TVE9QX0xPV19CQUxBTkNFEAwSEwoOQ0hHX1NUT1BfT
  1RIRVIQ/wEqogIKC0NoZ1VzZXJUeXBlEhgKFENIR19VU0VSX0NIQVJHRV9DQVJEEAESFgoSQ0hHX1VTRVJfQkFOS19DQVJEEAISG
  QoVQ0hHX1VTRVJfUEhPTkVfTlVNQkVSEAMSEAoMQ0hHX1VTRVJfQVBQEAQSEwoPQ0hHX1VTRVJfV0VDSEFUEAUSFgoSQ0hHX1VTR
  VJfQkxVRVRPT1RIEAYSEQoNQ0hHX1VTRVJfUExVRxAHEhoKFUNIR19VU0VSX1NIQU5HSEFJX0JVUxCQThIcChdDSEdfVVNFUl9GR
  U5YSV9DUFVfQ0FSRBCRThIaChVDSEdfVVNFUl9XQUxMRVRfRklSU1QQkE4SGgoUQ0hHX1VTRVJfV0FMTEVUX0xBU1QQn5wBGgIQA
  SqzAQoNQ2hnQXV0aFN0YXR1cxIQCgxBVVRIX1NVQ0NFU1MQABIWChJBVVRIX0VSUk9SX1JFRlVTRUQQARIWChJBVVRIX0VSUk9SX
  0VYUElSRUQQAhIWChJBVVRIX0VSUk9SX0lOVkFMSUQQAxIXChNBVVRIX0VSUk9SX0NPTkZMSUNUEAQSFgoSQVVUSF9FUlJPUl9CQ
  UxBTkNFEAUSFwoTQVVUSF9FUlJPUl9QQVNTV09SRBAGKoEBCg1DaGdBbGFybUxldmVsEhwKGENIR19BTEFSTV9MRVZFTF9DUklUS
  UNBTBAAEhkKFUNIR19BTEFSTV9MRVZFTF9BTEVSVBABEhsKF0NIR19BTEFSTV9MRVZFTF9XQVJOSU5HEAISGgoWQ0hHX0FMQVJNX
  0xFVkVMX05PVElDRRADKsoXCgxDaGdBbGFybUNvZGUSHgoaQ0hHX0FMQVJNX1NZU19TVE9SQUdFX0ZVTEwQZBIcChhDSEdfQUxBU
  k1fU1lTX0NPTU1fRkFVTFQQZRIbChdDSEdfQUxBUk1fU1lTX1NJTV9GQVVMVBBmEhwKGENIR19BTEFSTV9TWVNfRElBTF9GQVVMV
  BBnEh8KG0NIR19BTEFSTV9TWVNfQ09OTkVDVF9GQVVMVBBoEh4KGkNIR19BTEFSTV9TWVNfQ09OTkVDVF9MT1NUEGkSHQoZQ0hHX
  0FMQVJNX1NZU19QT1dFUl9GQVVMVBBqEhkKFUNIR19BTEFSTV9NRVRFUl9GQVVMVBBrEhgKFENIR19BTEFSTV9DQVJEX0ZBVUxUE
  GwSFwoTQ0hHX0FMQVJNX0xDRF9GQVVMVBBtEh4KGkNIR19BbGFybV9UQ1VfU09DS0VUX0ZBVUxUEG4SIAocQ0hHX0FMQVJNX1RDV
  V9DUFVfSElHSF9GQVVMVBBvEh8KG0NIR19BTEFSTV9UQ1VfTUVNX0xPV19GQVVMVBBwEiIKHUNIR19BTEFSTV9DQ01fRU1FUkdFT
  kNZX0ZBVUxUEKwCEh0KGENIR19BTEFSTV9DQ01fTE9DS19GQVVMVBCtAhIgChtDSEdfQUxBUk1fQ0NNX0JSRUFLRVJfRkFVTFQQr
  gISHAoXQ0hHX0FMQVJNX0NDTV9TUERfRkFVTFQQrwISHQoYQ0hHX0FMQVJNX0NDTV9TTU9HX0ZBVUxUELACEh0KGENIR19BTEFST
  V9DQ01fRE9PUl9GQVVMVBCxAhIeChlDSEdfQUxBUk1fQ0NNX1dBVEVSX0ZBVUxUELICEiUKIENIR19BTEFSTV9DQ01fRENfQ09OV
  EFDVE9SX0ZBVUxUELMCEiAKG0NIR19BTEFSTV9DQ01fRENfRlVTRV9GQVVMVBC0AhIkCh9DSEdfQUxBUk1fQ0NNX0lOU1VMQVRJT
  05fTU9EVUxFELUCEiMKHkNIR19BTEFSTV9DQ01fSU5TVUxBVElPTl9DSEVDSxC2AhIcChdDSEdfQUxBUk1fQ0NNX0ZBTl9GQVVMV
  BC3AhIcChdDSEdfQUxBUk1fQ0NNX0NDMV9GQVVMVBC4AhIhChxDSEdfQUxBUk1fQ0NNX09WRVJfVEVNUF9XQVJOELkCEicKIkNIR
  19BTEFSTV9DQ01fUExVR19PVkVSX1RFTVBfRkFVTFQQugISIwoeQ0hHX0FMQVJNX0NDTV9HVU5fSE9MREVSX0ZBVUxUELsCEiIKH
  UNIR19BTEFSTV9DQ01fSU5QVVRfVU5ERVJfVk9MELwCEiEKHENIR19BTEFSTV9DQ01fSU5QVVRfT1ZFUl9WT0wQvQISHwoaQ0hHX
  0FMQVJNX0NDTV9BU1NJU1RfRkFVTFQQvgISIAobQ0hHX0FMQVJNX0NDTV9CTEVFRF9USU1FT1VUEL8CEh8KGkNIR19BTEFSTV9DQ
  01fU1dJVENIX0ZBVUxUEMACEiIKHUNIR19BTEFSTV9DQ01fT1VQVVRfVU5ERVJfVk9MEMECEiIKHUNIR19BTEFSTV9DQ01fT1VUU
  FVUX09WRVJfVk9MEMICEiIKHUNIR19BTEFSTV9DQ01fT1VUUFVUX09WRVJfQ1VSEMMCEiIKHUNIR19BTEFSTV9DQ01fSU5TVUxBV
  ElPTl9XQVJOEMQCEiQKH0NIR19BTEFSTV9DQ01fRENfQURIRVNJT05fRkFVTFQQxQISJgohQ0hHX0FMQVJNX0NDTV9QTFVHX09WR
  VJfVEVNUF9XQVJOEMYCEiIKHUNIR19BTEFSTV9DQ01fT1ZFUl9URU1QX0ZBVUxUEMcCEiUKIENIR19BTEFSTV9DQ01fQUNfQ09OV
  EFDVE9SX0ZBVUxUEMgCEiQKH0NIR19BTEFSTV9DQ01fQUNfQURIRVNJT05fRkFVTFQQyQISJgohQ0hHX0FMQVJNX0NDTV9QQVJBX
  0FESEVTSU9OX0ZBVUxUEMoCEiAKG0NIR19BTEFSTV9CTVNfQ0VMTF9PVkVSX1ZPTBCQAxIhChxDSEdfQUxBUk1fQk1TX0NFTExfT
  1ZFUl9URU1QEJEDEh0KGENIR19BTEFSTV9CTVNfQ09NTV9GQVVMVBCSAxIfChpDSEdfQUxBUk1fQk1TX0NPTU1fVElNRU9VVBCTA
  xIjCh5DSEdfQUxBUk1fQk1TX0JBVFRFUllfSU5WRVJTRUQQlAMSIQocQ0hHX0FMQVJNX0JNU19CQVRURVJZX01JU1NFRBCVAxIjC
  h5DSEdfQUxBUk1fQk1TX0JBVFRFUllfT1ZFUl9WT0wQlgMSGwoWQ0hHX0FMQVJNX0JNU19PVkVSX1NPQxCXAxIjCh5DSEdfQUxBU
  k1fQk1TX0lOU1VMQVRJT05fRkFVTFQQmAMSIgodQ0hHX0FMQVJNX0JNU19DT05UQUNUT1JfRkFVTFQQmQMSGAoTQ0hHX0FMQVJNX
  1BTTV9GQVVMVBCwCRIeChlDSEdfQUxBUk1fUFNNX0lOUFVUX0ZBVUxUELEJEiEKHENIR19BTEFSTV9QU01fSU5QVVRfT1ZFUl9WT
  0wQsgkSIgodQ0hHX0FMQVJNX1BTTV9JTlBVVF9VTkRFUl9WT0wQswkSIwoeQ0hHX0FMQVJNX1BTTV9JTlBVVF9NSVNTX1BIQVNFE
  LQJEh8KGkNIR19BTEFSTV9QU01fT1VUUFVUX1NIT1JUELUJEiIKHUNIR19BTEFSTV9QU01fT1VUUFVUX09WRVJfQ1VSELYJEiIKH
  UNIR19BTEFSTV9QU01fT1VUUFVUX09WRVJfVk9MELcJEiMKHkNIR19BTEFSTV9QU01fT1VUUFVUX1VOREVSX1ZPTBC4CRIfChpDS
  EdfQUxBUk1fUFNNX09VVFBVVF9GQVVMVBC5CRIcChdDSEdfQUxBUk1fUFNNX09WRVJfVEVNUBC6CRIdChhDSEdfQUxBUk1fUFNNX
  0NPTU1fRkFVTFQQuwkSHAoXQ0hHX0FMQVJNX1BTTV9GQU5fRkFVTFQQvAkSIgodQ0hHX0FMQVJNX1BTTV9DTE9TRV9FWENFUFRJT
  04QvQkSHgoaQ0hHX0FMQVJNX1ZFTkRPUl9FWFRFTlNJT04QABIYChRDSEdfQUxBUk1fTk9ORV9GSVJTVBABEhcKE0NIR19BTEFST
  V9OT05FX0xBU1QQYxIXChNDSEdfQUxBUk1fU1lTX0ZJUlNUEGQSFwoSQ0hHX0FMQVJNX1NZU19MQVNUEMcBEhgKE0NIR19BTEFST
  V9CQ01fRklSU1QQyAESFwoSQ0hHX0FMQVJNX0JDTV9MQVNUEKsCEhgKE0NIR19BTEFSTV9DQ01fRklSU1QQrAISFwoSQ0hHX0FMQ
  VJNX0NDTV9MQVNUEI8DEhgKE0NIR19BTEFSTV9CTVNfRklSU1QQkAMSFwoSQ0hHX0FMQVJNX0JNU19MQVNUEPMDEhgKE0NIR19BT
  EFSTV9QS0xfRklSU1QQ9AMSFwoSQ0hHX0FMQVJNX1BLTF9MQVNUENcEEhgKE0NIR19BTEFSTV9QS0RfRklSU1QQ2AQSFwoSQ0hHX
  0FMQVJNX1BLRF9MQVNUELsFEhoKFUNIR19BTEFSTV9NRVRFUl9GSVJTVBC8BRIZChRDSEdfQUxBUk1fTUVURVJfTEFTVBCfBhIYC
  hNDSEdfQUxBUk1fTENEX0ZJUlNUEKAGEhcKEkNIR19BTEFSTV9MQ0RfTEFTVBCDBxIZChRDSEdfQUxBUk1fQ0FSRF9GSVJTVBCEB
  xIYChNDSEdfQUxBUk1fQ0FSRF9MQVNUEOcHEhgKE0NIR19BTEFSTV9GQU5fRklSU1QQ6AcSFwoSQ0hHX0FMQVJNX0ZBTl9MQVNUE
  MsIEhkKFENIR19BTEFSTV9DT05OX0ZJUlNUEMwIEhgKE0NIR19BTEFSTV9DT05OX0xBU1QQrwkSGAoTQ0hHX0FMQVJNX1BTTV9GS
  VJTVBCwCRIXChJDSEdfQUxBUk1fUFNNX0xBU1QQkwoaAhABKtYKCg5DaGdNZWFzdXJlVHlwZRIgChxDSEdfTUVBU1VSRV9WRU5ET
  1JfRVhURU5TSU9OEAASHgoaQ0hHX01FQVNVUkVfV09SS0lOR19TVEFUVVMQARIbChdDSEdfTUVBU1VSRV9URU1QRVJBVFVSRRBkE
  hcKE0NIR19NRUFTVVJFX1ZPTFRBR0UQZRIZChVDSEdfTUVBU1VSRV9NSUxMSV9WT0wQZhIXChNDSEdfTUVBU1VSRV9DVVJSRU5UE
  GcSGwoXQ0hHX01FQVNVUkVfUE9XRVJfV0FUVFMQaBITCg9DSEdfTUVBU1VSRV9SUE0QaRITCg9DSEdfTUVBU1VSRV9TT0MQahIdC
  hlDSEdfTUVBU1VSRV9HRU5FUkFMX0lOUFVUEGsSGwoXQ0hHX01FQVNVUkVfR0VORVJBTF9BREMQbBIgChxDSEdfTUVBU1VSRV9HV
  UlEQU5DRV9WT0xUQUdFEG0SIAocQ0hHX01FQVNVUkVfQ09OVEFDVE9SX1NUQVRVUxBuEhsKF0NIR19NRUFTVVJFX0xPQ0tfU1RBV
  FVTEG8SGQoVQ0hHX01FQVNVUkVfQ1BfU1RBVFVTEHASGQoVQ0hHX01FQVNVUkVfQ0NfU1RBVFVTEHESGgoWQ0hHX01FQVNVUkVfQ
  0MxX1NUQVRVUxByEhwKGENIR19NRUFTVVJFX0dVTl9QT1NJVElPThBzEhsKF0NIR19NRUFTVVJFX0RPT1JfU1RBVFVTEHQSHQoZQ
  0hHX01FQVNVUkVfSU5QVVRfVk9MVEFHRRB1Eh8KG0NIR19NRUFTVVJFX0lOUFVUX1ZPTFRBR0VfQRB2Eh8KG0NIR19NRUFTVVJFX
  0lOUFVUX1ZPTFRBR0VfQhB3Eh8KG0NIR19NRUFTVVJFX0lOUFVUX1ZPTFRBR0VfQxB4Eh0KGUNIR19NRUFTVVJFX0lOUFVUX0NVU
  lJFTlQQeRIfChtDSEdfTUVBU1VSRV9JTlBVVF9DVVJSRU5UX0EQehIfChtDSEdfTUVBU1VSRV9JTlBVVF9DVVJSRU5UX0IQexIfC
  htDSEdfTUVBU1VSRV9JTlBVVF9DVVJSRU5UX0MQfBIeChpDSEdfTUVBU1VSRV9PVVRQVVRfVk9MVEFHRRB9Eh4KGkNIR19NRUFTV
  VJFX09VVFBVVF9DVVJSRU5UEH4SGQoVQ0hHX01FQVNVUkVfV0lGSV9SU1NJEH8SIAobQ0hHX01FQVNVUkVfV0lSRUxFU1NfU0lHT
  kFMEIABEhoKFUNIR19NRUFTVVJFX0NQVV9VU0FHRRCBARIcChdDSEdfTUVBU1VSRV9NRU1PUllfRlJFRRCCARIdChhDSEdfTUVBU
  1VSRV9TVE9SQUdFX0ZSRUUQgwESHwoaQ0hHX01FQVNVUkVfUEFSS0lOR19TVEFUVVMQhAESIAobQ0hHX01FQVNVUkVfUEFSS0xPQ
  0tfU1RBVFVTEIUBEhwKF0NIR19NRUFTVVJFX0VMRUNUUklDSVRZEIYBEiIKHUNIR19NRUFTVVJFX1BJRUNFX0VMRUNUUklDSVRZE
  IcBEhoKFUNIR19NRUFTVVJFX1ZPTFRBR0VfQRCIARIaChVDSEdfTUVBU1VSRV9WT0xUQUdFX0IQiQESGgoVQ0hHX01FQVNVUkVfV
  k9MVEFHRV9DEIoBEhoKFUNIR19NRUFTVVJFX0NVUlJFTlRfQRCLARIaChVDSEdfTUVBU1VSRV9DVVJSRU5UX0IQjAESGgoVQ0hHX
  01FQVNVUkVfQ1VSUkVOVF9DEI0BEiAKG0NIR19NRUFTVVJFX1BPV0VSX0tJTE9XQVRUUxCOASpjCg1DaGdNZWFzdXJlTG9jEhsKF
  0NIR19NRUFTVVJFX0xPQ19PVVRTSURFEAASGQoVQ0hHX01FQVNVUkVfTE9DX0lOTEVUEAESGgoWQ0hHX01FQVNVUkVfTE9DX09VV
  ExFVBACKtsBCg1DaGdUYXJpZmZUeXBlEhsKF0NIR19UQVJJRkZfQ0hBUkdJTkdfS1dIEAESHAoYQ0hHX1RBUklGRl9DSEFSR0lOR
  19IT1VSEAISGgoWQ0hHX1RBUklGRl9TRVJWSUNFX0tXSBADEhsKF0NIR19UQVJJRkZfU0VSVklDRV9IT1VSEAQSHAoYQ0hHX1RBU
  klGRl9TRVJWSUNFX0NPVU5UEAYSGwoXQ0hHX1RBUklGRl9QQVJLSU5HX0hPVVIQFBIbChdDSEdfVEFSSUZGX1JFU0VSVkVfSE9VU
  hAeKoABCg9DaGdUYXJpZmZQZXJpb2QSGQoVQ0hHX1RBUklGRl9QRVJJT0RfVElQEAESGgoWQ0hHX1RBUklGRl9QRVJJT0RfUEVBS
  xACEhoKFkNIR19UQVJJRkZfUEVSSU9EX0ZMQVQQAxIaChZDSEdfVEFSSUZGX1BFUklPRF9WQUxFEARCcgojY29tLmNoYXJnZXJsa
  W5rLmdhdGV3YXkuYmVhbi5jb21tb25QAFojY29tLmNoYXJnZXJsaW5rLmdhdGV3YXkuYmVhbi5jb21tb26qAiNjb20uY2hhcmdlc
  mxpbmsuZ2F0ZXdheS5iZWFuLmNvbW1vbg=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, Seq(
    ))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}