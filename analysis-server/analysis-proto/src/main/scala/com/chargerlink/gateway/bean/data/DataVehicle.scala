// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 电动车TBOX设备实时状态数据的消息定义。
  *
  * @param overallData
  *  / (可选)整车数据。对应电动车国标'0x01整车数据'。
  * @param driveData
  *  / (可选)驱动电机数据。对应电动车国标'0x02驱动电机数据'。
  * @param baterryData
  *  / (可选)燃料电池数据。对应电动车国标'0x03燃料电池数据'。
  * @param motorData
  *  / (可选)发动机数据。对应电动车国标'0x04发动机数据'。
  * @param posData
  *  / (可选)车辆位置数据。对应电动车国标'0x05车辆位置数据'。
  * @param extremeData
  *  / (可选)极值数据。对应电动车国标'0x06极值数据'。
  * @param alarmData
  *  / (可选)报警数据。对应电动车国标'0x07报警数据'。
  * @param bmsVolData
  *  / (可选)可充电储能装置电压数据。对应电动车国标'0x08可充电储能装置电压数据'。
  * @param bmsTempData
  *  / (可选)可充电储能装置温度数据。对应电动车国标'0x09可充电储能装置温度数据'。
  * @param extendData
  *  / (可选)车辆扩展数据的数组。
  */
@SerialVersionUID(0L)
final case class DataVehicle(
    overallData: scala.Option[com.chargerlink.gateway.bean.data.DataVehOverall] = None,
    driveData: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehDrive] = _root_.scala.collection.Seq.empty,
    baterryData: scala.Option[com.chargerlink.gateway.bean.data.DataVehBattery] = None,
    motorData: scala.Option[com.chargerlink.gateway.bean.data.DataVehMotor] = None,
    posData: scala.Option[com.chargerlink.gateway.bean.data.DataVehPos] = None,
    extremeData: scala.Option[com.chargerlink.gateway.bean.data.DataVehExtreme] = None,
    alarmData: scala.Option[com.chargerlink.gateway.bean.data.DataVehAlarm] = None,
    bmsVolData: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsVol] = _root_.scala.collection.Seq.empty,
    bmsTempData: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsTemp] = _root_.scala.collection.Seq.empty,
    extendData: scala.Option[com.google.protobuf.any.Any] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehicle] with com.trueaccord.lenses.Updatable[DataVehicle] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (overallData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(overallData.get.serializedSize) + overallData.get.serializedSize }
      driveData.foreach(driveData => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(driveData.serializedSize) + driveData.serializedSize)
      if (baterryData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(baterryData.get.serializedSize) + baterryData.get.serializedSize }
      if (motorData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(motorData.get.serializedSize) + motorData.get.serializedSize }
      if (posData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(posData.get.serializedSize) + posData.get.serializedSize }
      if (extremeData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(extremeData.get.serializedSize) + extremeData.get.serializedSize }
      if (alarmData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(alarmData.get.serializedSize) + alarmData.get.serializedSize }
      bmsVolData.foreach(bmsVolData => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(bmsVolData.serializedSize) + bmsVolData.serializedSize)
      bmsTempData.foreach(bmsTempData => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(bmsTempData.serializedSize) + bmsTempData.serializedSize)
      if (extendData.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(extendData.get.serializedSize) + extendData.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      overallData.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      driveData.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      baterryData.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      motorData.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      posData.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      extremeData.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      alarmData.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      bmsVolData.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      bmsTempData.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      extendData.foreach { __v =>
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehicle = {
      var __overallData = this.overallData
      val __driveData = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataVehDrive] ++= this.driveData)
      var __baterryData = this.baterryData
      var __motorData = this.motorData
      var __posData = this.posData
      var __extremeData = this.extremeData
      var __alarmData = this.alarmData
      val __bmsVolData = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataVehBmsVol] ++= this.bmsVolData)
      val __bmsTempData = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataVehBmsTemp] ++= this.bmsTempData)
      var __extendData = this.extendData
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __overallData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __overallData.getOrElse(com.chargerlink.gateway.bean.data.DataVehOverall.defaultInstance)))
          case 18 =>
            __driveData += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataVehDrive.defaultInstance)
          case 26 =>
            __baterryData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __baterryData.getOrElse(com.chargerlink.gateway.bean.data.DataVehBattery.defaultInstance)))
          case 34 =>
            __motorData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __motorData.getOrElse(com.chargerlink.gateway.bean.data.DataVehMotor.defaultInstance)))
          case 42 =>
            __posData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __posData.getOrElse(com.chargerlink.gateway.bean.data.DataVehPos.defaultInstance)))
          case 50 =>
            __extremeData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __extremeData.getOrElse(com.chargerlink.gateway.bean.data.DataVehExtreme.defaultInstance)))
          case 58 =>
            __alarmData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __alarmData.getOrElse(com.chargerlink.gateway.bean.data.DataVehAlarm.defaultInstance)))
          case 66 =>
            __bmsVolData += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataVehBmsVol.defaultInstance)
          case 74 =>
            __bmsTempData += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataVehBmsTemp.defaultInstance)
          case 802 =>
            __extendData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.data.DataVehicle(
          overallData = __overallData,
          driveData = __driveData.result(),
          baterryData = __baterryData,
          motorData = __motorData,
          posData = __posData,
          extremeData = __extremeData,
          alarmData = __alarmData,
          bmsVolData = __bmsVolData.result(),
          bmsTempData = __bmsTempData.result(),
          extendData = __extendData
      )
    }
    def getOverallData: com.chargerlink.gateway.bean.data.DataVehOverall = overallData.getOrElse(com.chargerlink.gateway.bean.data.DataVehOverall.defaultInstance)
    def clearOverallData: DataVehicle = copy(overallData = None)
    def withOverallData(__v: com.chargerlink.gateway.bean.data.DataVehOverall): DataVehicle = copy(overallData = Some(__v))
    def clearDriveData = copy(driveData = _root_.scala.collection.Seq.empty)
    def addDriveData(__vs: com.chargerlink.gateway.bean.data.DataVehDrive*): DataVehicle = addAllDriveData(__vs)
    def addAllDriveData(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataVehDrive]): DataVehicle = copy(driveData = driveData ++ __vs)
    def withDriveData(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehDrive]): DataVehicle = copy(driveData = __v)
    def getBaterryData: com.chargerlink.gateway.bean.data.DataVehBattery = baterryData.getOrElse(com.chargerlink.gateway.bean.data.DataVehBattery.defaultInstance)
    def clearBaterryData: DataVehicle = copy(baterryData = None)
    def withBaterryData(__v: com.chargerlink.gateway.bean.data.DataVehBattery): DataVehicle = copy(baterryData = Some(__v))
    def getMotorData: com.chargerlink.gateway.bean.data.DataVehMotor = motorData.getOrElse(com.chargerlink.gateway.bean.data.DataVehMotor.defaultInstance)
    def clearMotorData: DataVehicle = copy(motorData = None)
    def withMotorData(__v: com.chargerlink.gateway.bean.data.DataVehMotor): DataVehicle = copy(motorData = Some(__v))
    def getPosData: com.chargerlink.gateway.bean.data.DataVehPos = posData.getOrElse(com.chargerlink.gateway.bean.data.DataVehPos.defaultInstance)
    def clearPosData: DataVehicle = copy(posData = None)
    def withPosData(__v: com.chargerlink.gateway.bean.data.DataVehPos): DataVehicle = copy(posData = Some(__v))
    def getExtremeData: com.chargerlink.gateway.bean.data.DataVehExtreme = extremeData.getOrElse(com.chargerlink.gateway.bean.data.DataVehExtreme.defaultInstance)
    def clearExtremeData: DataVehicle = copy(extremeData = None)
    def withExtremeData(__v: com.chargerlink.gateway.bean.data.DataVehExtreme): DataVehicle = copy(extremeData = Some(__v))
    def getAlarmData: com.chargerlink.gateway.bean.data.DataVehAlarm = alarmData.getOrElse(com.chargerlink.gateway.bean.data.DataVehAlarm.defaultInstance)
    def clearAlarmData: DataVehicle = copy(alarmData = None)
    def withAlarmData(__v: com.chargerlink.gateway.bean.data.DataVehAlarm): DataVehicle = copy(alarmData = Some(__v))
    def clearBmsVolData = copy(bmsVolData = _root_.scala.collection.Seq.empty)
    def addBmsVolData(__vs: com.chargerlink.gateway.bean.data.DataVehBmsVol*): DataVehicle = addAllBmsVolData(__vs)
    def addAllBmsVolData(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataVehBmsVol]): DataVehicle = copy(bmsVolData = bmsVolData ++ __vs)
    def withBmsVolData(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsVol]): DataVehicle = copy(bmsVolData = __v)
    def clearBmsTempData = copy(bmsTempData = _root_.scala.collection.Seq.empty)
    def addBmsTempData(__vs: com.chargerlink.gateway.bean.data.DataVehBmsTemp*): DataVehicle = addAllBmsTempData(__vs)
    def addAllBmsTempData(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataVehBmsTemp]): DataVehicle = copy(bmsTempData = bmsTempData ++ __vs)
    def withBmsTempData(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsTemp]): DataVehicle = copy(bmsTempData = __v)
    def getExtendData: com.google.protobuf.any.Any = extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearExtendData: DataVehicle = copy(extendData = None)
    def withExtendData(__v: com.google.protobuf.any.Any): DataVehicle = copy(extendData = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => overallData.orNull
        case 2 => driveData
        case 3 => baterryData.orNull
        case 4 => motorData.orNull
        case 5 => posData.orNull
        case 6 => extremeData.orNull
        case 7 => alarmData.orNull
        case 8 => bmsVolData
        case 9 => bmsTempData
        case 100 => extendData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => overallData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(driveData.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 3 => baterryData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => motorData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => posData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => extremeData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => alarmData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PRepeated(bmsVolData.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 9 => _root_.scalapb.descriptors.PRepeated(bmsTempData.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 100 => extendData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehicle
}

object DataVehicle extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehicle] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehicle] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehicle = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehicle(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehOverall]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehDrive]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehBattery]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehMotor]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehPos]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehExtreme]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataVehAlarm]],
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsVol]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsTemp]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehicle] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehicle(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehOverall]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehDrive]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehBattery]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehMotor]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehPos]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehExtreme]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataVehAlarm]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsVol]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsTemp]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataVehOverall
      case 2 => __out = com.chargerlink.gateway.bean.data.DataVehDrive
      case 3 => __out = com.chargerlink.gateway.bean.data.DataVehBattery
      case 4 => __out = com.chargerlink.gateway.bean.data.DataVehMotor
      case 5 => __out = com.chargerlink.gateway.bean.data.DataVehPos
      case 6 => __out = com.chargerlink.gateway.bean.data.DataVehExtreme
      case 7 => __out = com.chargerlink.gateway.bean.data.DataVehAlarm
      case 8 => __out = com.chargerlink.gateway.bean.data.DataVehBmsVol
      case 9 => __out = com.chargerlink.gateway.bean.data.DataVehBmsTemp
      case 100 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehicle(
  )
  implicit class DataVehicleLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehicle]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehicle](_l) {
    def overallData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehOverall] = field(_.getOverallData)((c_, f_) => c_.copy(overallData = Some(f_)))
    def optionalOverallData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehOverall]] = field(_.overallData)((c_, f_) => c_.copy(overallData = f_))
    def driveData: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehDrive]] = field(_.driveData)((c_, f_) => c_.copy(driveData = f_))
    def baterryData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehBattery] = field(_.getBaterryData)((c_, f_) => c_.copy(baterryData = Some(f_)))
    def optionalBaterryData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehBattery]] = field(_.baterryData)((c_, f_) => c_.copy(baterryData = f_))
    def motorData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehMotor] = field(_.getMotorData)((c_, f_) => c_.copy(motorData = Some(f_)))
    def optionalMotorData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehMotor]] = field(_.motorData)((c_, f_) => c_.copy(motorData = f_))
    def posData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos] = field(_.getPosData)((c_, f_) => c_.copy(posData = Some(f_)))
    def optionalPosData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehPos]] = field(_.posData)((c_, f_) => c_.copy(posData = f_))
    def extremeData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehExtreme] = field(_.getExtremeData)((c_, f_) => c_.copy(extremeData = Some(f_)))
    def optionalExtremeData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehExtreme]] = field(_.extremeData)((c_, f_) => c_.copy(extremeData = f_))
    def alarmData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehAlarm] = field(_.getAlarmData)((c_, f_) => c_.copy(alarmData = Some(f_)))
    def optionalAlarmData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataVehAlarm]] = field(_.alarmData)((c_, f_) => c_.copy(alarmData = f_))
    def bmsVolData: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsVol]] = field(_.bmsVolData)((c_, f_) => c_.copy(bmsVolData = f_))
    def bmsTempData: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehBmsTemp]] = field(_.bmsTempData)((c_, f_) => c_.copy(bmsTempData = f_))
    def extendData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getExtendData)((c_, f_) => c_.copy(extendData = Some(f_)))
    def optionalExtendData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.extendData)((c_, f_) => c_.copy(extendData = f_))
  }
  final val OVERALL_DATA_FIELD_NUMBER = 1
  final val DRIVE_DATA_FIELD_NUMBER = 2
  final val BATERRY_DATA_FIELD_NUMBER = 3
  final val MOTOR_DATA_FIELD_NUMBER = 4
  final val POS_DATA_FIELD_NUMBER = 5
  final val EXTREME_DATA_FIELD_NUMBER = 6
  final val ALARM_DATA_FIELD_NUMBER = 7
  final val BMS_VOL_DATA_FIELD_NUMBER = 8
  final val BMS_TEMP_DATA_FIELD_NUMBER = 9
  final val EXTEND_DATA_FIELD_NUMBER = 100
}
