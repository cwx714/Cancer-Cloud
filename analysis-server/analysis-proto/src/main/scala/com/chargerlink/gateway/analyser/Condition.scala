// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.chargerlink.gateway.analyser



/** * 按报警级别的报表分析条件的消息定义。
  *
  * @param alarmParam
  *  / (必填)报警通知定义。数据分析平台产生报警后，需包含此参数。
  * @param alarmLevel
  *  / (必填)报警级别。
  * @param startTime
  *  / (必填)分析开始时间。单位：1分钟，范围：0分钟～1440分钟。例如，420表示早上7:00。
  * @param stopTime
  *  / (必填)分析结束时间。单位：1分钟，范围：0分钟～1440分钟。例如，420表示早上7:00。
  * @param logical
  *  / (必填)分析参数的逻辑关系。
  * @param expressions
  *  / (必填)分析参数的列表。
  */
@SerialVersionUID(0L)
final case class Condition(
    alarmParam: scala.Option[com.chargerlink.gateway.analyser.AlarmParameter] = None,
    alarmLevel: Int = 0,
    startTime: Int = 0,
    stopTime: Int = 0,
    logical: com.chargerlink.gateway.analyser.Condition.Logical = com.chargerlink.gateway.analyser.Condition.Logical.AND,
    expressions: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Condition.Expression] = _root_.scala.collection.Seq.empty,
    observe: com.chargerlink.gateway.analyser.Condition.Observe = com.chargerlink.gateway.analyser.Condition.Observe.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Condition] with com.trueaccord.lenses.Updatable[Condition] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (alarmParam.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(alarmParam.get.serializedSize) + alarmParam.get.serializedSize }
      if (alarmLevel != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, alarmLevel) }
      if (startTime != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, startTime) }
      if (stopTime != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, stopTime) }
      if (observe.duration.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, observe.duration.get) }
      if (observe.count.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, observe.count.get) }
      if (logical != com.chargerlink.gateway.analyser.Condition.Logical.AND) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, logical.value) }
      expressions.foreach(expressions => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(expressions.serializedSize) + expressions.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      alarmParam.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = alarmLevel
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = startTime
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
      {
        val __v = stopTime
        if (__v != 0) {
          _output__.writeUInt32(4, __v)
        }
      };
      observe.duration.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      observe.count.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
      {
        val __v = logical
        if (__v != com.chargerlink.gateway.analyser.Condition.Logical.AND) {
          _output__.writeEnum(7, __v.value)
        }
      };
      expressions.foreach { __v =>
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.Condition = {
      var __alarmParam = this.alarmParam
      var __alarmLevel = this.alarmLevel
      var __startTime = this.startTime
      var __stopTime = this.stopTime
      var __logical = this.logical
      val __expressions = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.analyser.Condition.Expression] ++= this.expressions)
      var __observe = this.observe
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __alarmParam = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __alarmParam.getOrElse(com.chargerlink.gateway.analyser.AlarmParameter.defaultInstance)))
          case 16 =>
            __alarmLevel = _input__.readUInt32()
          case 24 =>
            __startTime = _input__.readUInt32()
          case 32 =>
            __stopTime = _input__.readUInt32()
          case 40 =>
            __observe = com.chargerlink.gateway.analyser.Condition.Observe.Duration(_input__.readInt32())
          case 48 =>
            __observe = com.chargerlink.gateway.analyser.Condition.Observe.Count(_input__.readInt32())
          case 56 =>
            __logical = com.chargerlink.gateway.analyser.Condition.Logical.fromValue(_input__.readEnum())
          case 66 =>
            __expressions += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.analyser.Condition.Expression.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.analyser.Condition(
          alarmParam = __alarmParam,
          alarmLevel = __alarmLevel,
          startTime = __startTime,
          stopTime = __stopTime,
          logical = __logical,
          expressions = __expressions.result(),
          observe = __observe
      )
    }
    def getAlarmParam: com.chargerlink.gateway.analyser.AlarmParameter = alarmParam.getOrElse(com.chargerlink.gateway.analyser.AlarmParameter.defaultInstance)
    def clearAlarmParam: Condition = copy(alarmParam = None)
    def withAlarmParam(__v: com.chargerlink.gateway.analyser.AlarmParameter): Condition = copy(alarmParam = Some(__v))
    def withAlarmLevel(__v: Int): Condition = copy(alarmLevel = __v)
    def withStartTime(__v: Int): Condition = copy(startTime = __v)
    def withStopTime(__v: Int): Condition = copy(stopTime = __v)
    def getDuration: Int = observe.duration.getOrElse(0)
    def withDuration(__v: Int): Condition = copy(observe = com.chargerlink.gateway.analyser.Condition.Observe.Duration(__v))
    def getCount: Int = observe.count.getOrElse(0)
    def withCount(__v: Int): Condition = copy(observe = com.chargerlink.gateway.analyser.Condition.Observe.Count(__v))
    def withLogical(__v: com.chargerlink.gateway.analyser.Condition.Logical): Condition = copy(logical = __v)
    def clearExpressions = copy(expressions = _root_.scala.collection.Seq.empty)
    def addExpressions(__vs: com.chargerlink.gateway.analyser.Condition.Expression*): Condition = addAllExpressions(__vs)
    def addAllExpressions(__vs: TraversableOnce[com.chargerlink.gateway.analyser.Condition.Expression]): Condition = copy(expressions = expressions ++ __vs)
    def withExpressions(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Condition.Expression]): Condition = copy(expressions = __v)
    def clearObserve: Condition = copy(observe = com.chargerlink.gateway.analyser.Condition.Observe.Empty)
    def withObserve(__v: com.chargerlink.gateway.analyser.Condition.Observe): Condition = copy(observe = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => alarmParam.orNull
        case 2 => {
          val __t = alarmLevel
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = startTime
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = stopTime
          if (__t != 0) __t else null
        }
        case 5 => observe.duration.orNull
        case 6 => observe.count.orNull
        case 7 => {
          val __t = logical.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 8 => expressions
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => alarmParam.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PInt(alarmLevel)
        case 3 => _root_.scalapb.descriptors.PInt(startTime)
        case 4 => _root_.scalapb.descriptors.PInt(stopTime)
        case 5 => observe.duration.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => observe.count.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => _root_.scalapb.descriptors.PEnum(logical.scalaValueDescriptor)
        case 8 => _root_.scalapb.descriptors.PRepeated(expressions.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.analyser.Condition
}

object Condition extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Condition] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Condition] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.Condition = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.analyser.Condition(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.analyser.AlarmParameter]],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[Int],
      com.chargerlink.gateway.analyser.Condition.Logical.fromValue(__fieldsMap.getOrElse(__fields.get(6), com.chargerlink.gateway.analyser.Condition.Logical.AND.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Condition.Expression]],
      observe = __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]].map(com.chargerlink.gateway.analyser.Condition.Observe.Duration) orElse
__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]].map(com.chargerlink.gateway.analyser.Condition.Observe.Count) getOrElse com.chargerlink.gateway.analyser.Condition.Observe.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.Condition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.analyser.Condition(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.analyser.AlarmParameter]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[Int]).getOrElse(0),
        com.chargerlink.gateway.analyser.Condition.Logical.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.chargerlink.gateway.analyser.Condition.Logical.AND.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Condition.Expression]]).getOrElse(_root_.scala.collection.Seq.empty),
        observe = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Int]]).map(com.chargerlink.gateway.analyser.Condition.Observe.Duration) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Int]]).map(com.chargerlink.gateway.analyser.Condition.Observe.Count) getOrElse com.chargerlink.gateway.analyser.Condition.Observe.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RulesProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RulesProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.analyser.AlarmParameter
      case 8 => __out = com.chargerlink.gateway.analyser.Condition.Expression
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => com.chargerlink.gateway.analyser.Condition.Logical
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.analyser.Condition(
  )
  sealed trait Logical extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Logical
    def isAnd: Boolean = false
    def isOr: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Logical] = com.chargerlink.gateway.analyser.Condition.Logical
  }
  
  object Logical extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Logical] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Logical] = this
    @SerialVersionUID(0L)
    case object AND extends Logical {
      val value = 0
      val index = 0
      val name = "AND"
      override def isAnd: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OR extends Logical {
      val value = 1
      val index = 1
      val name = "OR"
      override def isOr: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Logical with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(AND, OR)
    def fromValue(value: Int): Logical = value match {
      case 0 => AND
      case 1 => OR
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.Condition.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.Condition.scalaDescriptor.enums(0)
  }
  sealed trait Operator extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Operator
    def isEq: Boolean = false
    def isGt: Boolean = false
    def isLt: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Operator] = com.chargerlink.gateway.analyser.Condition.Operator
  }
  
  object Operator extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Operator] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Operator] = this
    @SerialVersionUID(0L)
    case object EQ extends Operator {
      val value = 0
      val index = 0
      val name = "EQ"
      override def isEq: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GT extends Operator {
      val value = 1
      val index = 1
      val name = "GT"
      override def isGt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LT extends Operator {
      val value = 2
      val index = 2
      val name = "LT"
      override def isLt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Operator with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(EQ, GT, LT)
    def fromValue(value: Int): Operator = value match {
      case 0 => EQ
      case 1 => GT
      case 2 => LT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.Condition.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.Condition.scalaDescriptor.enums(1)
  }
  sealed trait Observe extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isDuration: Boolean = false
    def isCount: Boolean = false
    def duration: scala.Option[Int] = None
    def count: scala.Option[Int] = None
  }
  object Observe extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.analyser.Condition.Observe {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class Duration(value: Int) extends com.chargerlink.gateway.analyser.Condition.Observe {
      override def isDuration: Boolean = true
      override def duration: scala.Option[Int] = Some(value)
      override def number: Int = 5
    }
    @SerialVersionUID(0L)
    case class Count(value: Int) extends com.chargerlink.gateway.analyser.Condition.Observe {
      override def isCount: Boolean = true
      override def count: scala.Option[Int] = Some(value)
      override def number: Int = 6
    }
  }
  /** * 分析参数的消息定义。
    *
    * @param operator
    *  /
    */
  @SerialVersionUID(0L)
  final case class Expression(
      operator: com.chargerlink.gateway.analyser.Condition.Operator = com.chargerlink.gateway.analyser.Condition.Operator.EQ,
      value: scala.Option[com.chargerlink.gateway.analyser.Value] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Expression] with com.trueaccord.lenses.Updatable[Expression] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (operator != com.chargerlink.gateway.analyser.Condition.Operator.EQ) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, operator.value) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = operator
          if (__v != com.chargerlink.gateway.analyser.Condition.Operator.EQ) {
            _output__.writeEnum(1, __v.value)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.Condition.Expression = {
        var __operator = this.operator
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __operator = com.chargerlink.gateway.analyser.Condition.Operator.fromValue(_input__.readEnum())
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.analyser.Value.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.analyser.Condition.Expression(
            operator = __operator,
            value = __value
        )
      }
      def withOperator(__v: com.chargerlink.gateway.analyser.Condition.Operator): Expression = copy(operator = __v)
      def getValue: com.chargerlink.gateway.analyser.Value = value.getOrElse(com.chargerlink.gateway.analyser.Value.defaultInstance)
      def clearValue: Expression = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.analyser.Value): Expression = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = operator.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(operator.scalaValueDescriptor)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.analyser.Condition.Expression
  }
  
  object Expression extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Condition.Expression] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.Condition.Expression] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.Condition.Expression = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.analyser.Condition.Expression(
        com.chargerlink.gateway.analyser.Condition.Operator.fromValue(__fieldsMap.getOrElse(__fields.get(0), com.chargerlink.gateway.analyser.Condition.Operator.EQ.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.analyser.Value]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.Condition.Expression] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.analyser.Condition.Expression(
          com.chargerlink.gateway.analyser.Condition.Operator.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.chargerlink.gateway.analyser.Condition.Operator.EQ.scalaValueDescriptor).number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.analyser.Value]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.analyser.Condition.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.analyser.Condition.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.analyser.Value
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.chargerlink.gateway.analyser.Condition.Operator
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.analyser.Condition.Expression(
    )
    implicit class ExpressionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Condition.Expression]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.Condition.Expression](_l) {
      def operator: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Condition.Operator] = field(_.operator)((c_, f_) => c_.copy(operator = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Value] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.analyser.Value]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val OPERATOR_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
  }
  
  implicit class ConditionLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Condition]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.Condition](_l) {
    def alarmParam: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.AlarmParameter] = field(_.getAlarmParam)((c_, f_) => c_.copy(alarmParam = Some(f_)))
    def optionalAlarmParam: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.analyser.AlarmParameter]] = field(_.alarmParam)((c_, f_) => c_.copy(alarmParam = f_))
    def alarmLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.alarmLevel)((c_, f_) => c_.copy(alarmLevel = f_))
    def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def stopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.stopTime)((c_, f_) => c_.copy(stopTime = f_))
    def duration: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDuration)((c_, f_) => c_.copy(observe = com.chargerlink.gateway.analyser.Condition.Observe.Duration(f_)))
    def count: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCount)((c_, f_) => c_.copy(observe = com.chargerlink.gateway.analyser.Condition.Observe.Count(f_)))
    def logical: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Condition.Logical] = field(_.logical)((c_, f_) => c_.copy(logical = f_))
    def expressions: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Condition.Expression]] = field(_.expressions)((c_, f_) => c_.copy(expressions = f_))
    def observe: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.Condition.Observe] = field(_.observe)((c_, f_) => c_.copy(observe = f_))
  }
  final val ALARM_PARAM_FIELD_NUMBER = 1
  final val ALARM_LEVEL_FIELD_NUMBER = 2
  final val START_TIME_FIELD_NUMBER = 3
  final val STOP_TIME_FIELD_NUMBER = 4
  final val DURATION_FIELD_NUMBER = 5
  final val COUNT_FIELD_NUMBER = 6
  final val LOGICAL_FIELD_NUMBER = 7
  final val EXPRESSIONS_FIELD_NUMBER = 8
}
