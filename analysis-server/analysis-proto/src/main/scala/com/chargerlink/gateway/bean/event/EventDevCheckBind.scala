// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 通用终端设备查询绑定/解绑请求事件的消息定义。
  *
  * @param type
  *  / (必填)绑定操作类型。
  * @param phone
  *  / (可选)绑定用户的手机号码。
  * @param email
  *  / (可选)绑定用户的邮箱。
  * @param qq
  *  / (可选)绑定用户的QQ号码。
  * @param weixin
  *  / (可选)绑定用户的微信号。
  * @param weibo
  *  / (可选)绑定用户的微博号。
  * @param other
  *  / (可选)绑定用户的其他信息。
  */
@SerialVersionUID(0L)
final case class EventDevCheckBind(
    `type`: com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType,
    phone: scala.Option[String] = None,
    email: scala.Option[String] = None,
    qq: scala.Option[String] = None,
    weixin: scala.Option[String] = None,
    weibo: scala.Option[String] = None,
    other: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EventDevCheckBind] with com.trueaccord.lenses.Updatable[EventDevCheckBind] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, `type`.value)
      if (phone.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, phone.get) }
      if (email.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, email.get) }
      if (qq.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, qq.get) }
      if (weixin.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, weixin.get) }
      if (weibo.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, weibo.get) }
      if (other.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, other.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, `type`.value)
      phone.foreach { __v =>
        _output__.writeString(2, __v)
      };
      email.foreach { __v =>
        _output__.writeString(3, __v)
      };
      qq.foreach { __v =>
        _output__.writeString(4, __v)
      };
      weixin.foreach { __v =>
        _output__.writeString(5, __v)
      };
      weibo.foreach { __v =>
        _output__.writeString(6, __v)
      };
      other.foreach { __v =>
        _output__.writeString(7, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.EventDevCheckBind = {
      var __type = this.`type`
      var __phone = this.phone
      var __email = this.email
      var __qq = this.qq
      var __weixin = this.weixin
      var __weibo = this.weibo
      var __other = this.other
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __phone = Some(_input__.readString())
          case 26 =>
            __email = Some(_input__.readString())
          case 34 =>
            __qq = Some(_input__.readString())
          case 42 =>
            __weixin = Some(_input__.readString())
          case 50 =>
            __weibo = Some(_input__.readString())
          case 58 =>
            __other = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.EventDevCheckBind(
          `type` = __type,
          phone = __phone,
          email = __email,
          qq = __qq,
          weixin = __weixin,
          weibo = __weibo,
          other = __other
      )
    }
    def withType(__v: com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType): EventDevCheckBind = copy(`type` = __v)
    def getPhone: String = phone.getOrElse("")
    def clearPhone: EventDevCheckBind = copy(phone = None)
    def withPhone(__v: String): EventDevCheckBind = copy(phone = Some(__v))
    def getEmail: String = email.getOrElse("")
    def clearEmail: EventDevCheckBind = copy(email = None)
    def withEmail(__v: String): EventDevCheckBind = copy(email = Some(__v))
    def getQq: String = qq.getOrElse("")
    def clearQq: EventDevCheckBind = copy(qq = None)
    def withQq(__v: String): EventDevCheckBind = copy(qq = Some(__v))
    def getWeixin: String = weixin.getOrElse("")
    def clearWeixin: EventDevCheckBind = copy(weixin = None)
    def withWeixin(__v: String): EventDevCheckBind = copy(weixin = Some(__v))
    def getWeibo: String = weibo.getOrElse("")
    def clearWeibo: EventDevCheckBind = copy(weibo = None)
    def withWeibo(__v: String): EventDevCheckBind = copy(weibo = Some(__v))
    def getOther: String = other.getOrElse("")
    def clearOther: EventDevCheckBind = copy(other = None)
    def withOther(__v: String): EventDevCheckBind = copy(other = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.javaValueDescriptor
        case 2 => phone.orNull
        case 3 => email.orNull
        case 4 => qq.orNull
        case 5 => weixin.orNull
        case 6 => weibo.orNull
        case 7 => other.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 2 => phone.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => email.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => qq.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => weixin.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => weibo.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => other.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.EventDevCheckBind
}

object EventDevCheckBind extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventDevCheckBind] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventDevCheckBind] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.EventDevCheckBind = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.EventDevCheckBind(
      com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.EventDevCheckBind] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.EventDevCheckBind(
        com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventDeviceProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventDeviceProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.EventDevCheckBind(
    `type` = com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType.BIND_REQUEST
  )
  sealed trait BindType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = BindType
    def isBindRequest: Boolean = false
    def isUnbindUser: Boolean = false
    def isUnbindReset: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[BindType] = com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType
  }
  
  object BindType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[BindType] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[BindType] = this
    @SerialVersionUID(0L)
    case object BIND_REQUEST extends BindType {
      val value = 0
      val index = 0
      val name = "BIND_REQUEST"
      override def isBindRequest: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNBIND_USER extends BindType {
      val value = 1
      val index = 1
      val name = "UNBIND_USER"
      override def isUnbindUser: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNBIND_RESET extends BindType {
      val value = 2
      val index = 2
      val name = "UNBIND_RESET"
      override def isUnbindReset: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends BindType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(BIND_REQUEST, UNBIND_USER, UNBIND_RESET)
    def fromValue(value: Int): BindType = value match {
      case 0 => BIND_REQUEST
      case 1 => UNBIND_USER
      case 2 => UNBIND_RESET
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.event.EventDevCheckBind.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.event.EventDevCheckBind.scalaDescriptor.enums(0)
  }
  implicit class EventDevCheckBindLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckBind]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckBind](_l) {
    def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckBind.BindType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def phone: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPhone)((c_, f_) => c_.copy(phone = Some(f_)))
    def optionalPhone: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def email: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getEmail)((c_, f_) => c_.copy(email = Some(f_)))
    def optionalEmail: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.email)((c_, f_) => c_.copy(email = f_))
    def qq: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getQq)((c_, f_) => c_.copy(qq = Some(f_)))
    def optionalQq: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.qq)((c_, f_) => c_.copy(qq = f_))
    def weixin: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getWeixin)((c_, f_) => c_.copy(weixin = Some(f_)))
    def optionalWeixin: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.weixin)((c_, f_) => c_.copy(weixin = f_))
    def weibo: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getWeibo)((c_, f_) => c_.copy(weibo = Some(f_)))
    def optionalWeibo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.weibo)((c_, f_) => c_.copy(weibo = f_))
    def other: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getOther)((c_, f_) => c_.copy(other = Some(f_)))
    def optionalOther: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.other)((c_, f_) => c_.copy(other = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val PHONE_FIELD_NUMBER = 2
  final val EMAIL_FIELD_NUMBER = 3
  final val QQ_FIELD_NUMBER = 4
  final val WEIXIN_FIELD_NUMBER = 5
  final val WEIBO_FIELD_NUMBER = 6
  final val OTHER_FIELD_NUMBER = 7
}
