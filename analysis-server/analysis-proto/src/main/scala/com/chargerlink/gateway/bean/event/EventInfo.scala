// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 终端设备事件消息的消息定义。其中：事件消息详情的定义分别在以下文件中：EventDevice.proto、EventVehicle.proto、EventCharger.proto、EventRecorder.proto。
  *
  * @param deviceType
  *  / (必填)终端设备类型。
  * @param deviceId
  *  / (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
  * @param subDevice
  *  / (必填)子设备标识信息。其中：主设备标识为""，充电枪的标识为"plug=充电枪ID"。
  * @param eventType
  *  / (必填)事件类型。
  * @param eventTime
  *  / (必填)事件时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param eventId
  *  / (可选)事件唯一ID(设备内唯一即可)。null或空：表示接入平台不等待业务平台的应答消息而自动处理给终端的应答，其他值：表示接入平台需要等待业务平台的应答消息后才给终端应答。
  */
@SerialVersionUID(0L)
final case class EventInfo(
    deviceType: com.chargerlink.gateway.bean.common.DeviceType,
    deviceId: String,
    subDevice: String,
    eventType: com.chargerlink.gateway.bean.common.EventType,
    eventTime: Long,
    eventId: scala.Option[String] = None,
    eventDetail: com.chargerlink.gateway.bean.event.EventInfo.EventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EventInfo] with com.trueaccord.lenses.Updatable[EventInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, deviceType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, deviceId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, subDevice)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, eventType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, eventTime)
      if (eventId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, eventId.get) }
      if (eventDetail.devReportLogin.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devReportLogin.get.serializedSize) + eventDetail.devReportLogin.get.serializedSize }
      if (eventDetail.devReportActivity.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devReportActivity.get.serializedSize) + eventDetail.devReportActivity.get.serializedSize }
      if (eventDetail.devReportFirmware.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devReportFirmware.get.serializedSize) + eventDetail.devReportFirmware.get.serializedSize }
      if (eventDetail.devReportDiag.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devReportDiag.get.serializedSize) + eventDetail.devReportDiag.get.serializedSize }
      if (eventDetail.devCheckRegister.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devCheckRegister.get.serializedSize) + eventDetail.devCheckRegister.get.serializedSize }
      if (eventDetail.devCheckConfig.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devCheckConfig.get.serializedSize) + eventDetail.devCheckConfig.get.serializedSize }
      if (eventDetail.devCheckSiminfo.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devCheckSiminfo.get.serializedSize) + eventDetail.devCheckSiminfo.get.serializedSize }
      if (eventDetail.devCheckBind.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.devCheckBind.get.serializedSize) + eventDetail.devCheckBind.get.serializedSize }
      if (eventDetail.recTrackStart.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.recTrackStart.get.serializedSize) + eventDetail.recTrackStart.get.serializedSize }
      if (eventDetail.recTrackStop.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.recTrackStop.get.serializedSize) + eventDetail.recTrackStop.get.serializedSize }
      if (eventDetail.recMediaUpload.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.recMediaUpload.get.serializedSize) + eventDetail.recMediaUpload.get.serializedSize }
      if (eventDetail.chgChargeStarted.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.chgChargeStarted.get.serializedSize) + eventDetail.chgChargeStarted.get.serializedSize }
      if (eventDetail.chgChargeStopped.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.chgChargeStopped.get.serializedSize) + eventDetail.chgChargeStopped.get.serializedSize }
      if (eventDetail.chgChargeAuth.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.chgChargeAuth.get.serializedSize) + eventDetail.chgChargeAuth.get.serializedSize }
      if (eventDetail.chgChargeProcess.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.chgChargeProcess.get.serializedSize) + eventDetail.chgChargeProcess.get.serializedSize }
      if (eventDetail.chgOrderList.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.chgOrderList.get.serializedSize) + eventDetail.chgOrderList.get.serializedSize }
      if (eventDetail.pkLockerUnlock.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.pkLockerUnlock.get.serializedSize) + eventDetail.pkLockerUnlock.get.serializedSize }
      if (eventDetail.pkLockerLock.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.pkLockerLock.get.serializedSize) + eventDetail.pkLockerLock.get.serializedSize }
      if (eventDetail.pkDetectorFree.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.pkDetectorFree.get.serializedSize) + eventDetail.pkDetectorFree.get.serializedSize }
      if (eventDetail.pkDetectorUsed.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(eventDetail.pkDetectorUsed.get.serializedSize) + eventDetail.pkDetectorUsed.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, deviceType.value)
      _output__.writeString(2, deviceId)
      _output__.writeString(3, subDevice)
      _output__.writeEnum(4, eventType.value)
      _output__.writeInt64(5, eventTime)
      eventId.foreach { __v =>
        _output__.writeString(6, __v)
      };
      eventDetail.devReportLogin.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devReportActivity.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devReportFirmware.foreach { __v =>
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devReportDiag.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devCheckRegister.foreach { __v =>
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devCheckConfig.foreach { __v =>
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devCheckSiminfo.foreach { __v =>
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.devCheckBind.foreach { __v =>
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.recTrackStart.foreach { __v =>
        _output__.writeTag(200, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.recTrackStop.foreach { __v =>
        _output__.writeTag(201, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.recMediaUpload.foreach { __v =>
        _output__.writeTag(202, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.chgChargeStarted.foreach { __v =>
        _output__.writeTag(300, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.chgChargeStopped.foreach { __v =>
        _output__.writeTag(301, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.chgChargeAuth.foreach { __v =>
        _output__.writeTag(302, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.chgChargeProcess.foreach { __v =>
        _output__.writeTag(303, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.chgOrderList.foreach { __v =>
        _output__.writeTag(304, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.pkLockerUnlock.foreach { __v =>
        _output__.writeTag(400, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.pkLockerLock.foreach { __v =>
        _output__.writeTag(401, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.pkDetectorFree.foreach { __v =>
        _output__.writeTag(410, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      eventDetail.pkDetectorUsed.foreach { __v =>
        _output__.writeTag(411, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.EventInfo = {
      var __deviceType = this.deviceType
      var __deviceId = this.deviceId
      var __subDevice = this.subDevice
      var __eventType = this.eventType
      var __eventTime = this.eventTime
      var __eventId = this.eventId
      var __requiredFields0: Long = 0x1fL
      var __eventDetail = this.eventDetail
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __deviceId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __subDevice = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __eventType = com.chargerlink.gateway.bean.common.EventType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __eventTime = _input__.readInt64()
            __requiredFields0 &= 0xffffffffffffffefL
          case 50 =>
            __eventId = Some(_input__.readString())
          case 82 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportLogin(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devReportLogin.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportLogin.defaultInstance)))
          case 90 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportActivity(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devReportActivity.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportActivity.defaultInstance)))
          case 98 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportFirmware(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devReportFirmware.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportFirmware.defaultInstance)))
          case 106 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportDiag(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devReportDiag.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportDiag.defaultInstance)))
          case 162 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckRegister(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devCheckRegister.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckRegister.defaultInstance)))
          case 170 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckConfig(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devCheckConfig.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckConfig.defaultInstance)))
          case 178 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckSiminfo(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devCheckSiminfo.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckSiminfo.defaultInstance)))
          case 186 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckBind(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.devCheckBind.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckBind.defaultInstance)))
          case 1602 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStart(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.recTrackStart.getOrElse(com.chargerlink.gateway.bean.event.EventRecTrackStart.defaultInstance)))
          case 1610 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStop(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.recTrackStop.getOrElse(com.chargerlink.gateway.bean.event.EventRecTrackStop.defaultInstance)))
          case 1618 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecMediaUpload(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.recMediaUpload.getOrElse(com.chargerlink.gateway.bean.event.EventRecMediaUpload.defaultInstance)))
          case 2402 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStarted(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.chgChargeStarted.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeStarted.defaultInstance)))
          case 2410 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStopped(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.chgChargeStopped.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeStopped.defaultInstance)))
          case 2418 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeAuth(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.chgChargeAuth.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeAuth.defaultInstance)))
          case 2426 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeProcess(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.chgChargeProcess.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeProcess.defaultInstance)))
          case 2434 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgOrderList(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.chgOrderList.getOrElse(com.chargerlink.gateway.bean.event.EventChgOrderList.defaultInstance)))
          case 3202 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerUnlock(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.pkLockerUnlock.getOrElse(com.chargerlink.gateway.bean.event.EventPkLockerUnlock.defaultInstance)))
          case 3210 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerLock(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.pkLockerLock.getOrElse(com.chargerlink.gateway.bean.event.EventPkLockerLock.defaultInstance)))
          case 3282 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorFree(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.pkDetectorFree.getOrElse(com.chargerlink.gateway.bean.event.EventPkDetectorFree.defaultInstance)))
          case 3290 =>
            __eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorUsed(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, eventDetail.pkDetectorUsed.getOrElse(com.chargerlink.gateway.bean.event.EventPkDetectorUsed.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.EventInfo(
          deviceType = __deviceType,
          deviceId = __deviceId,
          subDevice = __subDevice,
          eventType = __eventType,
          eventTime = __eventTime,
          eventId = __eventId,
          eventDetail = __eventDetail
      )
    }
    def withDeviceType(__v: com.chargerlink.gateway.bean.common.DeviceType): EventInfo = copy(deviceType = __v)
    def withDeviceId(__v: String): EventInfo = copy(deviceId = __v)
    def withSubDevice(__v: String): EventInfo = copy(subDevice = __v)
    def withEventType(__v: com.chargerlink.gateway.bean.common.EventType): EventInfo = copy(eventType = __v)
    def withEventTime(__v: Long): EventInfo = copy(eventTime = __v)
    def getEventId: String = eventId.getOrElse("")
    def clearEventId: EventInfo = copy(eventId = None)
    def withEventId(__v: String): EventInfo = copy(eventId = Some(__v))
    def getDevReportLogin: com.chargerlink.gateway.bean.event.EventDevReportLogin = eventDetail.devReportLogin.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportLogin.defaultInstance)
    def withDevReportLogin(__v: com.chargerlink.gateway.bean.event.EventDevReportLogin): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportLogin(__v))
    def getDevReportActivity: com.chargerlink.gateway.bean.event.EventDevReportActivity = eventDetail.devReportActivity.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportActivity.defaultInstance)
    def withDevReportActivity(__v: com.chargerlink.gateway.bean.event.EventDevReportActivity): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportActivity(__v))
    def getDevReportFirmware: com.chargerlink.gateway.bean.event.EventDevReportFirmware = eventDetail.devReportFirmware.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportFirmware.defaultInstance)
    def withDevReportFirmware(__v: com.chargerlink.gateway.bean.event.EventDevReportFirmware): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportFirmware(__v))
    def getDevReportDiag: com.chargerlink.gateway.bean.event.EventDevReportDiag = eventDetail.devReportDiag.getOrElse(com.chargerlink.gateway.bean.event.EventDevReportDiag.defaultInstance)
    def withDevReportDiag(__v: com.chargerlink.gateway.bean.event.EventDevReportDiag): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportDiag(__v))
    def getDevCheckRegister: com.chargerlink.gateway.bean.event.EventDevCheckRegister = eventDetail.devCheckRegister.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckRegister.defaultInstance)
    def withDevCheckRegister(__v: com.chargerlink.gateway.bean.event.EventDevCheckRegister): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckRegister(__v))
    def getDevCheckConfig: com.chargerlink.gateway.bean.event.EventDevCheckConfig = eventDetail.devCheckConfig.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckConfig.defaultInstance)
    def withDevCheckConfig(__v: com.chargerlink.gateway.bean.event.EventDevCheckConfig): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckConfig(__v))
    def getDevCheckSiminfo: com.chargerlink.gateway.bean.event.EventDevCheckSiminfo = eventDetail.devCheckSiminfo.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckSiminfo.defaultInstance)
    def withDevCheckSiminfo(__v: com.chargerlink.gateway.bean.event.EventDevCheckSiminfo): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckSiminfo(__v))
    def getDevCheckBind: com.chargerlink.gateway.bean.event.EventDevCheckBind = eventDetail.devCheckBind.getOrElse(com.chargerlink.gateway.bean.event.EventDevCheckBind.defaultInstance)
    def withDevCheckBind(__v: com.chargerlink.gateway.bean.event.EventDevCheckBind): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckBind(__v))
    def getRecTrackStart: com.chargerlink.gateway.bean.event.EventRecTrackStart = eventDetail.recTrackStart.getOrElse(com.chargerlink.gateway.bean.event.EventRecTrackStart.defaultInstance)
    def withRecTrackStart(__v: com.chargerlink.gateway.bean.event.EventRecTrackStart): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStart(__v))
    def getRecTrackStop: com.chargerlink.gateway.bean.event.EventRecTrackStop = eventDetail.recTrackStop.getOrElse(com.chargerlink.gateway.bean.event.EventRecTrackStop.defaultInstance)
    def withRecTrackStop(__v: com.chargerlink.gateway.bean.event.EventRecTrackStop): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStop(__v))
    def getRecMediaUpload: com.chargerlink.gateway.bean.event.EventRecMediaUpload = eventDetail.recMediaUpload.getOrElse(com.chargerlink.gateway.bean.event.EventRecMediaUpload.defaultInstance)
    def withRecMediaUpload(__v: com.chargerlink.gateway.bean.event.EventRecMediaUpload): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecMediaUpload(__v))
    def getChgChargeStarted: com.chargerlink.gateway.bean.event.EventChgChargeStarted = eventDetail.chgChargeStarted.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeStarted.defaultInstance)
    def withChgChargeStarted(__v: com.chargerlink.gateway.bean.event.EventChgChargeStarted): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStarted(__v))
    def getChgChargeStopped: com.chargerlink.gateway.bean.event.EventChgChargeStopped = eventDetail.chgChargeStopped.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeStopped.defaultInstance)
    def withChgChargeStopped(__v: com.chargerlink.gateway.bean.event.EventChgChargeStopped): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStopped(__v))
    def getChgChargeAuth: com.chargerlink.gateway.bean.event.EventChgChargeAuth = eventDetail.chgChargeAuth.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeAuth.defaultInstance)
    def withChgChargeAuth(__v: com.chargerlink.gateway.bean.event.EventChgChargeAuth): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeAuth(__v))
    def getChgChargeProcess: com.chargerlink.gateway.bean.event.EventChgChargeProcess = eventDetail.chgChargeProcess.getOrElse(com.chargerlink.gateway.bean.event.EventChgChargeProcess.defaultInstance)
    def withChgChargeProcess(__v: com.chargerlink.gateway.bean.event.EventChgChargeProcess): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeProcess(__v))
    def getChgOrderList: com.chargerlink.gateway.bean.event.EventChgOrderList = eventDetail.chgOrderList.getOrElse(com.chargerlink.gateway.bean.event.EventChgOrderList.defaultInstance)
    def withChgOrderList(__v: com.chargerlink.gateway.bean.event.EventChgOrderList): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgOrderList(__v))
    def getPkLockerUnlock: com.chargerlink.gateway.bean.event.EventPkLockerUnlock = eventDetail.pkLockerUnlock.getOrElse(com.chargerlink.gateway.bean.event.EventPkLockerUnlock.defaultInstance)
    def withPkLockerUnlock(__v: com.chargerlink.gateway.bean.event.EventPkLockerUnlock): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerUnlock(__v))
    def getPkLockerLock: com.chargerlink.gateway.bean.event.EventPkLockerLock = eventDetail.pkLockerLock.getOrElse(com.chargerlink.gateway.bean.event.EventPkLockerLock.defaultInstance)
    def withPkLockerLock(__v: com.chargerlink.gateway.bean.event.EventPkLockerLock): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerLock(__v))
    def getPkDetectorFree: com.chargerlink.gateway.bean.event.EventPkDetectorFree = eventDetail.pkDetectorFree.getOrElse(com.chargerlink.gateway.bean.event.EventPkDetectorFree.defaultInstance)
    def withPkDetectorFree(__v: com.chargerlink.gateway.bean.event.EventPkDetectorFree): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorFree(__v))
    def getPkDetectorUsed: com.chargerlink.gateway.bean.event.EventPkDetectorUsed = eventDetail.pkDetectorUsed.getOrElse(com.chargerlink.gateway.bean.event.EventPkDetectorUsed.defaultInstance)
    def withPkDetectorUsed(__v: com.chargerlink.gateway.bean.event.EventPkDetectorUsed): EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorUsed(__v))
    def clearEventDetail: EventInfo = copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.Empty)
    def withEventDetail(__v: com.chargerlink.gateway.bean.event.EventInfo.EventDetail): EventInfo = copy(eventDetail = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.javaValueDescriptor
        case 2 => deviceId
        case 3 => subDevice
        case 4 => eventType.javaValueDescriptor
        case 5 => eventTime
        case 6 => eventId.orNull
        case 10 => eventDetail.devReportLogin.orNull
        case 11 => eventDetail.devReportActivity.orNull
        case 12 => eventDetail.devReportFirmware.orNull
        case 13 => eventDetail.devReportDiag.orNull
        case 20 => eventDetail.devCheckRegister.orNull
        case 21 => eventDetail.devCheckConfig.orNull
        case 22 => eventDetail.devCheckSiminfo.orNull
        case 23 => eventDetail.devCheckBind.orNull
        case 200 => eventDetail.recTrackStart.orNull
        case 201 => eventDetail.recTrackStop.orNull
        case 202 => eventDetail.recMediaUpload.orNull
        case 300 => eventDetail.chgChargeStarted.orNull
        case 301 => eventDetail.chgChargeStopped.orNull
        case 302 => eventDetail.chgChargeAuth.orNull
        case 303 => eventDetail.chgChargeProcess.orNull
        case 304 => eventDetail.chgOrderList.orNull
        case 400 => eventDetail.pkLockerUnlock.orNull
        case 401 => eventDetail.pkLockerLock.orNull
        case 410 => eventDetail.pkDetectorFree.orNull
        case 411 => eventDetail.pkDetectorUsed.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(deviceType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(deviceId)
        case 3 => _root_.scalapb.descriptors.PString(subDevice)
        case 4 => _root_.scalapb.descriptors.PEnum(eventType.scalaValueDescriptor)
        case 5 => _root_.scalapb.descriptors.PLong(eventTime)
        case 6 => eventId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => eventDetail.devReportLogin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => eventDetail.devReportActivity.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => eventDetail.devReportFirmware.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => eventDetail.devReportDiag.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => eventDetail.devCheckRegister.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => eventDetail.devCheckConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => eventDetail.devCheckSiminfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => eventDetail.devCheckBind.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 200 => eventDetail.recTrackStart.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 201 => eventDetail.recTrackStop.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 202 => eventDetail.recMediaUpload.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 300 => eventDetail.chgChargeStarted.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 301 => eventDetail.chgChargeStopped.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 302 => eventDetail.chgChargeAuth.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 303 => eventDetail.chgChargeProcess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 304 => eventDetail.chgOrderList.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 400 => eventDetail.pkLockerUnlock.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 401 => eventDetail.pkLockerLock.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 410 => eventDetail.pkDetectorFree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 411 => eventDetail.pkDetectorUsed.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.EventInfo
}

object EventInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.EventInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.EventInfo(
      com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap(__fields.get(2)).asInstanceOf[String],
      com.chargerlink.gateway.bean.common.EventType.fromValue(__fieldsMap(__fields.get(3)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(4)).asInstanceOf[Long],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      eventDetail = __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportLogin]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportLogin) orElse
__fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportActivity]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportActivity) orElse
__fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportFirmware]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportFirmware) orElse
__fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportDiag]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportDiag) orElse
__fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckRegister]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckRegister) orElse
__fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckConfig]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckConfig) orElse
__fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckSiminfo]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckSiminfo) orElse
__fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckBind]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckBind) orElse
__fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStart]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStart) orElse
__fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStop]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStop) orElse
__fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventRecMediaUpload]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecMediaUpload) orElse
__fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStarted]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStarted) orElse
__fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStopped]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStopped) orElse
__fieldsMap.get(__fields.get(19)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeAuth]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeAuth) orElse
__fieldsMap.get(__fields.get(20)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeProcess]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeProcess) orElse
__fieldsMap.get(__fields.get(21)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventChgOrderList]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgOrderList) orElse
__fieldsMap.get(__fields.get(22)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerUnlock]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerUnlock) orElse
__fieldsMap.get(__fields.get(23)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerLock]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerLock) orElse
__fieldsMap.get(__fields.get(24)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorFree]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorFree) orElse
__fieldsMap.get(__fields.get(25)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorUsed]].map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorUsed) getOrElse com.chargerlink.gateway.bean.event.EventInfo.EventDetail.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.EventInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.EventInfo(
        com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[String],
        com.chargerlink.gateway.bean.common.EventType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        eventDetail = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportLogin]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportLogin) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportActivity]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportActivity) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportFirmware]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportFirmware) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevReportDiag]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportDiag) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckRegister]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckRegister) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckConfig]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckConfig) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckSiminfo]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckSiminfo) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckBind]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckBind) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(200).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStart]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStart) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(201).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStop]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStop) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(202).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventRecMediaUpload]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecMediaUpload) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(300).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStarted]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStarted) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(301).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStopped]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStopped) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(302).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeAuth]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeAuth) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(303).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeProcess]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeProcess) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(304).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventChgOrderList]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgOrderList) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(400).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerUnlock]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerUnlock) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(401).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerLock]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerLock) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(410).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorFree]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorFree) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(411).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorUsed]]).map(com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorUsed) getOrElse com.chargerlink.gateway.bean.event.EventInfo.EventDetail.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventBaseProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventBaseProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 10 => __out = com.chargerlink.gateway.bean.event.EventDevReportLogin
      case 11 => __out = com.chargerlink.gateway.bean.event.EventDevReportActivity
      case 12 => __out = com.chargerlink.gateway.bean.event.EventDevReportFirmware
      case 13 => __out = com.chargerlink.gateway.bean.event.EventDevReportDiag
      case 20 => __out = com.chargerlink.gateway.bean.event.EventDevCheckRegister
      case 21 => __out = com.chargerlink.gateway.bean.event.EventDevCheckConfig
      case 22 => __out = com.chargerlink.gateway.bean.event.EventDevCheckSiminfo
      case 23 => __out = com.chargerlink.gateway.bean.event.EventDevCheckBind
      case 200 => __out = com.chargerlink.gateway.bean.event.EventRecTrackStart
      case 201 => __out = com.chargerlink.gateway.bean.event.EventRecTrackStop
      case 202 => __out = com.chargerlink.gateway.bean.event.EventRecMediaUpload
      case 300 => __out = com.chargerlink.gateway.bean.event.EventChgChargeStarted
      case 301 => __out = com.chargerlink.gateway.bean.event.EventChgChargeStopped
      case 302 => __out = com.chargerlink.gateway.bean.event.EventChgChargeAuth
      case 303 => __out = com.chargerlink.gateway.bean.event.EventChgChargeProcess
      case 304 => __out = com.chargerlink.gateway.bean.event.EventChgOrderList
      case 400 => __out = com.chargerlink.gateway.bean.event.EventPkLockerUnlock
      case 401 => __out = com.chargerlink.gateway.bean.event.EventPkLockerLock
      case 410 => __out = com.chargerlink.gateway.bean.event.EventPkDetectorFree
      case 411 => __out = com.chargerlink.gateway.bean.event.EventPkDetectorUsed
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.DeviceType
      case 4 => com.chargerlink.gateway.bean.common.EventType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.EventInfo(
    deviceType = com.chargerlink.gateway.bean.common.DeviceType.DEVICE_VEHICLE_GB_V1,
    deviceId = "",
    subDevice = "",
    eventType = com.chargerlink.gateway.bean.common.EventType.EVENT_DEVICE_REPORT_LOGIN,
    eventTime = 0L
  )
  sealed trait EventDetail extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isDevReportLogin: Boolean = false
    def isDevReportActivity: Boolean = false
    def isDevReportFirmware: Boolean = false
    def isDevReportDiag: Boolean = false
    def isDevCheckRegister: Boolean = false
    def isDevCheckConfig: Boolean = false
    def isDevCheckSiminfo: Boolean = false
    def isDevCheckBind: Boolean = false
    def isRecTrackStart: Boolean = false
    def isRecTrackStop: Boolean = false
    def isRecMediaUpload: Boolean = false
    def isChgChargeStarted: Boolean = false
    def isChgChargeStopped: Boolean = false
    def isChgChargeAuth: Boolean = false
    def isChgChargeProcess: Boolean = false
    def isChgOrderList: Boolean = false
    def isPkLockerUnlock: Boolean = false
    def isPkLockerLock: Boolean = false
    def isPkDetectorFree: Boolean = false
    def isPkDetectorUsed: Boolean = false
    def devReportLogin: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportLogin] = None
    def devReportActivity: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportActivity] = None
    def devReportFirmware: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportFirmware] = None
    def devReportDiag: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportDiag] = None
    def devCheckRegister: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckRegister] = None
    def devCheckConfig: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckConfig] = None
    def devCheckSiminfo: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckSiminfo] = None
    def devCheckBind: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckBind] = None
    def recTrackStart: scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStart] = None
    def recTrackStop: scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStop] = None
    def recMediaUpload: scala.Option[com.chargerlink.gateway.bean.event.EventRecMediaUpload] = None
    def chgChargeStarted: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStarted] = None
    def chgChargeStopped: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStopped] = None
    def chgChargeAuth: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeAuth] = None
    def chgChargeProcess: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeProcess] = None
    def chgOrderList: scala.Option[com.chargerlink.gateway.bean.event.EventChgOrderList] = None
    def pkLockerUnlock: scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerUnlock] = None
    def pkLockerLock: scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerLock] = None
    def pkDetectorFree: scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorFree] = None
    def pkDetectorUsed: scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorUsed] = None
  }
  object EventDetail extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class DevReportLogin(value: com.chargerlink.gateway.bean.event.EventDevReportLogin) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevReportLogin: Boolean = true
      override def devReportLogin: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportLogin] = Some(value)
      override def number: Int = 10
    }
    @SerialVersionUID(0L)
    case class DevReportActivity(value: com.chargerlink.gateway.bean.event.EventDevReportActivity) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevReportActivity: Boolean = true
      override def devReportActivity: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportActivity] = Some(value)
      override def number: Int = 11
    }
    @SerialVersionUID(0L)
    case class DevReportFirmware(value: com.chargerlink.gateway.bean.event.EventDevReportFirmware) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevReportFirmware: Boolean = true
      override def devReportFirmware: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportFirmware] = Some(value)
      override def number: Int = 12
    }
    @SerialVersionUID(0L)
    case class DevReportDiag(value: com.chargerlink.gateway.bean.event.EventDevReportDiag) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevReportDiag: Boolean = true
      override def devReportDiag: scala.Option[com.chargerlink.gateway.bean.event.EventDevReportDiag] = Some(value)
      override def number: Int = 13
    }
    @SerialVersionUID(0L)
    case class DevCheckRegister(value: com.chargerlink.gateway.bean.event.EventDevCheckRegister) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevCheckRegister: Boolean = true
      override def devCheckRegister: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckRegister] = Some(value)
      override def number: Int = 20
    }
    @SerialVersionUID(0L)
    case class DevCheckConfig(value: com.chargerlink.gateway.bean.event.EventDevCheckConfig) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevCheckConfig: Boolean = true
      override def devCheckConfig: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckConfig] = Some(value)
      override def number: Int = 21
    }
    @SerialVersionUID(0L)
    case class DevCheckSiminfo(value: com.chargerlink.gateway.bean.event.EventDevCheckSiminfo) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevCheckSiminfo: Boolean = true
      override def devCheckSiminfo: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckSiminfo] = Some(value)
      override def number: Int = 22
    }
    @SerialVersionUID(0L)
    case class DevCheckBind(value: com.chargerlink.gateway.bean.event.EventDevCheckBind) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isDevCheckBind: Boolean = true
      override def devCheckBind: scala.Option[com.chargerlink.gateway.bean.event.EventDevCheckBind] = Some(value)
      override def number: Int = 23
    }
    @SerialVersionUID(0L)
    case class RecTrackStart(value: com.chargerlink.gateway.bean.event.EventRecTrackStart) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isRecTrackStart: Boolean = true
      override def recTrackStart: scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStart] = Some(value)
      override def number: Int = 200
    }
    @SerialVersionUID(0L)
    case class RecTrackStop(value: com.chargerlink.gateway.bean.event.EventRecTrackStop) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isRecTrackStop: Boolean = true
      override def recTrackStop: scala.Option[com.chargerlink.gateway.bean.event.EventRecTrackStop] = Some(value)
      override def number: Int = 201
    }
    @SerialVersionUID(0L)
    case class RecMediaUpload(value: com.chargerlink.gateway.bean.event.EventRecMediaUpload) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isRecMediaUpload: Boolean = true
      override def recMediaUpload: scala.Option[com.chargerlink.gateway.bean.event.EventRecMediaUpload] = Some(value)
      override def number: Int = 202
    }
    @SerialVersionUID(0L)
    case class ChgChargeStarted(value: com.chargerlink.gateway.bean.event.EventChgChargeStarted) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isChgChargeStarted: Boolean = true
      override def chgChargeStarted: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStarted] = Some(value)
      override def number: Int = 300
    }
    @SerialVersionUID(0L)
    case class ChgChargeStopped(value: com.chargerlink.gateway.bean.event.EventChgChargeStopped) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isChgChargeStopped: Boolean = true
      override def chgChargeStopped: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeStopped] = Some(value)
      override def number: Int = 301
    }
    @SerialVersionUID(0L)
    case class ChgChargeAuth(value: com.chargerlink.gateway.bean.event.EventChgChargeAuth) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isChgChargeAuth: Boolean = true
      override def chgChargeAuth: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeAuth] = Some(value)
      override def number: Int = 302
    }
    @SerialVersionUID(0L)
    case class ChgChargeProcess(value: com.chargerlink.gateway.bean.event.EventChgChargeProcess) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isChgChargeProcess: Boolean = true
      override def chgChargeProcess: scala.Option[com.chargerlink.gateway.bean.event.EventChgChargeProcess] = Some(value)
      override def number: Int = 303
    }
    @SerialVersionUID(0L)
    case class ChgOrderList(value: com.chargerlink.gateway.bean.event.EventChgOrderList) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isChgOrderList: Boolean = true
      override def chgOrderList: scala.Option[com.chargerlink.gateway.bean.event.EventChgOrderList] = Some(value)
      override def number: Int = 304
    }
    @SerialVersionUID(0L)
    case class PkLockerUnlock(value: com.chargerlink.gateway.bean.event.EventPkLockerUnlock) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isPkLockerUnlock: Boolean = true
      override def pkLockerUnlock: scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerUnlock] = Some(value)
      override def number: Int = 400
    }
    @SerialVersionUID(0L)
    case class PkLockerLock(value: com.chargerlink.gateway.bean.event.EventPkLockerLock) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isPkLockerLock: Boolean = true
      override def pkLockerLock: scala.Option[com.chargerlink.gateway.bean.event.EventPkLockerLock] = Some(value)
      override def number: Int = 401
    }
    @SerialVersionUID(0L)
    case class PkDetectorFree(value: com.chargerlink.gateway.bean.event.EventPkDetectorFree) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isPkDetectorFree: Boolean = true
      override def pkDetectorFree: scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorFree] = Some(value)
      override def number: Int = 410
    }
    @SerialVersionUID(0L)
    case class PkDetectorUsed(value: com.chargerlink.gateway.bean.event.EventPkDetectorUsed) extends com.chargerlink.gateway.bean.event.EventInfo.EventDetail {
      override def isPkDetectorUsed: Boolean = true
      override def pkDetectorUsed: scala.Option[com.chargerlink.gateway.bean.event.EventPkDetectorUsed] = Some(value)
      override def number: Int = 411
    }
  }
  implicit class EventInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.EventInfo](_l) {
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.DeviceType] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def subDevice: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.subDevice)((c_, f_) => c_.copy(subDevice = f_))
    def eventType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.EventType] = field(_.eventType)((c_, f_) => c_.copy(eventType = f_))
    def eventTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.eventTime)((c_, f_) => c_.copy(eventTime = f_))
    def eventId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getEventId)((c_, f_) => c_.copy(eventId = Some(f_)))
    def optionalEventId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.eventId)((c_, f_) => c_.copy(eventId = f_))
    def devReportLogin: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportLogin] = field(_.getDevReportLogin)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportLogin(f_)))
    def devReportActivity: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportActivity] = field(_.getDevReportActivity)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportActivity(f_)))
    def devReportFirmware: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportFirmware] = field(_.getDevReportFirmware)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportFirmware(f_)))
    def devReportDiag: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportDiag] = field(_.getDevReportDiag)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevReportDiag(f_)))
    def devCheckRegister: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckRegister] = field(_.getDevCheckRegister)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckRegister(f_)))
    def devCheckConfig: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckConfig] = field(_.getDevCheckConfig)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckConfig(f_)))
    def devCheckSiminfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckSiminfo] = field(_.getDevCheckSiminfo)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckSiminfo(f_)))
    def devCheckBind: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevCheckBind] = field(_.getDevCheckBind)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.DevCheckBind(f_)))
    def recTrackStart: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventRecTrackStart] = field(_.getRecTrackStart)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStart(f_)))
    def recTrackStop: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventRecTrackStop] = field(_.getRecTrackStop)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecTrackStop(f_)))
    def recMediaUpload: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventRecMediaUpload] = field(_.getRecMediaUpload)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.RecMediaUpload(f_)))
    def chgChargeStarted: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeStarted] = field(_.getChgChargeStarted)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStarted(f_)))
    def chgChargeStopped: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeStopped] = field(_.getChgChargeStopped)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeStopped(f_)))
    def chgChargeAuth: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeAuth] = field(_.getChgChargeAuth)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeAuth(f_)))
    def chgChargeProcess: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeProcess] = field(_.getChgChargeProcess)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgChargeProcess(f_)))
    def chgOrderList: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgOrderList] = field(_.getChgOrderList)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.ChgOrderList(f_)))
    def pkLockerUnlock: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventPkLockerUnlock] = field(_.getPkLockerUnlock)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerUnlock(f_)))
    def pkLockerLock: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventPkLockerLock] = field(_.getPkLockerLock)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkLockerLock(f_)))
    def pkDetectorFree: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventPkDetectorFree] = field(_.getPkDetectorFree)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorFree(f_)))
    def pkDetectorUsed: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventPkDetectorUsed] = field(_.getPkDetectorUsed)((c_, f_) => c_.copy(eventDetail = com.chargerlink.gateway.bean.event.EventInfo.EventDetail.PkDetectorUsed(f_)))
    def eventDetail: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventInfo.EventDetail] = field(_.eventDetail)((c_, f_) => c_.copy(eventDetail = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val SUB_DEVICE_FIELD_NUMBER = 3
  final val EVENT_TYPE_FIELD_NUMBER = 4
  final val EVENT_TIME_FIELD_NUMBER = 5
  final val EVENT_ID_FIELD_NUMBER = 6
  final val DEV_REPORT_LOGIN_FIELD_NUMBER = 10
  final val DEV_REPORT_ACTIVITY_FIELD_NUMBER = 11
  final val DEV_REPORT_FIRMWARE_FIELD_NUMBER = 12
  final val DEV_REPORT_DIAG_FIELD_NUMBER = 13
  final val DEV_CHECK_REGISTER_FIELD_NUMBER = 20
  final val DEV_CHECK_CONFIG_FIELD_NUMBER = 21
  final val DEV_CHECK_SIMINFO_FIELD_NUMBER = 22
  final val DEV_CHECK_BIND_FIELD_NUMBER = 23
  final val REC_TRACK_START_FIELD_NUMBER = 200
  final val REC_TRACK_STOP_FIELD_NUMBER = 201
  final val REC_MEDIA_UPLOAD_FIELD_NUMBER = 202
  final val CHG_CHARGE_STARTED_FIELD_NUMBER = 300
  final val CHG_CHARGE_STOPPED_FIELD_NUMBER = 301
  final val CHG_CHARGE_AUTH_FIELD_NUMBER = 302
  final val CHG_CHARGE_PROCESS_FIELD_NUMBER = 303
  final val CHG_ORDER_LIST_FIELD_NUMBER = 304
  final val PK_LOCKER_UNLOCK_FIELD_NUMBER = 400
  final val PK_LOCKER_LOCK_FIELD_NUMBER = 401
  final val PK_DETECTOR_FREE_FIELD_NUMBER = 410
  final val PK_DETECTOR_USED_FIELD_NUMBER = 411
}
