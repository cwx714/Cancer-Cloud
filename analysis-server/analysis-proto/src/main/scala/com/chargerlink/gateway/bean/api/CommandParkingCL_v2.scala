// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.api



/** * ChargeLink公司的车位地锁/车位传感器设备的命令请求的消息定义。
  */
@SerialVersionUID(0L)
final case class CommandParkingCL_v2(
    command: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CommandParkingCL_v2] with com.trueaccord.lenses.Updatable[CommandParkingCL_v2] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (command.remoteControl.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.remoteControl.get.serializedSize) + command.remoteControl.get.serializedSize }
      if (command.setConfig.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.setConfig.get.serializedSize) + command.setConfig.get.serializedSize }
      if (command.getConfig.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.getConfig.get.serializedSize) + command.getConfig.get.serializedSize }
      if (command.updateFirmware.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.updateFirmware.get.serializedSize) + command.updateFirmware.get.serializedSize }
      if (command.triggerWarns.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.triggerWarns.get.serializedSize) + command.triggerWarns.get.serializedSize }
      if (command.triggerDiags.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.triggerDiags.get.serializedSize) + command.triggerDiags.get.serializedSize }
      if (command.triggerMessage.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(command.triggerMessage.get.serializedSize) + command.triggerMessage.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      command.remoteControl.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.setConfig.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.getConfig.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.updateFirmware.foreach { __v =>
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.triggerWarns.foreach { __v =>
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.triggerDiags.foreach { __v =>
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      command.triggerMessage.foreach { __v =>
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2 = {
      var __command = this.command
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 42 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.RemoteControl(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.remoteControl.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl.defaultInstance)))
          case 82 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.SetConfig(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.setConfig.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.defaultInstance)))
          case 90 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.GetConfig(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.getConfig.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig.defaultInstance)))
          case 106 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.UpdateFirmware(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.updateFirmware.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware.defaultInstance)))
          case 170 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerWarns(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.triggerWarns.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns.defaultInstance)))
          case 178 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerDiags(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.triggerDiags.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags.defaultInstance)))
          case 186 =>
            __command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerMessage(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, command.triggerMessage.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2(
          command = __command
      )
    }
    def getRemoteControl: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl = command.remoteControl.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl.defaultInstance)
    def withRemoteControl(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.RemoteControl(__v))
    def getSetConfig: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig = command.setConfig.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.defaultInstance)
    def withSetConfig(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.SetConfig(__v))
    def getGetConfig: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig = command.getConfig.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig.defaultInstance)
    def withGetConfig(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.GetConfig(__v))
    def getUpdateFirmware: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware = command.updateFirmware.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware.defaultInstance)
    def withUpdateFirmware(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.UpdateFirmware(__v))
    def getTriggerWarns: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns = command.triggerWarns.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns.defaultInstance)
    def withTriggerWarns(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerWarns(__v))
    def getTriggerDiags: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags = command.triggerDiags.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags.defaultInstance)
    def withTriggerDiags(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerDiags(__v))
    def getTriggerMessage: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage = command.triggerMessage.getOrElse(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.defaultInstance)
    def withTriggerMessage(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage): CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerMessage(__v))
    def clearCommand: CommandParkingCL_v2 = copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.Empty)
    def withCommand(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command): CommandParkingCL_v2 = copy(command = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 5 => command.remoteControl.orNull
        case 10 => command.setConfig.orNull
        case 11 => command.getConfig.orNull
        case 13 => command.updateFirmware.orNull
        case 21 => command.triggerWarns.orNull
        case 22 => command.triggerDiags.orNull
        case 23 => command.triggerMessage.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 5 => command.remoteControl.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => command.setConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => command.getConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => command.updateFirmware.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => command.triggerWarns.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => command.triggerDiags.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => command.triggerMessage.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2
}

object CommandParkingCL_v2 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.api.CommandParkingCL_v2(
      command = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.RemoteControl) orElse
__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.SetConfig) orElse
__fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.GetConfig) orElse
__fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.UpdateFirmware) orElse
__fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerWarns) orElse
__fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerDiags) orElse
__fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerMessage) getOrElse com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2(
        command = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.RemoteControl) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.SetConfig) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.GetConfig) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.UpdateFirmware) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerWarns) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerDiags) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage]]).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerMessage) getOrElse com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiParkingProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiParkingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl
      case 10 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig
      case 11 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig
      case 13 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware
      case 21 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns
      case 22 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags
      case 23 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2(
  )
  sealed trait Command extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isRemoteControl: Boolean = false
    def isSetConfig: Boolean = false
    def isGetConfig: Boolean = false
    def isUpdateFirmware: Boolean = false
    def isTriggerWarns: Boolean = false
    def isTriggerDiags: Boolean = false
    def isTriggerMessage: Boolean = false
    def remoteControl: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] = None
    def setConfig: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] = None
    def getConfig: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] = None
    def updateFirmware: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] = None
    def triggerWarns: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] = None
    def triggerDiags: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] = None
    def triggerMessage: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] = None
  }
  object Command extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class RemoteControl(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isRemoteControl: Boolean = true
      override def remoteControl: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] = Some(value)
      override def number: Int = 5
    }
    @SerialVersionUID(0L)
    case class SetConfig(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isSetConfig: Boolean = true
      override def setConfig: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] = Some(value)
      override def number: Int = 10
    }
    @SerialVersionUID(0L)
    case class GetConfig(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isGetConfig: Boolean = true
      override def getConfig: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] = Some(value)
      override def number: Int = 11
    }
    @SerialVersionUID(0L)
    case class UpdateFirmware(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isUpdateFirmware: Boolean = true
      override def updateFirmware: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] = Some(value)
      override def number: Int = 13
    }
    @SerialVersionUID(0L)
    case class TriggerWarns(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isTriggerWarns: Boolean = true
      override def triggerWarns: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] = Some(value)
      override def number: Int = 21
    }
    @SerialVersionUID(0L)
    case class TriggerDiags(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isTriggerDiags: Boolean = true
      override def triggerDiags: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] = Some(value)
      override def number: Int = 22
    }
    @SerialVersionUID(0L)
    case class TriggerMessage(value: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage) extends com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command {
      override def isTriggerMessage: Boolean = true
      override def triggerMessage: scala.Option[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] = Some(value)
      override def number: Int = 23
    }
  }
  /** * 设备远程控制命令的消息定义。对应ChargeLink公司的Protobuf协议V1版的Reset.Request、ParkLock.Request消息/V2版的RemoteControlReq消息。
    *
    * @param function
    *  / (必填)远程控制命令名称。其中：命令名称为FunctionName的值对应的字符串。
    * @param parameter
    *  / (可选)远程控制命令参数。
    */
  @SerialVersionUID(0L)
  final case class CmdRemoteControl(
      function: String,
      parameter: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdRemoteControl] with com.trueaccord.lenses.Updatable[CmdRemoteControl] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, function)
        if (parameter.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, parameter.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, function)
        parameter.foreach { __v =>
          _output__.writeString(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl = {
        var __function = this.function
        var __parameter = this.parameter
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __function = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __parameter = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl(
            function = __function,
            parameter = __parameter
        )
      }
      def withFunction(__v: String): CmdRemoteControl = copy(function = __v)
      def getParameter: String = parameter.getOrElse("")
      def clearParameter: CmdRemoteControl = copy(parameter = None)
      def withParameter(__v: String): CmdRemoteControl = copy(parameter = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => function
          case 2 => parameter.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(function)
          case 2 => parameter.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl
  }
  
  object CmdRemoteControl extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl(
      function = ""
    )
    sealed trait FunctionName extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = FunctionName
      def isReset: Boolean = false
      def isUnlockPark: Boolean = false
      def isLockPark: Boolean = false
      def isUpdateSslcert: Boolean = false
      def isChangeAvailability: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FunctionName] = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl.FunctionName
    }
    
    object FunctionName extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FunctionName] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FunctionName] = this
      @SerialVersionUID(0L)
      case object Reset extends FunctionName {
        val value = 1
        val index = 0
        val name = "Reset"
        override def isReset: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object UnlockPark extends FunctionName {
        val value = 5
        val index = 1
        val name = "UnlockPark"
        override def isUnlockPark: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object LockPark extends FunctionName {
        val value = 6
        val index = 2
        val name = "LockPark"
        override def isLockPark: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object UpdateSSLCert extends FunctionName {
        val value = 7
        val index = 3
        val name = "UpdateSSLCert"
        override def isUpdateSslcert: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ChangeAvailability extends FunctionName {
        val value = 8
        val index = 4
        val name = "ChangeAvailability"
        override def isChangeAvailability: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends FunctionName with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(Reset, UnlockPark, LockPark, UpdateSSLCert, ChangeAvailability)
      def fromValue(value: Int): FunctionName = value match {
        case 1 => Reset
        case 5 => UnlockPark
        case 6 => LockPark
        case 7 => UpdateSSLCert
        case 8 => ChangeAvailability
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl.scalaDescriptor.enums(0)
    }
    implicit class CmdRemoteControlLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl](_l) {
      def function: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.function)((c_, f_) => c_.copy(function = f_))
      def parameter: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getParameter)((c_, f_) => c_.copy(parameter = Some(f_)))
      def optionalParameter: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.parameter)((c_, f_) => c_.copy(parameter = f_))
    }
    final val FUNCTION_FIELD_NUMBER = 1
    final val PARAMETER_FIELD_NUMBER = 2
  }
  
  /** * 设置设备配置命令的消息定义。对应ChargeLink公司的Protobuf协议V1版的SetConfiguration.Request消息/V2版的ChangeConfigurationReq消息。
    *
    * @param configList
    *  / (必填)设置的配置参数值列表。格式为：参数名称-&gt;参数值。其中：参数名称为ConfigName的值对应的字符串。
    */
  @SerialVersionUID(0L)
  final case class CmdSetConfig(
      configList: scala.collection.immutable.Map[String, String] = scala.collection.immutable.Map.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdSetConfig] with com.trueaccord.lenses.Updatable[CmdSetConfig] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        configList.foreach(configList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase(configList).serializedSize) + com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase(configList).serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        configList.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase(__v).serializedSize)
          com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase(__v).writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig = {
        val __configList = (scala.collection.immutable.Map.newBuilder[String, String] ++= this.configList)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __configList += com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry.defaultInstance))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig(
            configList = __configList.result()
        )
      }
      def clearConfigList = copy(configList = scala.collection.immutable.Map.empty)
      def addConfigList(__vs: (String, String)*): CmdSetConfig = addAllConfigList(__vs)
      def addAllConfigList(__vs: TraversableOnce[(String, String)]): CmdSetConfig = copy(configList = configList ++ __vs)
      def withConfigList(__v: scala.collection.immutable.Map[String, String]): CmdSetConfig = copy(configList = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => configList.map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase)(_root_.scala.collection.breakOut)
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(configList.map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig
  }
  
  object CmdSetConfig extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry]].map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toCustom)(_root_.scala.collection.breakOut)
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig._typemapper_configList.toCustom)(_root_.scala.collection.breakOut)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig(
    )
    sealed trait ConfigName extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = ConfigName
      def isServerUrl: Boolean = false
      def isUser: Boolean = false
      def isPassword: Boolean = false
      def isAdmPassword: Boolean = false
      def isBmsint: Boolean = false
      def isMeterChgInt: Boolean = false
      def isMeterIdleInt: Boolean = false
      def isHeartbeatInt: Boolean = false
      def isReconnectInt: Boolean = false
      def isBootInt: Boolean = false
      def isSysInt: Boolean = false
      def isSysIdleInt: Boolean = false
      def isElossRatio: Boolean = false
      def isMeterMac1: Boolean = false
      def isMeterMac2: Boolean = false
      def isMeterMac3: Boolean = false
      def isMeterMac4: Boolean = false
      def isMeterNum: Boolean = false
      def isOffLineEnable: Boolean = false
      def isAvailability: Boolean = false
      def isPartNumber: Boolean = false
      def isSerialNumber: Boolean = false
      def isVid: Boolean = false
      def isFwversion: Boolean = false
      def isPtversion: Boolean = false
      def isConNum: Boolean = false
      def isConType: Boolean = false
      def isMac: Boolean = false
      def isSectionPath: Boolean = false
      def isQrcodeHeader: Boolean = false
      def isQrcode: Boolean = false
      def isServiceNumber: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ConfigName] = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigName
    }
    
    object ConfigName extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ConfigName] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ConfigName] = this
      @SerialVersionUID(0L)
      case object ServerUrl extends ConfigName {
        val value = 1
        val index = 0
        val name = "ServerUrl"
        override def isServerUrl: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object User extends ConfigName {
        val value = 2
        val index = 1
        val name = "User"
        override def isUser: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object Password extends ConfigName {
        val value = 3
        val index = 2
        val name = "Password"
        override def isPassword: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object AdmPassword extends ConfigName {
        val value = 4
        val index = 3
        val name = "AdmPassword"
        override def isAdmPassword: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object BMSInt extends ConfigName {
        val value = 5
        val index = 4
        val name = "BMSInt"
        override def isBmsint: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterChgInt extends ConfigName {
        val value = 6
        val index = 5
        val name = "MeterChgInt"
        override def isMeterChgInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterIdleInt extends ConfigName {
        val value = 7
        val index = 6
        val name = "MeterIdleInt"
        override def isMeterIdleInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object HeartbeatInt extends ConfigName {
        val value = 8
        val index = 7
        val name = "HeartbeatInt"
        override def isHeartbeatInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ReconnectInt extends ConfigName {
        val value = 9
        val index = 8
        val name = "ReconnectInt"
        override def isReconnectInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object BootInt extends ConfigName {
        val value = 10
        val index = 9
        val name = "BootInt"
        override def isBootInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SysInt extends ConfigName {
        val value = 11
        val index = 10
        val name = "SysInt"
        override def isSysInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SysIdleInt extends ConfigName {
        val value = 12
        val index = 11
        val name = "SysIdleInt"
        override def isSysIdleInt: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ELossRatio extends ConfigName {
        val value = 13
        val index = 12
        val name = "ELossRatio"
        override def isElossRatio: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterMAC1 extends ConfigName {
        val value = 14
        val index = 13
        val name = "MeterMAC1"
        override def isMeterMac1: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterMAC2 extends ConfigName {
        val value = 15
        val index = 14
        val name = "MeterMAC2"
        override def isMeterMac2: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterMAC3 extends ConfigName {
        val value = 16
        val index = 15
        val name = "MeterMAC3"
        override def isMeterMac3: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterMAC4 extends ConfigName {
        val value = 17
        val index = 16
        val name = "MeterMAC4"
        override def isMeterMac4: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MeterNum extends ConfigName {
        val value = 18
        val index = 17
        val name = "MeterNum"
        override def isMeterNum: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object OffLineEnable extends ConfigName {
        val value = 19
        val index = 18
        val name = "OffLineEnable"
        override def isOffLineEnable: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object Availability extends ConfigName {
        val value = 20
        val index = 19
        val name = "Availability"
        override def isAvailability: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object PartNumber extends ConfigName {
        val value = 21
        val index = 20
        val name = "PartNumber"
        override def isPartNumber: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SerialNumber extends ConfigName {
        val value = 22
        val index = 21
        val name = "SerialNumber"
        override def isSerialNumber: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object VID extends ConfigName {
        val value = 23
        val index = 22
        val name = "VID"
        override def isVid: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object FWVersion extends ConfigName {
        val value = 24
        val index = 23
        val name = "FWVersion"
        override def isFwversion: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object PTVersion extends ConfigName {
        val value = 25
        val index = 24
        val name = "PTVersion"
        override def isPtversion: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ConNum extends ConfigName {
        val value = 26
        val index = 25
        val name = "ConNum"
        override def isConNum: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ConType extends ConfigName {
        val value = 27
        val index = 26
        val name = "ConType"
        override def isConType: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MAC extends ConfigName {
        val value = 28
        val index = 27
        val name = "MAC"
        override def isMac: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SectionPath extends ConfigName {
        val value = 29
        val index = 28
        val name = "SectionPath"
        override def isSectionPath: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object QRCodeHeader extends ConfigName {
        val value = 30
        val index = 29
        val name = "QRCodeHeader"
        override def isQrcodeHeader: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object QRCode extends ConfigName {
        val value = 31
        val index = 30
        val name = "QRCode"
        override def isQrcode: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object ServiceNumber extends ConfigName {
        val value = 32
        val index = 31
        val name = "ServiceNumber"
        override def isServiceNumber: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends ConfigName with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(ServerUrl, User, Password, AdmPassword, BMSInt, MeterChgInt, MeterIdleInt, HeartbeatInt, ReconnectInt, BootInt, SysInt, SysIdleInt, ELossRatio, MeterMAC1, MeterMAC2, MeterMAC3, MeterMAC4, MeterNum, OffLineEnable, Availability, PartNumber, SerialNumber, VID, FWVersion, PTVersion, ConNum, ConType, MAC, SectionPath, QRCodeHeader, QRCode, ServiceNumber)
      def fromValue(value: Int): ConfigName = value match {
        case 1 => ServerUrl
        case 2 => User
        case 3 => Password
        case 4 => AdmPassword
        case 5 => BMSInt
        case 6 => MeterChgInt
        case 7 => MeterIdleInt
        case 8 => HeartbeatInt
        case 9 => ReconnectInt
        case 10 => BootInt
        case 11 => SysInt
        case 12 => SysIdleInt
        case 13 => ELossRatio
        case 14 => MeterMAC1
        case 15 => MeterMAC2
        case 16 => MeterMAC3
        case 17 => MeterMAC4
        case 18 => MeterNum
        case 19 => OffLineEnable
        case 20 => Availability
        case 21 => PartNumber
        case 22 => SerialNumber
        case 23 => VID
        case 24 => FWVersion
        case 25 => PTVersion
        case 26 => ConNum
        case 27 => ConType
        case 28 => MAC
        case 29 => SectionPath
        case 30 => QRCodeHeader
        case 31 => QRCode
        case 32 => ServiceNumber
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.scalaDescriptor.enums(0)
    }
    @SerialVersionUID(0L)
    final case class ConfigListEntry(
        key: scala.Option[String] = None,
        value: scala.Option[String] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ConfigListEntry] with com.trueaccord.lenses.Updatable[ConfigListEntry] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key.get) }
          if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, value.get) }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          key.foreach { __v =>
            _output__.writeString(1, __v)
          };
          value.foreach { __v =>
            _output__.writeString(2, __v)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry = {
          var __key = this.key
          var __value = this.value
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __key = Some(_input__.readString())
              case 18 =>
                __value = Some(_input__.readString())
              case tag => _input__.skipField(tag)
            }
          }
          com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry(
              key = __key,
              value = __value
          )
        }
        def getKey: String = key.getOrElse("")
        def clearKey: ConfigListEntry = copy(key = None)
        def withKey(__v: String): ConfigListEntry = copy(key = Some(__v))
        def getValue: String = value.getOrElse("")
        def clearValue: ConfigListEntry = copy(value = None)
        def withValue(__v: String): ConfigListEntry = copy(value = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => key.orNull
            case 2 => value.orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => key.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => value.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
        def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry
    }
    
    object ConfigListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry(
          __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]])
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry(
      )
      implicit class ConfigListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry](_l) {
        def key: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
        def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.key)((c_, f_) => c_.copy(key = f_))
        def value: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
        def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.value)((c_, f_) => c_.copy(value = f_))
      }
      final val KEY_FIELD_NUMBER = 1
      final val VALUE_FIELD_NUMBER = 2
      implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry, (String, String)] =
        _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry, (String, String)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry(Some(__p._1), Some(__p._2)))
    }
    
    implicit class CmdSetConfigLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig](_l) {
      def configList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[String, String]] = field(_.configList)((c_, f_) => c_.copy(configList = f_))
    }
    final val CONFIG_LIST_FIELD_NUMBER = 1
    @transient
    private val _typemapper_configList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry, (String, String)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig.ConfigListEntry, (String, String)]]
  }
  
  /** * 获取设备配置命令的消息定义。对应ChargeLink公司的Protobuf协议V2版的GetConfigurationReq消息。
    *
    * @param keyList
    *  / (必填)获取的配置参数名称列表。其中：参数名称为ConfigName的值对应的字符串。
    */
  @SerialVersionUID(0L)
  final case class CmdGetConfig(
      keyList: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdGetConfig] with com.trueaccord.lenses.Updatable[CmdGetConfig] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        keyList.foreach(keyList => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, keyList))
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        keyList.foreach { __v =>
          _output__.writeString(1, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig = {
        val __keyList = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.keyList)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __keyList += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig(
            keyList = __keyList.result()
        )
      }
      def clearKeyList = copy(keyList = _root_.scala.collection.Seq.empty)
      def addKeyList(__vs: String*): CmdGetConfig = addAllKeyList(__vs)
      def addAllKeyList(__vs: TraversableOnce[String]): CmdGetConfig = copy(keyList = keyList ++ __vs)
      def withKeyList(__v: _root_.scala.collection.Seq[String]): CmdGetConfig = copy(keyList = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => keyList
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(keyList.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig
  }
  
  object CmdGetConfig extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig(
    )
    implicit class CmdGetConfigLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig](_l) {
      def keyList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.keyList)((c_, f_) => c_.copy(keyList = f_))
    }
    final val KEY_LIST_FIELD_NUMBER = 1
  }
  
  /** * 更新设备固件命令的消息定义。对应ChargeLink公司的Protobuf协议V1版的UpgradeFirmware.Request消息/V2版的UpdateFirmwareReq消息。
    *
    * @param firmwareUrl
    *  / (必填)固件下载地址。
    * @param firmwareMd5
    *  / (必填)固件MD5校验。
    * @param retryCount
    *  / (可选)重试次数。缺省或0：表示一直重试。
    * @param retryInterval
    *  / (可选)重试间隔。单位：1秒。
    * @param downloadTime
    *  / (可选)开始下载时间(北京时间的毫秒时间戳)。单位：毫秒。
    */
  @SerialVersionUID(0L)
  final case class CmdUpdateFirmware(
      firmwareUrl: String,
      firmwareMd5: String,
      retryCount: scala.Option[Int] = None,
      retryInterval: scala.Option[Int] = None,
      downloadTime: scala.Option[Long] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdUpdateFirmware] with com.trueaccord.lenses.Updatable[CmdUpdateFirmware] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, firmwareUrl)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, firmwareMd5)
        if (retryCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, retryCount.get) }
        if (retryInterval.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, retryInterval.get) }
        if (downloadTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, downloadTime.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, firmwareUrl)
        _output__.writeString(2, firmwareMd5)
        retryCount.foreach { __v =>
          _output__.writeUInt32(3, __v)
        };
        retryInterval.foreach { __v =>
          _output__.writeUInt32(4, __v)
        };
        downloadTime.foreach { __v =>
          _output__.writeInt64(5, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware = {
        var __firmwareUrl = this.firmwareUrl
        var __firmwareMd5 = this.firmwareMd5
        var __retryCount = this.retryCount
        var __retryInterval = this.retryInterval
        var __downloadTime = this.downloadTime
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __firmwareUrl = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __firmwareMd5 = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 24 =>
              __retryCount = Some(_input__.readUInt32())
            case 32 =>
              __retryInterval = Some(_input__.readUInt32())
            case 40 =>
              __downloadTime = Some(_input__.readInt64())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware(
            firmwareUrl = __firmwareUrl,
            firmwareMd5 = __firmwareMd5,
            retryCount = __retryCount,
            retryInterval = __retryInterval,
            downloadTime = __downloadTime
        )
      }
      def withFirmwareUrl(__v: String): CmdUpdateFirmware = copy(firmwareUrl = __v)
      def withFirmwareMd5(__v: String): CmdUpdateFirmware = copy(firmwareMd5 = __v)
      def getRetryCount: Int = retryCount.getOrElse(0)
      def clearRetryCount: CmdUpdateFirmware = copy(retryCount = None)
      def withRetryCount(__v: Int): CmdUpdateFirmware = copy(retryCount = Some(__v))
      def getRetryInterval: Int = retryInterval.getOrElse(0)
      def clearRetryInterval: CmdUpdateFirmware = copy(retryInterval = None)
      def withRetryInterval(__v: Int): CmdUpdateFirmware = copy(retryInterval = Some(__v))
      def getDownloadTime: Long = downloadTime.getOrElse(0L)
      def clearDownloadTime: CmdUpdateFirmware = copy(downloadTime = None)
      def withDownloadTime(__v: Long): CmdUpdateFirmware = copy(downloadTime = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => firmwareUrl
          case 2 => firmwareMd5
          case 3 => retryCount.orNull
          case 4 => retryInterval.orNull
          case 5 => downloadTime.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(firmwareUrl)
          case 2 => _root_.scalapb.descriptors.PString(firmwareMd5)
          case 3 => retryCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => retryInterval.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => downloadTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware
  }
  
  object CmdUpdateFirmware extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap(__fields.get(1)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware(
      firmwareUrl = "",
      firmwareMd5 = ""
    )
    implicit class CmdUpdateFirmwareLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware](_l) {
      def firmwareUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.firmwareUrl)((c_, f_) => c_.copy(firmwareUrl = f_))
      def firmwareMd5: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.firmwareMd5)((c_, f_) => c_.copy(firmwareMd5 = f_))
      def retryCount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getRetryCount)((c_, f_) => c_.copy(retryCount = Some(f_)))
      def optionalRetryCount: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.retryCount)((c_, f_) => c_.copy(retryCount = f_))
      def retryInterval: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getRetryInterval)((c_, f_) => c_.copy(retryInterval = Some(f_)))
      def optionalRetryInterval: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.retryInterval)((c_, f_) => c_.copy(retryInterval = f_))
      def downloadTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDownloadTime)((c_, f_) => c_.copy(downloadTime = Some(f_)))
      def optionalDownloadTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.downloadTime)((c_, f_) => c_.copy(downloadTime = f_))
    }
    final val FIRMWARE_URL_FIELD_NUMBER = 1
    final val FIRMWARE_MD5_FIELD_NUMBER = 2
    final val RETRY_COUNT_FIELD_NUMBER = 3
    final val RETRY_INTERVAL_FIELD_NUMBER = 4
    final val DOWNLOAD_TIME_FIELD_NUMBER = 5
  }
  
  /** * 获取设备告警记录命令的消息定义。对应ChargeLink公司的Protobuf协议V2版的GetWarningReq消息。
    *
    * @param compType
    *  / (可选)指定组件类型。null：返回所有类型的告警记录。
    * @param alarmLevel
    *  / (可选)指定返回告警记录的告警等级。null：返回所有级别的告警记录。
    * @param startTime
    *  / (可选)指定返回告警记录的开始时间(北京时间的毫秒时间戳)。单位：毫秒。null：从最早的告警记录开始返回。
    * @param stopTime
    *  / (可选)指定返回告警记录的结束时间(北京时间的毫秒时间戳)。单位：毫秒。null：返回后续全部告警记录。
    * @param offset
    *  / (可选)指定返回告警记录的偏移量(相对于开始/结束数据之间的记录)。null：从第1个告警记录开始返回。
    * @param count
    *  / (可选)指定返回告警记录的总数量。null：返回全部告警数据。
    * @param size
    *  / (可选)指定每次返回的告警记录数量。null：1次返回全部告警记录。
    */
  @SerialVersionUID(0L)
  final case class CmdTriggerWarns(
      compType: scala.Option[com.chargerlink.gateway.bean.common.PkDeviceType] = None,
      alarmLevel: scala.Option[com.chargerlink.gateway.bean.common.PkAlarmLevel] = None,
      startTime: scala.Option[Long] = None,
      stopTime: scala.Option[Long] = None,
      offset: scala.Option[Int] = None,
      count: scala.Option[Int] = None,
      size: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdTriggerWarns] with com.trueaccord.lenses.Updatable[CmdTriggerWarns] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (compType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, compType.get.value) }
        if (alarmLevel.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, alarmLevel.get.value) }
        if (startTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, startTime.get) }
        if (stopTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, stopTime.get) }
        if (offset.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, offset.get) }
        if (count.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, count.get) }
        if (size.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, size.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        compType.foreach { __v =>
          _output__.writeEnum(1, __v.value)
        };
        alarmLevel.foreach { __v =>
          _output__.writeEnum(2, __v.value)
        };
        startTime.foreach { __v =>
          _output__.writeInt64(3, __v)
        };
        stopTime.foreach { __v =>
          _output__.writeInt64(4, __v)
        };
        offset.foreach { __v =>
          _output__.writeInt32(5, __v)
        };
        count.foreach { __v =>
          _output__.writeInt32(6, __v)
        };
        size.foreach { __v =>
          _output__.writeInt32(7, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns = {
        var __compType = this.compType
        var __alarmLevel = this.alarmLevel
        var __startTime = this.startTime
        var __stopTime = this.stopTime
        var __offset = this.offset
        var __count = this.count
        var __size = this.size
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __compType = Some(com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(_input__.readEnum()))
            case 16 =>
              __alarmLevel = Some(com.chargerlink.gateway.bean.common.PkAlarmLevel.fromValue(_input__.readEnum()))
            case 24 =>
              __startTime = Some(_input__.readInt64())
            case 32 =>
              __stopTime = Some(_input__.readInt64())
            case 40 =>
              __offset = Some(_input__.readInt32())
            case 48 =>
              __count = Some(_input__.readInt32())
            case 56 =>
              __size = Some(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns(
            compType = __compType,
            alarmLevel = __alarmLevel,
            startTime = __startTime,
            stopTime = __stopTime,
            offset = __offset,
            count = __count,
            size = __size
        )
      }
      def getCompType: com.chargerlink.gateway.bean.common.PkDeviceType = compType.getOrElse(com.chargerlink.gateway.bean.common.PkDeviceType.PK_DEVICE_NONE)
      def clearCompType: CmdTriggerWarns = copy(compType = None)
      def withCompType(__v: com.chargerlink.gateway.bean.common.PkDeviceType): CmdTriggerWarns = copy(compType = Some(__v))
      def getAlarmLevel: com.chargerlink.gateway.bean.common.PkAlarmLevel = alarmLevel.getOrElse(com.chargerlink.gateway.bean.common.PkAlarmLevel.PK_ALARM_LEVEL_CRITICAL)
      def clearAlarmLevel: CmdTriggerWarns = copy(alarmLevel = None)
      def withAlarmLevel(__v: com.chargerlink.gateway.bean.common.PkAlarmLevel): CmdTriggerWarns = copy(alarmLevel = Some(__v))
      def getStartTime: Long = startTime.getOrElse(0L)
      def clearStartTime: CmdTriggerWarns = copy(startTime = None)
      def withStartTime(__v: Long): CmdTriggerWarns = copy(startTime = Some(__v))
      def getStopTime: Long = stopTime.getOrElse(0L)
      def clearStopTime: CmdTriggerWarns = copy(stopTime = None)
      def withStopTime(__v: Long): CmdTriggerWarns = copy(stopTime = Some(__v))
      def getOffset: Int = offset.getOrElse(0)
      def clearOffset: CmdTriggerWarns = copy(offset = None)
      def withOffset(__v: Int): CmdTriggerWarns = copy(offset = Some(__v))
      def getCount: Int = count.getOrElse(0)
      def clearCount: CmdTriggerWarns = copy(count = None)
      def withCount(__v: Int): CmdTriggerWarns = copy(count = Some(__v))
      def getSize: Int = size.getOrElse(0)
      def clearSize: CmdTriggerWarns = copy(size = None)
      def withSize(__v: Int): CmdTriggerWarns = copy(size = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => compType.map(_.javaValueDescriptor).orNull
          case 2 => alarmLevel.map(_.javaValueDescriptor).orNull
          case 3 => startTime.orNull
          case 4 => stopTime.orNull
          case 5 => offset.orNull
          case 6 => count.orNull
          case 7 => size.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => compType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => alarmLevel.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => startTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => stopTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => offset.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => count.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => size.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns
  }
  
  object CmdTriggerWarns extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.PkAlarmLevel.fromValue(__e.getNumber)),
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.PkAlarmLevel.fromValue(__e.number)),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.chargerlink.gateway.bean.common.PkDeviceType
        case 2 => com.chargerlink.gateway.bean.common.PkAlarmLevel
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns(
    )
    implicit class CmdTriggerWarnsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns](_l) {
      def compType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.PkDeviceType] = field(_.getCompType)((c_, f_) => c_.copy(compType = Some(f_)))
      def optionalCompType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.PkDeviceType]] = field(_.compType)((c_, f_) => c_.copy(compType = f_))
      def alarmLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.PkAlarmLevel] = field(_.getAlarmLevel)((c_, f_) => c_.copy(alarmLevel = Some(f_)))
      def optionalAlarmLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.PkAlarmLevel]] = field(_.alarmLevel)((c_, f_) => c_.copy(alarmLevel = f_))
      def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStartTime)((c_, f_) => c_.copy(startTime = Some(f_)))
      def optionalStartTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
      def stopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStopTime)((c_, f_) => c_.copy(stopTime = Some(f_)))
      def optionalStopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stopTime)((c_, f_) => c_.copy(stopTime = f_))
      def offset: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getOffset)((c_, f_) => c_.copy(offset = Some(f_)))
      def optionalOffset: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
      def count: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCount)((c_, f_) => c_.copy(count = Some(f_)))
      def optionalCount: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.count)((c_, f_) => c_.copy(count = f_))
      def size: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSize)((c_, f_) => c_.copy(size = Some(f_)))
      def optionalSize: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.size)((c_, f_) => c_.copy(size = f_))
    }
    final val COMP_TYPE_FIELD_NUMBER = 1
    final val ALARM_LEVEL_FIELD_NUMBER = 2
    final val START_TIME_FIELD_NUMBER = 3
    final val STOP_TIME_FIELD_NUMBER = 4
    final val OFFSET_FIELD_NUMBER = 5
    final val COUNT_FIELD_NUMBER = 6
    final val SIZE_FIELD_NUMBER = 7
  }
  
  /** * 获取设备诊断日志命令的消息定义。对应ChargeLink公司的Protobuf协议V2版的GetDiagnosticsReq消息。
    *
    * @param uploadUrl
    *  / (必填)日志上传FTP服务器地址。
    * @param retryCount
    *  / (可选)日志上传失败重试次数。
    * @param retryInterval
    *  / (可选)日志上传失败重试间隔时间。单位：1秒。
    * @param startTime
    *  / (可选)指定返回日志记录的开始时间(北京时间的毫秒时间戳)。单位：毫秒。null：从最早的日志记录开始返回。
    * @param stopTime
    *  / (可选)指定返回日志记录的结束时间(北京时间的毫秒时间戳)。单位：毫秒。null：返回后续全部日志记录。
    */
  @SerialVersionUID(0L)
  final case class CmdTriggerDiags(
      uploadUrl: String,
      retryCount: scala.Option[Int] = None,
      retryInterval: scala.Option[Int] = None,
      startTime: scala.Option[Long] = None,
      stopTime: scala.Option[Long] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdTriggerDiags] with com.trueaccord.lenses.Updatable[CmdTriggerDiags] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, uploadUrl)
        if (retryCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, retryCount.get) }
        if (retryInterval.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, retryInterval.get) }
        if (startTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, startTime.get) }
        if (stopTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, stopTime.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeString(1, uploadUrl)
        retryCount.foreach { __v =>
          _output__.writeUInt32(2, __v)
        };
        retryInterval.foreach { __v =>
          _output__.writeUInt32(3, __v)
        };
        startTime.foreach { __v =>
          _output__.writeInt64(4, __v)
        };
        stopTime.foreach { __v =>
          _output__.writeInt64(5, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags = {
        var __uploadUrl = this.uploadUrl
        var __retryCount = this.retryCount
        var __retryInterval = this.retryInterval
        var __startTime = this.startTime
        var __stopTime = this.stopTime
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __uploadUrl = _input__.readString()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __retryCount = Some(_input__.readUInt32())
            case 24 =>
              __retryInterval = Some(_input__.readUInt32())
            case 32 =>
              __startTime = Some(_input__.readInt64())
            case 40 =>
              __stopTime = Some(_input__.readInt64())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags(
            uploadUrl = __uploadUrl,
            retryCount = __retryCount,
            retryInterval = __retryInterval,
            startTime = __startTime,
            stopTime = __stopTime
        )
      }
      def withUploadUrl(__v: String): CmdTriggerDiags = copy(uploadUrl = __v)
      def getRetryCount: Int = retryCount.getOrElse(0)
      def clearRetryCount: CmdTriggerDiags = copy(retryCount = None)
      def withRetryCount(__v: Int): CmdTriggerDiags = copy(retryCount = Some(__v))
      def getRetryInterval: Int = retryInterval.getOrElse(0)
      def clearRetryInterval: CmdTriggerDiags = copy(retryInterval = None)
      def withRetryInterval(__v: Int): CmdTriggerDiags = copy(retryInterval = Some(__v))
      def getStartTime: Long = startTime.getOrElse(0L)
      def clearStartTime: CmdTriggerDiags = copy(startTime = None)
      def withStartTime(__v: Long): CmdTriggerDiags = copy(startTime = Some(__v))
      def getStopTime: Long = stopTime.getOrElse(0L)
      def clearStopTime: CmdTriggerDiags = copy(stopTime = None)
      def withStopTime(__v: Long): CmdTriggerDiags = copy(stopTime = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => uploadUrl
          case 2 => retryCount.orNull
          case 3 => retryInterval.orNull
          case 4 => startTime.orNull
          case 5 => stopTime.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(uploadUrl)
          case 2 => retryCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => retryInterval.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => startTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => stopTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags
  }
  
  object CmdTriggerDiags extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags(
        __fieldsMap(__fields.get(0)).asInstanceOf[String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags(
      uploadUrl = ""
    )
    implicit class CmdTriggerDiagsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags](_l) {
      def uploadUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.uploadUrl)((c_, f_) => c_.copy(uploadUrl = f_))
      def retryCount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getRetryCount)((c_, f_) => c_.copy(retryCount = Some(f_)))
      def optionalRetryCount: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.retryCount)((c_, f_) => c_.copy(retryCount = f_))
      def retryInterval: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getRetryInterval)((c_, f_) => c_.copy(retryInterval = Some(f_)))
      def optionalRetryInterval: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.retryInterval)((c_, f_) => c_.copy(retryInterval = f_))
      def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStartTime)((c_, f_) => c_.copy(startTime = Some(f_)))
      def optionalStartTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
      def stopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStopTime)((c_, f_) => c_.copy(stopTime = Some(f_)))
      def optionalStopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stopTime)((c_, f_) => c_.copy(stopTime = f_))
    }
    final val UPLOAD_URL_FIELD_NUMBER = 1
    final val RETRY_COUNT_FIELD_NUMBER = 2
    final val RETRY_INTERVAL_FIELD_NUMBER = 3
    final val START_TIME_FIELD_NUMBER = 4
    final val STOP_TIME_FIELD_NUMBER = 5
  }
  
  /** * 触发设备消息重发命令的消息定义。对应ChargeLink公司的Protobuf协议V2版的TriggerMessageReq消息。
    *
    * @param requestMsg
    *  / (必填)请求重发的消息代码。
    */
  @SerialVersionUID(0L)
  final case class CmdTriggerMessage(
      requestMsg: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[CmdTriggerMessage] with com.trueaccord.lenses.Updatable[CmdTriggerMessage] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, requestMsg.value)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeEnum(1, requestMsg.value)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage = {
        var __requestMsg = this.requestMsg
        var __requiredFields0: Long = 0x1L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __requestMsg = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType.fromValue(_input__.readEnum())
              __requiredFields0 &= 0xfffffffffffffffeL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage(
            requestMsg = __requestMsg
        )
      }
      def withRequestMsg(__v: com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType): CmdTriggerMessage = copy(requestMsg = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => requestMsg.javaValueDescriptor
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(requestMsg.scalaValueDescriptor)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage
  }
  
  object CmdTriggerMessage extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage(
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage(
          com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.javaDescriptor.getNestedTypes.get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage(
      requestMsg = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType.MESSAGE_BOOT_NOTIFICATION_REQ
    )
    sealed trait MessageType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
      type EnumType = MessageType
      def isMessageBootNotificationReq: Boolean = false
      def isMessageHeartbeatReq: Boolean = false
      def isMessageFirmwareStatusNotificationReq: Boolean = false
      def isMessageDiagnosticsStatusNotificationReq: Boolean = false
      def isMessageSystemTelemetryReq: Boolean = false
      def isMessageDeviceReportReq: Boolean = false
      def isMessageWarningListReq: Boolean = false
      def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[MessageType] = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType
    }
    
    object MessageType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[MessageType] {
      implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[MessageType] = this
      @SerialVersionUID(0L)
      case object MESSAGE_BOOT_NOTIFICATION_REQ extends MessageType {
        val value = 1
        val index = 0
        val name = "MESSAGE_BOOT_NOTIFICATION_REQ"
        override def isMessageBootNotificationReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_HEARTBEAT_REQ extends MessageType {
        val value = 2
        val index = 1
        val name = "MESSAGE_HEARTBEAT_REQ"
        override def isMessageHeartbeatReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_FIRMWARE_STATUS_NOTIFICATION_REQ extends MessageType {
        val value = 7
        val index = 2
        val name = "MESSAGE_FIRMWARE_STATUS_NOTIFICATION_REQ"
        override def isMessageFirmwareStatusNotificationReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_DIAGNOSTICS_STATUS_NOTIFICATION_REQ extends MessageType {
        val value = 9
        val index = 3
        val name = "MESSAGE_DIAGNOSTICS_STATUS_NOTIFICATION_REQ"
        override def isMessageDiagnosticsStatusNotificationReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_SYSTEM_TELEMETRY_REQ extends MessageType {
        val value = 33
        val index = 4
        val name = "MESSAGE_SYSTEM_TELEMETRY_REQ"
        override def isMessageSystemTelemetryReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_DEVICE_REPORT_REQ extends MessageType {
        val value = 34
        val index = 5
        val name = "MESSAGE_DEVICE_REPORT_REQ"
        override def isMessageDeviceReportReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MESSAGE_WARNING_LIST_REQ extends MessageType {
        val value = 51
        val index = 6
        val name = "MESSAGE_WARNING_LIST_REQ"
        override def isMessageWarningListReq: Boolean = true
      }
      
      @SerialVersionUID(0L)
      case class Unrecognized(value: Int) extends MessageType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
      
      lazy val values = scala.collection.Seq(MESSAGE_BOOT_NOTIFICATION_REQ, MESSAGE_HEARTBEAT_REQ, MESSAGE_FIRMWARE_STATUS_NOTIFICATION_REQ, MESSAGE_DIAGNOSTICS_STATUS_NOTIFICATION_REQ, MESSAGE_SYSTEM_TELEMETRY_REQ, MESSAGE_DEVICE_REPORT_REQ, MESSAGE_WARNING_LIST_REQ)
      def fromValue(value: Int): MessageType = value match {
        case 1 => MESSAGE_BOOT_NOTIFICATION_REQ
        case 2 => MESSAGE_HEARTBEAT_REQ
        case 7 => MESSAGE_FIRMWARE_STATUS_NOTIFICATION_REQ
        case 9 => MESSAGE_DIAGNOSTICS_STATUS_NOTIFICATION_REQ
        case 33 => MESSAGE_SYSTEM_TELEMETRY_REQ
        case 34 => MESSAGE_DEVICE_REPORT_REQ
        case 51 => MESSAGE_WARNING_LIST_REQ
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.javaDescriptor.getEnumTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.scalaDescriptor.enums(0)
    }
    implicit class CmdTriggerMessageLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage](_l) {
      def requestMsg: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage.MessageType] = field(_.requestMsg)((c_, f_) => c_.copy(requestMsg = f_))
    }
    final val REQUEST_MSG_FIELD_NUMBER = 1
  }
  
  implicit class CommandParkingCL_v2Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2](_l) {
    def remoteControl: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdRemoteControl] = field(_.getRemoteControl)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.RemoteControl(f_)))
    def setConfig: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdSetConfig] = field(_.getSetConfig)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.SetConfig(f_)))
    def getConfig: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdGetConfig] = field(_.getGetConfig)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.GetConfig(f_)))
    def updateFirmware: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdUpdateFirmware] = field(_.getUpdateFirmware)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.UpdateFirmware(f_)))
    def triggerWarns: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerWarns] = field(_.getTriggerWarns)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerWarns(f_)))
    def triggerDiags: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerDiags] = field(_.getTriggerDiags)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerDiags(f_)))
    def triggerMessage: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.CmdTriggerMessage] = field(_.getTriggerMessage)((c_, f_) => c_.copy(command = com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command.TriggerMessage(f_)))
    def command: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.CommandParkingCL_v2.Command] = field(_.command)((c_, f_) => c_.copy(command = f_))
  }
  final val REMOTE_CONTROL_FIELD_NUMBER = 5
  final val SET_CONFIG_FIELD_NUMBER = 10
  final val GET_CONFIG_FIELD_NUMBER = 11
  final val UPDATE_FIRMWARE_FIELD_NUMBER = 13
  final val TRIGGER_WARNS_FIELD_NUMBER = 21
  final val TRIGGER_DIAGS_FIELD_NUMBER = 22
  final val TRIGGER_MESSAGE_FIELD_NUMBER = 23
}
