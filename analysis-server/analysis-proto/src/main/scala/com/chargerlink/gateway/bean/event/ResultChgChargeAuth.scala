// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 充电桩TCU设备充电鉴权事件应答的消息定义。其中：event_id为请求消息的消息头的消息序列号。
  *
  * @param authStatus
  *  / (可选)业务系统返回的鉴权结果。
  * @param priceScheme
  *  / (可选)业务系统返回的价格模板。
  */
@SerialVersionUID(0L)
final case class ResultChgChargeAuth(
    authStatus: scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth] = None,
    priceScheme: scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResultChgChargeAuth] with com.trueaccord.lenses.Updatable[ResultChgChargeAuth] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (authStatus.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(authStatus.get.serializedSize) + authStatus.get.serializedSize }
      if (priceScheme.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(priceScheme.get.serializedSize) + priceScheme.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      authStatus.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      priceScheme.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.ResultChgChargeAuth = {
      var __authStatus = this.authStatus
      var __priceScheme = this.priceScheme
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __authStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __authStatus.getOrElse(com.chargerlink.gateway.bean.data.DataChgAuth.defaultInstance)))
          case 18 =>
            __priceScheme = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __priceScheme.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.event.ResultChgChargeAuth(
          authStatus = __authStatus,
          priceScheme = __priceScheme
      )
    }
    def getAuthStatus: com.chargerlink.gateway.bean.data.DataChgAuth = authStatus.getOrElse(com.chargerlink.gateway.bean.data.DataChgAuth.defaultInstance)
    def clearAuthStatus: ResultChgChargeAuth = copy(authStatus = None)
    def withAuthStatus(__v: com.chargerlink.gateway.bean.data.DataChgAuth): ResultChgChargeAuth = copy(authStatus = Some(__v))
    def getPriceScheme: com.chargerlink.gateway.bean.data.DataChgPriceScheme = priceScheme.getOrElse(com.chargerlink.gateway.bean.data.DataChgPriceScheme.defaultInstance)
    def clearPriceScheme: ResultChgChargeAuth = copy(priceScheme = None)
    def withPriceScheme(__v: com.chargerlink.gateway.bean.data.DataChgPriceScheme): ResultChgChargeAuth = copy(priceScheme = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => authStatus.orNull
        case 2 => priceScheme.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => authStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => priceScheme.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.ResultChgChargeAuth
}

object ResultChgChargeAuth extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeAuth] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeAuth] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.ResultChgChargeAuth = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.ResultChgChargeAuth(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.ResultChgChargeAuth] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.ResultChgChargeAuth(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventChargerProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventChargerProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgAuth
      case 2 => __out = com.chargerlink.gateway.bean.data.DataChgPriceScheme
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.ResultChgChargeAuth(
  )
  implicit class ResultChgChargeAuthLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeAuth]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeAuth](_l) {
    def authStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgAuth] = field(_.getAuthStatus)((c_, f_) => c_.copy(authStatus = Some(f_)))
    def optionalAuthStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]] = field(_.authStatus)((c_, f_) => c_.copy(authStatus = f_))
    def priceScheme: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgPriceScheme] = field(_.getPriceScheme)((c_, f_) => c_.copy(priceScheme = Some(f_)))
    def optionalPriceScheme: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgPriceScheme]] = field(_.priceScheme)((c_, f_) => c_.copy(priceScheme = f_))
  }
  final val AUTH_STATUS_FIELD_NUMBER = 1
  final val PRICE_SCHEME_FIELD_NUMBER = 2
}
