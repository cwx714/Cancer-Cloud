// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 当前充电订单的用户信息的消息定义。只有当前充电桩处于充电状态时数据才有效。
  *
  * @param userId
  *  / (必填)用户身份识别号。如：充电卡号、用户ID等。
  * @param userType
  *  / (可选)用户身份类型。
  * @param userPass
  *  / (可选)用户身份密码。为防止用户密码泄露，建议密码采用MD5或加密。
  */
@SerialVersionUID(0L)
final case class DataChgUser(
    userId: String,
    userType: scala.Option[com.chargerlink.gateway.bean.common.ChgUserType] = None,
    userPass: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgUser] with com.trueaccord.lenses.Updatable[DataChgUser] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, userId)
      if (userType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, userType.get.value) }
      if (userPass.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, userPass.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, userId)
      userType.foreach { __v =>
        _output__.writeEnum(2, __v.value)
      };
      userPass.foreach { __v =>
        _output__.writeString(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgUser = {
      var __userId = this.userId
      var __userType = this.userType
      var __userPass = this.userPass
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __userType = Some(com.chargerlink.gateway.bean.common.ChgUserType.fromValue(_input__.readEnum()))
          case 26 =>
            __userPass = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataChgUser(
          userId = __userId,
          userType = __userType,
          userPass = __userPass
      )
    }
    def withUserId(__v: String): DataChgUser = copy(userId = __v)
    def getUserType: com.chargerlink.gateway.bean.common.ChgUserType = userType.getOrElse(com.chargerlink.gateway.bean.common.ChgUserType.CHG_USER_CHARGE_CARD)
    def clearUserType: DataChgUser = copy(userType = None)
    def withUserType(__v: com.chargerlink.gateway.bean.common.ChgUserType): DataChgUser = copy(userType = Some(__v))
    def getUserPass: String = userPass.getOrElse("")
    def clearUserPass: DataChgUser = copy(userPass = None)
    def withUserPass(__v: String): DataChgUser = copy(userPass = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => userId
        case 2 => userType.map(_.javaValueDescriptor).orNull
        case 3 => userPass.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(userId)
        case 2 => userType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => userPass.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgUser
}

object DataChgUser extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgUser] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgUser] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgUser = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgUser(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgUserType.fromValue(__e.getNumber)),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgUser] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgUser(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgUserType.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => com.chargerlink.gateway.bean.common.ChgUserType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgUser(
    userId = ""
  )
  implicit class DataChgUserLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgUser]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgUser](_l) {
    def userId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def userType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgUserType] = field(_.getUserType)((c_, f_) => c_.copy(userType = Some(f_)))
    def optionalUserType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgUserType]] = field(_.userType)((c_, f_) => c_.copy(userType = f_))
    def userPass: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getUserPass)((c_, f_) => c_.copy(userPass = Some(f_)))
    def optionalUserPass: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.userPass)((c_, f_) => c_.copy(userPass = f_))
  }
  final val USER_ID_FIELD_NUMBER = 1
  final val USER_TYPE_FIELD_NUMBER = 2
  final val USER_PASS_FIELD_NUMBER = 3
}
