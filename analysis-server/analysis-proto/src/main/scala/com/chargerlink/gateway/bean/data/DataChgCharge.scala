// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 当前充电车辆数据的消息定义。只有当前充电桩处于充电状态时数据才有效。
  *
  * @param chargeHandshake
  *  / (可选)充电握手阶段信息。
  * @param chargeConfig
  *  / (可选)充电配置阶段信息。
  * @param chargeProcess
  *  / (可选)充电进行阶段信息。
  * @param chargeStop
  *  / (可选)充电结束阶段信息。
  */
@SerialVersionUID(0L)
final case class DataChgCharge(
    chargeHandshake: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo] = None,
    chargeConfig: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo] = None,
    chargeProcess: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo] = None,
    chargeStop: scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgCharge] with com.trueaccord.lenses.Updatable[DataChgCharge] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (chargeHandshake.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(chargeHandshake.get.serializedSize) + chargeHandshake.get.serializedSize }
      if (chargeConfig.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(chargeConfig.get.serializedSize) + chargeConfig.get.serializedSize }
      if (chargeProcess.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(chargeProcess.get.serializedSize) + chargeProcess.get.serializedSize }
      if (chargeStop.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(chargeStop.get.serializedSize) + chargeStop.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      chargeHandshake.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      chargeConfig.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      chargeProcess.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      chargeStop.foreach { __v =>
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgCharge = {
      var __chargeHandshake = this.chargeHandshake
      var __chargeConfig = this.chargeConfig
      var __chargeProcess = this.chargeProcess
      var __chargeStop = this.chargeStop
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __chargeHandshake = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __chargeHandshake.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo.defaultInstance)))
          case 18 =>
            __chargeConfig = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __chargeConfig.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo.defaultInstance)))
          case 26 =>
            __chargeProcess = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __chargeProcess.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo.defaultInstance)))
          case 34 =>
            __chargeStop = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __chargeStop.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.data.DataChgCharge(
          chargeHandshake = __chargeHandshake,
          chargeConfig = __chargeConfig,
          chargeProcess = __chargeProcess,
          chargeStop = __chargeStop
      )
    }
    def getChargeHandshake: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo = chargeHandshake.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo.defaultInstance)
    def clearChargeHandshake: DataChgCharge = copy(chargeHandshake = None)
    def withChargeHandshake(__v: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo): DataChgCharge = copy(chargeHandshake = Some(__v))
    def getChargeConfig: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo = chargeConfig.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo.defaultInstance)
    def clearChargeConfig: DataChgCharge = copy(chargeConfig = None)
    def withChargeConfig(__v: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo): DataChgCharge = copy(chargeConfig = Some(__v))
    def getChargeProcess: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo = chargeProcess.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo.defaultInstance)
    def clearChargeProcess: DataChgCharge = copy(chargeProcess = None)
    def withChargeProcess(__v: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo): DataChgCharge = copy(chargeProcess = Some(__v))
    def getChargeStop: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo = chargeStop.getOrElse(com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo.defaultInstance)
    def clearChargeStop: DataChgCharge = copy(chargeStop = None)
    def withChargeStop(__v: com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo): DataChgCharge = copy(chargeStop = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => chargeHandshake.orNull
        case 2 => chargeConfig.orNull
        case 3 => chargeProcess.orNull
        case 4 => chargeStop.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => chargeHandshake.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => chargeConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => chargeProcess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => chargeStop.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgCharge
}

object DataChgCharge extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgCharge = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgCharge(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgCharge] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgCharge(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo
      case 2 => __out = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo
      case 3 => __out = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo
      case 4 => __out = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgCharge(
  )
  /** * 充电握手阶段信息的消息定义。消息数据从充电机国标的'PGN 9728/CHM报文'、'PGN 9984/BHM报文'、'PGN 256/CRM报文'、'PGN 512/BRM报文'中获取。
    *
    * @param plugId
    *  / (可选)充电枪ID。从充电机国标的'PGN 256/CRM报文'中获取。范围：0～0xFFFFFFFF。
    * @param chargerProtocol
    *  / (可选)充电机通信协议版本号。从充电机国标的'PGN 9728/CHM报文'中获取。
    * @param bmsMaxVoltage
    *  / (可选)充电车辆BMS最高允许充电电压。从充电机国标的'PGN 9984/BHM报文'中获取。单位：0.1V。
    * @param chargerStatus
    *  / (可选)充电机辨识结果。从充电机国标的'PGN 256/CRM报文'中获取。0x00：BMS不能辨识；0xAA：BMS能辨识。
    * @param chargerArea
    *  / (可选)充电站区域编码。从充电机国标的'PGN 256/CRM报文'中获取。
    * @param bmsProtocol
    *  / (可选)充电车辆BMS通信协议版本号。从充电机国标的'PGN 512/BRM报文'中获取。
    * @param batteryType
    *  / (可选)充电车辆电池类型。从充电机国标的'PGN 512/BRM报文'中获取。1：铅酸电池；2：镍氢电池；3：磷酸铁锂电池；4：锰酸锂电池；5：钴酸锂电池；6：三元材料电池；7：聚合物锂离子电池；8：钛酸锂电池；0xFF：其他电池。
    * @param batteryPower
    *  / (可选)充电车辆整车动力蓄电池系统额定容量。从充电机国标的'PGN 512/BRM报文'中获取。单位：0.1kwh。
    * @param batteryVoltage
    *  / (可选)充电车辆整车动力蓄电池系统额定总电压。从充电机国标的'PGN 512/BRM报文'中获取。单位：0.1V。
    * @param batteryVendor
    *  / (可选)充电车辆电池生产厂商名称。从充电机国标的'PGN 512/BRM报文'中获取。
    * @param batterySerial
    *  / (可选)充电车辆电池组序号。从充电机国标的'PGN 512/BRM报文'中获取。
    * @param batteryDate
    *  / (可选)充电车辆电池组生产日期。从充电机国标的'PGN 512/BRM报文'中获取。格式：YYMMDD。
    * @param batteryCycles
    *  / (可选)充电车辆电池组充电次数。从充电机国标的'PGN 512/BRM报文'中获取。
    * @param batteryOwner
    *  / (可选)充电车辆电池组产权标识。从充电机国标的'PGN 512/BRM报文'中获取。0：租赁，1：车自有。
    * @param vinCode
    *  / (可选)充电车辆车辆识别码。从充电机国标的'PGN 512/BRM报文'中获取。
    * @param bmsVersion
    *  / (可选)充电车辆BMS软件版本号。从充电机国标的'PGN 512/BRM报文'中获取。
    */
  @SerialVersionUID(0L)
  final case class ChargeHandshakeInfo(
      plugId: scala.Option[Int] = None,
      chargerProtocol: scala.Option[String] = None,
      bmsMaxVoltage: scala.Option[Int] = None,
      chargerStatus: scala.Option[Int] = None,
      chargerArea: scala.Option[String] = None,
      bmsProtocol: scala.Option[String] = None,
      batteryType: scala.Option[Int] = None,
      batteryPower: scala.Option[Int] = None,
      batteryVoltage: scala.Option[Int] = None,
      batteryVendor: scala.Option[String] = None,
      batterySerial: scala.Option[Int] = None,
      batteryDate: scala.Option[String] = None,
      batteryCycles: scala.Option[Int] = None,
      batteryOwner: scala.Option[Int] = None,
      vinCode: scala.Option[String] = None,
      bmsVersion: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChargeHandshakeInfo] with com.trueaccord.lenses.Updatable[ChargeHandshakeInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (plugId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, plugId.get) }
        if (chargerProtocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, chargerProtocol.get) }
        if (bmsMaxVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(20, bmsMaxVoltage.get) }
        if (chargerStatus.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, chargerStatus.get) }
        if (chargerArea.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(31, chargerArea.get) }
        if (bmsProtocol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(40, bmsProtocol.get) }
        if (batteryType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(41, batteryType.get) }
        if (batteryPower.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(42, batteryPower.get) }
        if (batteryVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(43, batteryVoltage.get) }
        if (batteryVendor.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(44, batteryVendor.get) }
        if (batterySerial.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(45, batterySerial.get) }
        if (batteryDate.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(46, batteryDate.get) }
        if (batteryCycles.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(47, batteryCycles.get) }
        if (batteryOwner.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(48, batteryOwner.get) }
        if (vinCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(49, vinCode.get) }
        if (bmsVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(50, bmsVersion.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        plugId.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        chargerProtocol.foreach { __v =>
          _output__.writeString(10, __v)
        };
        bmsMaxVoltage.foreach { __v =>
          _output__.writeInt32(20, __v)
        };
        chargerStatus.foreach { __v =>
          _output__.writeUInt32(30, __v)
        };
        chargerArea.foreach { __v =>
          _output__.writeString(31, __v)
        };
        bmsProtocol.foreach { __v =>
          _output__.writeString(40, __v)
        };
        batteryType.foreach { __v =>
          _output__.writeUInt32(41, __v)
        };
        batteryPower.foreach { __v =>
          _output__.writeUInt32(42, __v)
        };
        batteryVoltage.foreach { __v =>
          _output__.writeUInt32(43, __v)
        };
        batteryVendor.foreach { __v =>
          _output__.writeString(44, __v)
        };
        batterySerial.foreach { __v =>
          _output__.writeUInt32(45, __v)
        };
        batteryDate.foreach { __v =>
          _output__.writeString(46, __v)
        };
        batteryCycles.foreach { __v =>
          _output__.writeUInt32(47, __v)
        };
        batteryOwner.foreach { __v =>
          _output__.writeInt32(48, __v)
        };
        vinCode.foreach { __v =>
          _output__.writeString(49, __v)
        };
        bmsVersion.foreach { __v =>
          _output__.writeString(50, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo = {
        var __plugId = this.plugId
        var __chargerProtocol = this.chargerProtocol
        var __bmsMaxVoltage = this.bmsMaxVoltage
        var __chargerStatus = this.chargerStatus
        var __chargerArea = this.chargerArea
        var __bmsProtocol = this.bmsProtocol
        var __batteryType = this.batteryType
        var __batteryPower = this.batteryPower
        var __batteryVoltage = this.batteryVoltage
        var __batteryVendor = this.batteryVendor
        var __batterySerial = this.batterySerial
        var __batteryDate = this.batteryDate
        var __batteryCycles = this.batteryCycles
        var __batteryOwner = this.batteryOwner
        var __vinCode = this.vinCode
        var __bmsVersion = this.bmsVersion
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __plugId = Some(_input__.readUInt32())
            case 82 =>
              __chargerProtocol = Some(_input__.readString())
            case 160 =>
              __bmsMaxVoltage = Some(_input__.readInt32())
            case 240 =>
              __chargerStatus = Some(_input__.readUInt32())
            case 250 =>
              __chargerArea = Some(_input__.readString())
            case 322 =>
              __bmsProtocol = Some(_input__.readString())
            case 328 =>
              __batteryType = Some(_input__.readUInt32())
            case 336 =>
              __batteryPower = Some(_input__.readUInt32())
            case 344 =>
              __batteryVoltage = Some(_input__.readUInt32())
            case 354 =>
              __batteryVendor = Some(_input__.readString())
            case 360 =>
              __batterySerial = Some(_input__.readUInt32())
            case 370 =>
              __batteryDate = Some(_input__.readString())
            case 376 =>
              __batteryCycles = Some(_input__.readUInt32())
            case 384 =>
              __batteryOwner = Some(_input__.readInt32())
            case 394 =>
              __vinCode = Some(_input__.readString())
            case 402 =>
              __bmsVersion = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo(
            plugId = __plugId,
            chargerProtocol = __chargerProtocol,
            bmsMaxVoltage = __bmsMaxVoltage,
            chargerStatus = __chargerStatus,
            chargerArea = __chargerArea,
            bmsProtocol = __bmsProtocol,
            batteryType = __batteryType,
            batteryPower = __batteryPower,
            batteryVoltage = __batteryVoltage,
            batteryVendor = __batteryVendor,
            batterySerial = __batterySerial,
            batteryDate = __batteryDate,
            batteryCycles = __batteryCycles,
            batteryOwner = __batteryOwner,
            vinCode = __vinCode,
            bmsVersion = __bmsVersion
        )
      }
      def getPlugId: Int = plugId.getOrElse(0)
      def clearPlugId: ChargeHandshakeInfo = copy(plugId = None)
      def withPlugId(__v: Int): ChargeHandshakeInfo = copy(plugId = Some(__v))
      def getChargerProtocol: String = chargerProtocol.getOrElse("")
      def clearChargerProtocol: ChargeHandshakeInfo = copy(chargerProtocol = None)
      def withChargerProtocol(__v: String): ChargeHandshakeInfo = copy(chargerProtocol = Some(__v))
      def getBmsMaxVoltage: Int = bmsMaxVoltage.getOrElse(0)
      def clearBmsMaxVoltage: ChargeHandshakeInfo = copy(bmsMaxVoltage = None)
      def withBmsMaxVoltage(__v: Int): ChargeHandshakeInfo = copy(bmsMaxVoltage = Some(__v))
      def getChargerStatus: Int = chargerStatus.getOrElse(0)
      def clearChargerStatus: ChargeHandshakeInfo = copy(chargerStatus = None)
      def withChargerStatus(__v: Int): ChargeHandshakeInfo = copy(chargerStatus = Some(__v))
      def getChargerArea: String = chargerArea.getOrElse("")
      def clearChargerArea: ChargeHandshakeInfo = copy(chargerArea = None)
      def withChargerArea(__v: String): ChargeHandshakeInfo = copy(chargerArea = Some(__v))
      def getBmsProtocol: String = bmsProtocol.getOrElse("")
      def clearBmsProtocol: ChargeHandshakeInfo = copy(bmsProtocol = None)
      def withBmsProtocol(__v: String): ChargeHandshakeInfo = copy(bmsProtocol = Some(__v))
      def getBatteryType: Int = batteryType.getOrElse(0)
      def clearBatteryType: ChargeHandshakeInfo = copy(batteryType = None)
      def withBatteryType(__v: Int): ChargeHandshakeInfo = copy(batteryType = Some(__v))
      def getBatteryPower: Int = batteryPower.getOrElse(0)
      def clearBatteryPower: ChargeHandshakeInfo = copy(batteryPower = None)
      def withBatteryPower(__v: Int): ChargeHandshakeInfo = copy(batteryPower = Some(__v))
      def getBatteryVoltage: Int = batteryVoltage.getOrElse(0)
      def clearBatteryVoltage: ChargeHandshakeInfo = copy(batteryVoltage = None)
      def withBatteryVoltage(__v: Int): ChargeHandshakeInfo = copy(batteryVoltage = Some(__v))
      def getBatteryVendor: String = batteryVendor.getOrElse("")
      def clearBatteryVendor: ChargeHandshakeInfo = copy(batteryVendor = None)
      def withBatteryVendor(__v: String): ChargeHandshakeInfo = copy(batteryVendor = Some(__v))
      def getBatterySerial: Int = batterySerial.getOrElse(0)
      def clearBatterySerial: ChargeHandshakeInfo = copy(batterySerial = None)
      def withBatterySerial(__v: Int): ChargeHandshakeInfo = copy(batterySerial = Some(__v))
      def getBatteryDate: String = batteryDate.getOrElse("")
      def clearBatteryDate: ChargeHandshakeInfo = copy(batteryDate = None)
      def withBatteryDate(__v: String): ChargeHandshakeInfo = copy(batteryDate = Some(__v))
      def getBatteryCycles: Int = batteryCycles.getOrElse(0)
      def clearBatteryCycles: ChargeHandshakeInfo = copy(batteryCycles = None)
      def withBatteryCycles(__v: Int): ChargeHandshakeInfo = copy(batteryCycles = Some(__v))
      def getBatteryOwner: Int = batteryOwner.getOrElse(0)
      def clearBatteryOwner: ChargeHandshakeInfo = copy(batteryOwner = None)
      def withBatteryOwner(__v: Int): ChargeHandshakeInfo = copy(batteryOwner = Some(__v))
      def getVinCode: String = vinCode.getOrElse("")
      def clearVinCode: ChargeHandshakeInfo = copy(vinCode = None)
      def withVinCode(__v: String): ChargeHandshakeInfo = copy(vinCode = Some(__v))
      def getBmsVersion: String = bmsVersion.getOrElse("")
      def clearBmsVersion: ChargeHandshakeInfo = copy(bmsVersion = None)
      def withBmsVersion(__v: String): ChargeHandshakeInfo = copy(bmsVersion = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => plugId.orNull
          case 10 => chargerProtocol.orNull
          case 20 => bmsMaxVoltage.orNull
          case 30 => chargerStatus.orNull
          case 31 => chargerArea.orNull
          case 40 => bmsProtocol.orNull
          case 41 => batteryType.orNull
          case 42 => batteryPower.orNull
          case 43 => batteryVoltage.orNull
          case 44 => batteryVendor.orNull
          case 45 => batterySerial.orNull
          case 46 => batteryDate.orNull
          case 47 => batteryCycles.orNull
          case 48 => batteryOwner.orNull
          case 49 => vinCode.orNull
          case 50 => bmsVersion.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => plugId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => chargerProtocol.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 20 => bmsMaxVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 30 => chargerStatus.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 31 => chargerArea.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 40 => bmsProtocol.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 41 => batteryType.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 42 => batteryPower.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 43 => batteryVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 44 => batteryVendor.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 45 => batterySerial.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 46 => batteryDate.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 47 => batteryCycles.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 48 => batteryOwner.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 49 => vinCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 50 => bmsVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo
  }
  
  object ChargeHandshakeInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(44).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(45).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(46).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(47).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(48).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(49).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(50).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo(
    )
    implicit class ChargeHandshakeInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo](_l) {
      def plugId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlugId)((c_, f_) => c_.copy(plugId = Some(f_)))
      def optionalPlugId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plugId)((c_, f_) => c_.copy(plugId = f_))
      def chargerProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getChargerProtocol)((c_, f_) => c_.copy(chargerProtocol = Some(f_)))
      def optionalChargerProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.chargerProtocol)((c_, f_) => c_.copy(chargerProtocol = f_))
      def bmsMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMaxVoltage)((c_, f_) => c_.copy(bmsMaxVoltage = Some(f_)))
      def optionalBmsMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMaxVoltage)((c_, f_) => c_.copy(bmsMaxVoltage = f_))
      def chargerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerStatus)((c_, f_) => c_.copy(chargerStatus = Some(f_)))
      def optionalChargerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerStatus)((c_, f_) => c_.copy(chargerStatus = f_))
      def chargerArea: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getChargerArea)((c_, f_) => c_.copy(chargerArea = Some(f_)))
      def optionalChargerArea: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.chargerArea)((c_, f_) => c_.copy(chargerArea = f_))
      def bmsProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBmsProtocol)((c_, f_) => c_.copy(bmsProtocol = Some(f_)))
      def optionalBmsProtocol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.bmsProtocol)((c_, f_) => c_.copy(bmsProtocol = f_))
      def batteryType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryType)((c_, f_) => c_.copy(batteryType = Some(f_)))
      def optionalBatteryType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryType)((c_, f_) => c_.copy(batteryType = f_))
      def batteryPower: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryPower)((c_, f_) => c_.copy(batteryPower = Some(f_)))
      def optionalBatteryPower: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryPower)((c_, f_) => c_.copy(batteryPower = f_))
      def batteryVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryVoltage)((c_, f_) => c_.copy(batteryVoltage = Some(f_)))
      def optionalBatteryVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryVoltage)((c_, f_) => c_.copy(batteryVoltage = f_))
      def batteryVendor: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBatteryVendor)((c_, f_) => c_.copy(batteryVendor = Some(f_)))
      def optionalBatteryVendor: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.batteryVendor)((c_, f_) => c_.copy(batteryVendor = f_))
      def batterySerial: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatterySerial)((c_, f_) => c_.copy(batterySerial = Some(f_)))
      def optionalBatterySerial: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batterySerial)((c_, f_) => c_.copy(batterySerial = f_))
      def batteryDate: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBatteryDate)((c_, f_) => c_.copy(batteryDate = Some(f_)))
      def optionalBatteryDate: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.batteryDate)((c_, f_) => c_.copy(batteryDate = f_))
      def batteryCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryCycles)((c_, f_) => c_.copy(batteryCycles = Some(f_)))
      def optionalBatteryCycles: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryCycles)((c_, f_) => c_.copy(batteryCycles = f_))
      def batteryOwner: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryOwner)((c_, f_) => c_.copy(batteryOwner = Some(f_)))
      def optionalBatteryOwner: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryOwner)((c_, f_) => c_.copy(batteryOwner = f_))
      def vinCode: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVinCode)((c_, f_) => c_.copy(vinCode = Some(f_)))
      def optionalVinCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.vinCode)((c_, f_) => c_.copy(vinCode = f_))
      def bmsVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBmsVersion)((c_, f_) => c_.copy(bmsVersion = Some(f_)))
      def optionalBmsVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.bmsVersion)((c_, f_) => c_.copy(bmsVersion = f_))
    }
    final val PLUG_ID_FIELD_NUMBER = 1
    final val CHARGER_PROTOCOL_FIELD_NUMBER = 10
    final val BMS_MAX_VOLTAGE_FIELD_NUMBER = 20
    final val CHARGER_STATUS_FIELD_NUMBER = 30
    final val CHARGER_AREA_FIELD_NUMBER = 31
    final val BMS_PROTOCOL_FIELD_NUMBER = 40
    final val BATTERY_TYPE_FIELD_NUMBER = 41
    final val BATTERY_POWER_FIELD_NUMBER = 42
    final val BATTERY_VOLTAGE_FIELD_NUMBER = 43
    final val BATTERY_VENDOR_FIELD_NUMBER = 44
    final val BATTERY_SERIAL_FIELD_NUMBER = 45
    final val BATTERY_DATE_FIELD_NUMBER = 46
    final val BATTERY_CYCLES_FIELD_NUMBER = 47
    final val BATTERY_OWNER_FIELD_NUMBER = 48
    final val VIN_CODE_FIELD_NUMBER = 49
    final val BMS_VERSION_FIELD_NUMBER = 50
  }
  
  /** * 充电配置阶段信息的消息定义。消息数据从充电机国标的'PGN 1536/BCP报文'、'PGN 2048/CML报文'、'PGN 2304/BRO报文'、'PGN 2560/CRO报文'中获取。
    *
    * @param cellAllowVoltage
    *  / (可选)充电车辆单体动力蓄电池最高允许充电电压。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.01V，范围：0.00V～24.00V。
    * @param batteryAllowCurrent
    *  / (可选)充电车辆最高允许充电电流。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param batteryTotalPower
    *  / (可选)充电车辆动力蓄电池标称总能量。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.1kwh，范围：0kwh～1000kwh。
    * @param batteryAllowVoltage
    *  / (可选)充电车辆最高允许充电总电压。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param batteryAllowTemp
    *  / (可选)充电车辆最高允许动力蓄电池温度。从充电机国标的'PGN 1536/BCP报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    * @param batteryCurrentSoc
    *  / (可选)充电车辆整车动力蓄电池荷电状态(SOC)。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.1%，范围：0.0%～100.0%。
    * @param batteryCurrentVol
    *  / (可选)充电车辆整车动力蓄电池当前总电压。从充电机国标的'PGN 1536/BCP报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param chargerMaxVoltage
    *  / (可选)充电机最高输出电压。从充电机国标的'PGN 2048/CML报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param chargerMinVoltage
    *  / (可选)充电机最低输出电压。从充电机国标的'PGN 2048/CML报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param chargerMaxCurrent
    *  / (可选)充电机最大输出电流。从充电机国标的'PGN 2048/CML报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param chargerMinCurrent
    *  / (可选)充电机最小输出电流。从充电机国标的'PGN 2048/CML报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param batteryReady
    *  / (可选)BMS充电准备就绪状态。从充电机国标的'PGN 2304/BRO报文'中获取。0x00：BMS未准备好，0xAA：BMS准备就绪，0xFF：无效。
    * @param chargerReady
    *  / (可选)充电机输出准备就绪状态。从充电机国标的'PGN 2560/CRO报文'中获取。0x00：充电机未准备好，0xAA：充电机准备就绪，0xFF：无效。
    */
  @SerialVersionUID(0L)
  final case class ChargeConfigInfo(
      cellAllowVoltage: scala.Option[Int] = None,
      batteryAllowCurrent: scala.Option[Int] = None,
      batteryTotalPower: scala.Option[Int] = None,
      batteryAllowVoltage: scala.Option[Int] = None,
      batteryAllowTemp: scala.Option[Int] = None,
      batteryCurrentSoc: scala.Option[Int] = None,
      batteryCurrentVol: scala.Option[Int] = None,
      chargerMaxVoltage: scala.Option[Int] = None,
      chargerMinVoltage: scala.Option[Int] = None,
      chargerMaxCurrent: scala.Option[Int] = None,
      chargerMinCurrent: scala.Option[Int] = None,
      batteryReady: scala.Option[Int] = None,
      chargerReady: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChargeConfigInfo] with com.trueaccord.lenses.Updatable[ChargeConfigInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (cellAllowVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, cellAllowVoltage.get) }
        if (batteryAllowCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, batteryAllowCurrent.get) }
        if (batteryTotalPower.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, batteryTotalPower.get) }
        if (batteryAllowVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(13, batteryAllowVoltage.get) }
        if (batteryAllowTemp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(14, batteryAllowTemp.get) }
        if (batteryCurrentSoc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(15, batteryCurrentSoc.get) }
        if (batteryCurrentVol.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(16, batteryCurrentVol.get) }
        if (chargerMaxVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(20, chargerMaxVoltage.get) }
        if (chargerMinVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(21, chargerMinVoltage.get) }
        if (chargerMaxCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(22, chargerMaxCurrent.get) }
        if (chargerMinCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(23, chargerMinCurrent.get) }
        if (batteryReady.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, batteryReady.get) }
        if (chargerReady.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(40, chargerReady.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        cellAllowVoltage.foreach { __v =>
          _output__.writeUInt32(10, __v)
        };
        batteryAllowCurrent.foreach { __v =>
          _output__.writeUInt32(11, __v)
        };
        batteryTotalPower.foreach { __v =>
          _output__.writeUInt32(12, __v)
        };
        batteryAllowVoltage.foreach { __v =>
          _output__.writeUInt32(13, __v)
        };
        batteryAllowTemp.foreach { __v =>
          _output__.writeUInt32(14, __v)
        };
        batteryCurrentSoc.foreach { __v =>
          _output__.writeUInt32(15, __v)
        };
        batteryCurrentVol.foreach { __v =>
          _output__.writeUInt32(16, __v)
        };
        chargerMaxVoltage.foreach { __v =>
          _output__.writeUInt32(20, __v)
        };
        chargerMinVoltage.foreach { __v =>
          _output__.writeUInt32(21, __v)
        };
        chargerMaxCurrent.foreach { __v =>
          _output__.writeUInt32(22, __v)
        };
        chargerMinCurrent.foreach { __v =>
          _output__.writeUInt32(23, __v)
        };
        batteryReady.foreach { __v =>
          _output__.writeUInt32(30, __v)
        };
        chargerReady.foreach { __v =>
          _output__.writeUInt32(40, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo = {
        var __cellAllowVoltage = this.cellAllowVoltage
        var __batteryAllowCurrent = this.batteryAllowCurrent
        var __batteryTotalPower = this.batteryTotalPower
        var __batteryAllowVoltage = this.batteryAllowVoltage
        var __batteryAllowTemp = this.batteryAllowTemp
        var __batteryCurrentSoc = this.batteryCurrentSoc
        var __batteryCurrentVol = this.batteryCurrentVol
        var __chargerMaxVoltage = this.chargerMaxVoltage
        var __chargerMinVoltage = this.chargerMinVoltage
        var __chargerMaxCurrent = this.chargerMaxCurrent
        var __chargerMinCurrent = this.chargerMinCurrent
        var __batteryReady = this.batteryReady
        var __chargerReady = this.chargerReady
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 80 =>
              __cellAllowVoltage = Some(_input__.readUInt32())
            case 88 =>
              __batteryAllowCurrent = Some(_input__.readUInt32())
            case 96 =>
              __batteryTotalPower = Some(_input__.readUInt32())
            case 104 =>
              __batteryAllowVoltage = Some(_input__.readUInt32())
            case 112 =>
              __batteryAllowTemp = Some(_input__.readUInt32())
            case 120 =>
              __batteryCurrentSoc = Some(_input__.readUInt32())
            case 128 =>
              __batteryCurrentVol = Some(_input__.readUInt32())
            case 160 =>
              __chargerMaxVoltage = Some(_input__.readUInt32())
            case 168 =>
              __chargerMinVoltage = Some(_input__.readUInt32())
            case 176 =>
              __chargerMaxCurrent = Some(_input__.readUInt32())
            case 184 =>
              __chargerMinCurrent = Some(_input__.readUInt32())
            case 240 =>
              __batteryReady = Some(_input__.readUInt32())
            case 320 =>
              __chargerReady = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo(
            cellAllowVoltage = __cellAllowVoltage,
            batteryAllowCurrent = __batteryAllowCurrent,
            batteryTotalPower = __batteryTotalPower,
            batteryAllowVoltage = __batteryAllowVoltage,
            batteryAllowTemp = __batteryAllowTemp,
            batteryCurrentSoc = __batteryCurrentSoc,
            batteryCurrentVol = __batteryCurrentVol,
            chargerMaxVoltage = __chargerMaxVoltage,
            chargerMinVoltage = __chargerMinVoltage,
            chargerMaxCurrent = __chargerMaxCurrent,
            chargerMinCurrent = __chargerMinCurrent,
            batteryReady = __batteryReady,
            chargerReady = __chargerReady
        )
      }
      def getCellAllowVoltage: Int = cellAllowVoltage.getOrElse(0)
      def clearCellAllowVoltage: ChargeConfigInfo = copy(cellAllowVoltage = None)
      def withCellAllowVoltage(__v: Int): ChargeConfigInfo = copy(cellAllowVoltage = Some(__v))
      def getBatteryAllowCurrent: Int = batteryAllowCurrent.getOrElse(0)
      def clearBatteryAllowCurrent: ChargeConfigInfo = copy(batteryAllowCurrent = None)
      def withBatteryAllowCurrent(__v: Int): ChargeConfigInfo = copy(batteryAllowCurrent = Some(__v))
      def getBatteryTotalPower: Int = batteryTotalPower.getOrElse(0)
      def clearBatteryTotalPower: ChargeConfigInfo = copy(batteryTotalPower = None)
      def withBatteryTotalPower(__v: Int): ChargeConfigInfo = copy(batteryTotalPower = Some(__v))
      def getBatteryAllowVoltage: Int = batteryAllowVoltage.getOrElse(0)
      def clearBatteryAllowVoltage: ChargeConfigInfo = copy(batteryAllowVoltage = None)
      def withBatteryAllowVoltage(__v: Int): ChargeConfigInfo = copy(batteryAllowVoltage = Some(__v))
      def getBatteryAllowTemp: Int = batteryAllowTemp.getOrElse(0)
      def clearBatteryAllowTemp: ChargeConfigInfo = copy(batteryAllowTemp = None)
      def withBatteryAllowTemp(__v: Int): ChargeConfigInfo = copy(batteryAllowTemp = Some(__v))
      def getBatteryCurrentSoc: Int = batteryCurrentSoc.getOrElse(0)
      def clearBatteryCurrentSoc: ChargeConfigInfo = copy(batteryCurrentSoc = None)
      def withBatteryCurrentSoc(__v: Int): ChargeConfigInfo = copy(batteryCurrentSoc = Some(__v))
      def getBatteryCurrentVol: Int = batteryCurrentVol.getOrElse(0)
      def clearBatteryCurrentVol: ChargeConfigInfo = copy(batteryCurrentVol = None)
      def withBatteryCurrentVol(__v: Int): ChargeConfigInfo = copy(batteryCurrentVol = Some(__v))
      def getChargerMaxVoltage: Int = chargerMaxVoltage.getOrElse(0)
      def clearChargerMaxVoltage: ChargeConfigInfo = copy(chargerMaxVoltage = None)
      def withChargerMaxVoltage(__v: Int): ChargeConfigInfo = copy(chargerMaxVoltage = Some(__v))
      def getChargerMinVoltage: Int = chargerMinVoltage.getOrElse(0)
      def clearChargerMinVoltage: ChargeConfigInfo = copy(chargerMinVoltage = None)
      def withChargerMinVoltage(__v: Int): ChargeConfigInfo = copy(chargerMinVoltage = Some(__v))
      def getChargerMaxCurrent: Int = chargerMaxCurrent.getOrElse(0)
      def clearChargerMaxCurrent: ChargeConfigInfo = copy(chargerMaxCurrent = None)
      def withChargerMaxCurrent(__v: Int): ChargeConfigInfo = copy(chargerMaxCurrent = Some(__v))
      def getChargerMinCurrent: Int = chargerMinCurrent.getOrElse(0)
      def clearChargerMinCurrent: ChargeConfigInfo = copy(chargerMinCurrent = None)
      def withChargerMinCurrent(__v: Int): ChargeConfigInfo = copy(chargerMinCurrent = Some(__v))
      def getBatteryReady: Int = batteryReady.getOrElse(0)
      def clearBatteryReady: ChargeConfigInfo = copy(batteryReady = None)
      def withBatteryReady(__v: Int): ChargeConfigInfo = copy(batteryReady = Some(__v))
      def getChargerReady: Int = chargerReady.getOrElse(0)
      def clearChargerReady: ChargeConfigInfo = copy(chargerReady = None)
      def withChargerReady(__v: Int): ChargeConfigInfo = copy(chargerReady = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 10 => cellAllowVoltage.orNull
          case 11 => batteryAllowCurrent.orNull
          case 12 => batteryTotalPower.orNull
          case 13 => batteryAllowVoltage.orNull
          case 14 => batteryAllowTemp.orNull
          case 15 => batteryCurrentSoc.orNull
          case 16 => batteryCurrentVol.orNull
          case 20 => chargerMaxVoltage.orNull
          case 21 => chargerMinVoltage.orNull
          case 22 => chargerMaxCurrent.orNull
          case 23 => chargerMinCurrent.orNull
          case 30 => batteryReady.orNull
          case 40 => chargerReady.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 10 => cellAllowVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => batteryAllowCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => batteryTotalPower.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 13 => batteryAllowVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 14 => batteryAllowTemp.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 15 => batteryCurrentSoc.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 16 => batteryCurrentVol.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 20 => chargerMaxVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 21 => chargerMinVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 22 => chargerMaxCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 23 => chargerMinCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 30 => batteryReady.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 40 => chargerReady.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo
  }
  
  object ChargeConfigInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo(
    )
    implicit class ChargeConfigInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo](_l) {
      def cellAllowVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCellAllowVoltage)((c_, f_) => c_.copy(cellAllowVoltage = Some(f_)))
      def optionalCellAllowVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.cellAllowVoltage)((c_, f_) => c_.copy(cellAllowVoltage = f_))
      def batteryAllowCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryAllowCurrent)((c_, f_) => c_.copy(batteryAllowCurrent = Some(f_)))
      def optionalBatteryAllowCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryAllowCurrent)((c_, f_) => c_.copy(batteryAllowCurrent = f_))
      def batteryTotalPower: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryTotalPower)((c_, f_) => c_.copy(batteryTotalPower = Some(f_)))
      def optionalBatteryTotalPower: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryTotalPower)((c_, f_) => c_.copy(batteryTotalPower = f_))
      def batteryAllowVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryAllowVoltage)((c_, f_) => c_.copy(batteryAllowVoltage = Some(f_)))
      def optionalBatteryAllowVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryAllowVoltage)((c_, f_) => c_.copy(batteryAllowVoltage = f_))
      def batteryAllowTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryAllowTemp)((c_, f_) => c_.copy(batteryAllowTemp = Some(f_)))
      def optionalBatteryAllowTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryAllowTemp)((c_, f_) => c_.copy(batteryAllowTemp = f_))
      def batteryCurrentSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryCurrentSoc)((c_, f_) => c_.copy(batteryCurrentSoc = Some(f_)))
      def optionalBatteryCurrentSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryCurrentSoc)((c_, f_) => c_.copy(batteryCurrentSoc = f_))
      def batteryCurrentVol: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryCurrentVol)((c_, f_) => c_.copy(batteryCurrentVol = Some(f_)))
      def optionalBatteryCurrentVol: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryCurrentVol)((c_, f_) => c_.copy(batteryCurrentVol = f_))
      def chargerMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerMaxVoltage)((c_, f_) => c_.copy(chargerMaxVoltage = Some(f_)))
      def optionalChargerMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerMaxVoltage)((c_, f_) => c_.copy(chargerMaxVoltage = f_))
      def chargerMinVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerMinVoltage)((c_, f_) => c_.copy(chargerMinVoltage = Some(f_)))
      def optionalChargerMinVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerMinVoltage)((c_, f_) => c_.copy(chargerMinVoltage = f_))
      def chargerMaxCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerMaxCurrent)((c_, f_) => c_.copy(chargerMaxCurrent = Some(f_)))
      def optionalChargerMaxCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerMaxCurrent)((c_, f_) => c_.copy(chargerMaxCurrent = f_))
      def chargerMinCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerMinCurrent)((c_, f_) => c_.copy(chargerMinCurrent = Some(f_)))
      def optionalChargerMinCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerMinCurrent)((c_, f_) => c_.copy(chargerMinCurrent = f_))
      def batteryReady: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryReady)((c_, f_) => c_.copy(batteryReady = Some(f_)))
      def optionalBatteryReady: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryReady)((c_, f_) => c_.copy(batteryReady = f_))
      def chargerReady: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerReady)((c_, f_) => c_.copy(chargerReady = Some(f_)))
      def optionalChargerReady: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerReady)((c_, f_) => c_.copy(chargerReady = f_))
    }
    final val CELL_ALLOW_VOLTAGE_FIELD_NUMBER = 10
    final val BATTERY_ALLOW_CURRENT_FIELD_NUMBER = 11
    final val BATTERY_TOTAL_POWER_FIELD_NUMBER = 12
    final val BATTERY_ALLOW_VOLTAGE_FIELD_NUMBER = 13
    final val BATTERY_ALLOW_TEMP_FIELD_NUMBER = 14
    final val BATTERY_CURRENT_SOC_FIELD_NUMBER = 15
    final val BATTERY_CURRENT_VOL_FIELD_NUMBER = 16
    final val CHARGER_MAX_VOLTAGE_FIELD_NUMBER = 20
    final val CHARGER_MIN_VOLTAGE_FIELD_NUMBER = 21
    final val CHARGER_MAX_CURRENT_FIELD_NUMBER = 22
    final val CHARGER_MIN_CURRENT_FIELD_NUMBER = 23
    final val BATTERY_READY_FIELD_NUMBER = 30
    final val CHARGER_READY_FIELD_NUMBER = 40
  }
  
  /** * 充电进行阶段信息的消息定义。消息数据从充电机国标的'PGN 4096/BCL报文'、'PGN 4352/BCS报文'、'PGN 4608/CCS报文'、'PGN 4864/BSM报文'、'PGN 5376/BMV报文'、'PGN 5632/BMT报文'中获取。
    *
    * @param bmsRequireVoltage
    *  / (可选)充电车辆充电电压需求值。从充电机国标的'PGN 4096/BCL报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param bmsRequireCurrent
    *  / (可选)充电车辆充电电流需求值。从充电机国标的'PGN 4096/BCL报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param bmsRequireMode
    *  / (可选)充电车辆充电模式需求值。从充电机国标的'PGN 4096/BCL报文'中获取。0x01：恒压充电，0x02：恒流充电。
    * @param bmsMeasureVoltage
    *  / (可选)充电车辆充电电压测量值。从充电机国标的'PGN 4352/BCS报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param bmsMeasureCurrent
    *  / (可选)充电车辆充电电流测量值。从充电机国标的'PGN 4352/BCS报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param bmsMaxVolValue
    *  / (可选)充电车辆最高单体动力蓄电池电压及其组号。从充电机国标的'PGN 4352/BCS报文'中获取。&lt;Bit0～11&gt;：蓄电池电压，单位：0.01V，范围：0.00V～24.00V；&lt;Bit12～15&gt;：蓄电池组号，范围：0～15。
    * @param bmsCurrentSoc
    *  / (可选)充电车辆当前荷电状态(SOC)。从充电机国标的'PGN 4352/BCS报文'中获取。单位：1%，范围：0%～100%。
    * @param bmsRemainTime
    *  / (可选)充电车辆估算剩余充电时间。从充电机国标的'PGN 4352/BCS报文'中获取。单位：1分钟，范围：0分钟～600分钟(大于600分钟按600分钟计算)。
    * @param chargerOutputVoltage
    *  / (可选)充电机充电电压输出值。从充电机国标的'PGN 4608/CCS报文'中获取。单位：0.1V，范围：0.0V～6553.5V。
    * @param chargerOutputCurrent
    *  / (可选)充电机充电电流输出值。从充电机国标的'PGN 4608/CCS报文'中获取。单位：0.1A，偏移量：-400A，范围：-400.0A～6153.5A。
    * @param chargerTotalTime
    *  / (可选)充电机充电累计时间。从充电机国标的'PGN 4608/CCS报文'中获取。单位：1分钟，范围：0分钟～600分钟。
    * @param chargerEnableStatus
    *  / (可选)充电机充电允许状态。从充电机国标的'PGN 4608/CCS报文'中获取。0x00：暂停，0x01：允许。
    * @param bmsMaxVolIndex
    *  / (可选)充电车辆最高单体动力蓄电池电压所在编号。从充电机国标的'PGN 4864/BSM报文'中获取。范围：0～255。
    * @param bmsMaxTempValue
    *  / (可选)充电车辆最高动力蓄电池温度。从充电机国标的'PGN 4864/BSM报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    * @param bmsMaxTempIndex
    *  / (可选)充电车辆最高温度检测点编号。从充电机国标的'PGN 4864/BSM报文'中获取。范围：0～255。
    * @param bmsMinTempValue
    *  / (可选)充电车辆最低动力蓄电池温度。从充电机国标的'PGN 4864/BSM报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    * @param bmsMinTempIndex
    *  / (可选)充电车辆最低温度检测点编号。从充电机国标的'PGN 4864/BSM报文'中获取。范围：0～255。
    * @param bmsWarnStatus1
    *  / (可选)充电车辆动力蓄电池状态信息1。从充电机国标的'PGN 4864/BSM报文'中获取。&lt;Bit0～1&gt;：单体动力蓄电池电压过高/过低，00：正常，01：过高，02：过低；&lt;Bit2～3&gt;：整车动力蓄电池荷电状态SOC过高/过低，00：正常，过高，02：过低；&lt;Bit4～5&gt;：动力蓄电池充电过电流，00：正常，01：过流，02：不可信；&lt;Bit6～7&gt;：动力蓄电池温度过高，00：正常，01：过高，02：不可信。
    * @param bmsWarnStatus2
    *  / (可选)充电车辆动力蓄电池状态信息2。从充电机国标的'PGN 4864/BSM报文'中获取。&lt;Bit0～1&gt;：动力蓄电池绝缘状态，00：正常，01：不正常，02：不可信；&lt;Bit2～3&gt;：动力蓄电池组输出连接器连接状态，00：正常，01：不正常，02：不可信；&lt;Bit4～5&gt;：充电允许，00：禁止，01：允许。
    * @param bmsCellVolList
    *  / (可选)充电车辆单体动力蓄电池电压列表。从充电机国标的'PGN 5376/BMV报文'中获取。&lt;Bit0～11&gt;：蓄电池电压，单位：0.01V，范围：0.00V～24.00V；&lt;Bit12～15&gt;：蓄电池组号，范围：0～15。
    * @param bmsCellTempList
    *  / (可选)充电车辆动力蓄电池温度列表。从充电机国标的'PGN 5632/BMT报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    */
  @SerialVersionUID(0L)
  final case class ChargeProcessInfo(
      bmsRequireVoltage: scala.Option[Int] = None,
      bmsRequireCurrent: scala.Option[Int] = None,
      bmsRequireMode: scala.Option[Int] = None,
      bmsMeasureVoltage: scala.Option[Int] = None,
      bmsMeasureCurrent: scala.Option[Int] = None,
      bmsMaxVolValue: scala.Option[Int] = None,
      bmsCurrentSoc: scala.Option[Int] = None,
      bmsRemainTime: scala.Option[Int] = None,
      chargerOutputVoltage: scala.Option[Int] = None,
      chargerOutputCurrent: scala.Option[Int] = None,
      chargerTotalTime: scala.Option[Int] = None,
      chargerEnableStatus: scala.Option[Int] = None,
      bmsMaxVolIndex: scala.Option[Int] = None,
      bmsMaxTempValue: scala.Option[Int] = None,
      bmsMaxTempIndex: scala.Option[Int] = None,
      bmsMinTempValue: scala.Option[Int] = None,
      bmsMinTempIndex: scala.Option[Int] = None,
      bmsWarnStatus1: scala.Option[Int] = None,
      bmsWarnStatus2: scala.Option[Int] = None,
      bmsCellVolList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
      bmsCellTempList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChargeProcessInfo] with com.trueaccord.lenses.Updatable[ChargeProcessInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (bmsRequireVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, bmsRequireVoltage.get) }
        if (bmsRequireCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, bmsRequireCurrent.get) }
        if (bmsRequireMode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, bmsRequireMode.get) }
        if (bmsMeasureVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(20, bmsMeasureVoltage.get) }
        if (bmsMeasureCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(21, bmsMeasureCurrent.get) }
        if (bmsMaxVolValue.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(22, bmsMaxVolValue.get) }
        if (bmsCurrentSoc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(23, bmsCurrentSoc.get) }
        if (bmsRemainTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(24, bmsRemainTime.get) }
        if (chargerOutputVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, chargerOutputVoltage.get) }
        if (chargerOutputCurrent.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(31, chargerOutputCurrent.get) }
        if (chargerTotalTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(32, chargerTotalTime.get) }
        if (chargerEnableStatus.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(33, chargerEnableStatus.get) }
        if (bmsMaxVolIndex.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(40, bmsMaxVolIndex.get) }
        if (bmsMaxTempValue.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(41, bmsMaxTempValue.get) }
        if (bmsMaxTempIndex.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(42, bmsMaxTempIndex.get) }
        if (bmsMinTempValue.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(43, bmsMinTempValue.get) }
        if (bmsMinTempIndex.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(44, bmsMinTempIndex.get) }
        if (bmsWarnStatus1.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(45, bmsWarnStatus1.get) }
        if (bmsWarnStatus2.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(46, bmsWarnStatus2.get) }
        bmsCellVolList.foreach(bmsCellVolList => __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(50, bmsCellVolList))
        bmsCellTempList.foreach(bmsCellTempList => __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(60, bmsCellTempList))
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        bmsRequireVoltage.foreach { __v =>
          _output__.writeUInt32(10, __v)
        };
        bmsRequireCurrent.foreach { __v =>
          _output__.writeUInt32(11, __v)
        };
        bmsRequireMode.foreach { __v =>
          _output__.writeUInt32(12, __v)
        };
        bmsMeasureVoltage.foreach { __v =>
          _output__.writeUInt32(20, __v)
        };
        bmsMeasureCurrent.foreach { __v =>
          _output__.writeUInt32(21, __v)
        };
        bmsMaxVolValue.foreach { __v =>
          _output__.writeUInt32(22, __v)
        };
        bmsCurrentSoc.foreach { __v =>
          _output__.writeUInt32(23, __v)
        };
        bmsRemainTime.foreach { __v =>
          _output__.writeUInt32(24, __v)
        };
        chargerOutputVoltage.foreach { __v =>
          _output__.writeUInt32(30, __v)
        };
        chargerOutputCurrent.foreach { __v =>
          _output__.writeUInt32(31, __v)
        };
        chargerTotalTime.foreach { __v =>
          _output__.writeUInt32(32, __v)
        };
        chargerEnableStatus.foreach { __v =>
          _output__.writeUInt32(33, __v)
        };
        bmsMaxVolIndex.foreach { __v =>
          _output__.writeUInt32(40, __v)
        };
        bmsMaxTempValue.foreach { __v =>
          _output__.writeUInt32(41, __v)
        };
        bmsMaxTempIndex.foreach { __v =>
          _output__.writeUInt32(42, __v)
        };
        bmsMinTempValue.foreach { __v =>
          _output__.writeUInt32(43, __v)
        };
        bmsMinTempIndex.foreach { __v =>
          _output__.writeUInt32(44, __v)
        };
        bmsWarnStatus1.foreach { __v =>
          _output__.writeUInt32(45, __v)
        };
        bmsWarnStatus2.foreach { __v =>
          _output__.writeUInt32(46, __v)
        };
        bmsCellVolList.foreach { __v =>
          _output__.writeUInt32(50, __v)
        };
        bmsCellTempList.foreach { __v =>
          _output__.writeUInt32(60, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo = {
        var __bmsRequireVoltage = this.bmsRequireVoltage
        var __bmsRequireCurrent = this.bmsRequireCurrent
        var __bmsRequireMode = this.bmsRequireMode
        var __bmsMeasureVoltage = this.bmsMeasureVoltage
        var __bmsMeasureCurrent = this.bmsMeasureCurrent
        var __bmsMaxVolValue = this.bmsMaxVolValue
        var __bmsCurrentSoc = this.bmsCurrentSoc
        var __bmsRemainTime = this.bmsRemainTime
        var __chargerOutputVoltage = this.chargerOutputVoltage
        var __chargerOutputCurrent = this.chargerOutputCurrent
        var __chargerTotalTime = this.chargerTotalTime
        var __chargerEnableStatus = this.chargerEnableStatus
        var __bmsMaxVolIndex = this.bmsMaxVolIndex
        var __bmsMaxTempValue = this.bmsMaxTempValue
        var __bmsMaxTempIndex = this.bmsMaxTempIndex
        var __bmsMinTempValue = this.bmsMinTempValue
        var __bmsMinTempIndex = this.bmsMinTempIndex
        var __bmsWarnStatus1 = this.bmsWarnStatus1
        var __bmsWarnStatus2 = this.bmsWarnStatus2
        val __bmsCellVolList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.bmsCellVolList)
        val __bmsCellTempList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.bmsCellTempList)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 80 =>
              __bmsRequireVoltage = Some(_input__.readUInt32())
            case 88 =>
              __bmsRequireCurrent = Some(_input__.readUInt32())
            case 96 =>
              __bmsRequireMode = Some(_input__.readUInt32())
            case 160 =>
              __bmsMeasureVoltage = Some(_input__.readUInt32())
            case 168 =>
              __bmsMeasureCurrent = Some(_input__.readUInt32())
            case 176 =>
              __bmsMaxVolValue = Some(_input__.readUInt32())
            case 184 =>
              __bmsCurrentSoc = Some(_input__.readUInt32())
            case 192 =>
              __bmsRemainTime = Some(_input__.readUInt32())
            case 240 =>
              __chargerOutputVoltage = Some(_input__.readUInt32())
            case 248 =>
              __chargerOutputCurrent = Some(_input__.readUInt32())
            case 256 =>
              __chargerTotalTime = Some(_input__.readUInt32())
            case 264 =>
              __chargerEnableStatus = Some(_input__.readUInt32())
            case 320 =>
              __bmsMaxVolIndex = Some(_input__.readUInt32())
            case 328 =>
              __bmsMaxTempValue = Some(_input__.readUInt32())
            case 336 =>
              __bmsMaxTempIndex = Some(_input__.readUInt32())
            case 344 =>
              __bmsMinTempValue = Some(_input__.readUInt32())
            case 352 =>
              __bmsMinTempIndex = Some(_input__.readUInt32())
            case 360 =>
              __bmsWarnStatus1 = Some(_input__.readUInt32())
            case 368 =>
              __bmsWarnStatus2 = Some(_input__.readUInt32())
            case 400 =>
              __bmsCellVolList += _input__.readUInt32()
            case 402 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __bmsCellVolList += _input__.readUInt32
              }
              _input__.popLimit(oldLimit)
            }
            case 480 =>
              __bmsCellTempList += _input__.readUInt32()
            case 482 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __bmsCellTempList += _input__.readUInt32
              }
              _input__.popLimit(oldLimit)
            }
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo(
            bmsRequireVoltage = __bmsRequireVoltage,
            bmsRequireCurrent = __bmsRequireCurrent,
            bmsRequireMode = __bmsRequireMode,
            bmsMeasureVoltage = __bmsMeasureVoltage,
            bmsMeasureCurrent = __bmsMeasureCurrent,
            bmsMaxVolValue = __bmsMaxVolValue,
            bmsCurrentSoc = __bmsCurrentSoc,
            bmsRemainTime = __bmsRemainTime,
            chargerOutputVoltage = __chargerOutputVoltage,
            chargerOutputCurrent = __chargerOutputCurrent,
            chargerTotalTime = __chargerTotalTime,
            chargerEnableStatus = __chargerEnableStatus,
            bmsMaxVolIndex = __bmsMaxVolIndex,
            bmsMaxTempValue = __bmsMaxTempValue,
            bmsMaxTempIndex = __bmsMaxTempIndex,
            bmsMinTempValue = __bmsMinTempValue,
            bmsMinTempIndex = __bmsMinTempIndex,
            bmsWarnStatus1 = __bmsWarnStatus1,
            bmsWarnStatus2 = __bmsWarnStatus2,
            bmsCellVolList = __bmsCellVolList.result(),
            bmsCellTempList = __bmsCellTempList.result()
        )
      }
      def getBmsRequireVoltage: Int = bmsRequireVoltage.getOrElse(0)
      def clearBmsRequireVoltage: ChargeProcessInfo = copy(bmsRequireVoltage = None)
      def withBmsRequireVoltage(__v: Int): ChargeProcessInfo = copy(bmsRequireVoltage = Some(__v))
      def getBmsRequireCurrent: Int = bmsRequireCurrent.getOrElse(0)
      def clearBmsRequireCurrent: ChargeProcessInfo = copy(bmsRequireCurrent = None)
      def withBmsRequireCurrent(__v: Int): ChargeProcessInfo = copy(bmsRequireCurrent = Some(__v))
      def getBmsRequireMode: Int = bmsRequireMode.getOrElse(0)
      def clearBmsRequireMode: ChargeProcessInfo = copy(bmsRequireMode = None)
      def withBmsRequireMode(__v: Int): ChargeProcessInfo = copy(bmsRequireMode = Some(__v))
      def getBmsMeasureVoltage: Int = bmsMeasureVoltage.getOrElse(0)
      def clearBmsMeasureVoltage: ChargeProcessInfo = copy(bmsMeasureVoltage = None)
      def withBmsMeasureVoltage(__v: Int): ChargeProcessInfo = copy(bmsMeasureVoltage = Some(__v))
      def getBmsMeasureCurrent: Int = bmsMeasureCurrent.getOrElse(0)
      def clearBmsMeasureCurrent: ChargeProcessInfo = copy(bmsMeasureCurrent = None)
      def withBmsMeasureCurrent(__v: Int): ChargeProcessInfo = copy(bmsMeasureCurrent = Some(__v))
      def getBmsMaxVolValue: Int = bmsMaxVolValue.getOrElse(0)
      def clearBmsMaxVolValue: ChargeProcessInfo = copy(bmsMaxVolValue = None)
      def withBmsMaxVolValue(__v: Int): ChargeProcessInfo = copy(bmsMaxVolValue = Some(__v))
      def getBmsCurrentSoc: Int = bmsCurrentSoc.getOrElse(0)
      def clearBmsCurrentSoc: ChargeProcessInfo = copy(bmsCurrentSoc = None)
      def withBmsCurrentSoc(__v: Int): ChargeProcessInfo = copy(bmsCurrentSoc = Some(__v))
      def getBmsRemainTime: Int = bmsRemainTime.getOrElse(0)
      def clearBmsRemainTime: ChargeProcessInfo = copy(bmsRemainTime = None)
      def withBmsRemainTime(__v: Int): ChargeProcessInfo = copy(bmsRemainTime = Some(__v))
      def getChargerOutputVoltage: Int = chargerOutputVoltage.getOrElse(0)
      def clearChargerOutputVoltage: ChargeProcessInfo = copy(chargerOutputVoltage = None)
      def withChargerOutputVoltage(__v: Int): ChargeProcessInfo = copy(chargerOutputVoltage = Some(__v))
      def getChargerOutputCurrent: Int = chargerOutputCurrent.getOrElse(0)
      def clearChargerOutputCurrent: ChargeProcessInfo = copy(chargerOutputCurrent = None)
      def withChargerOutputCurrent(__v: Int): ChargeProcessInfo = copy(chargerOutputCurrent = Some(__v))
      def getChargerTotalTime: Int = chargerTotalTime.getOrElse(0)
      def clearChargerTotalTime: ChargeProcessInfo = copy(chargerTotalTime = None)
      def withChargerTotalTime(__v: Int): ChargeProcessInfo = copy(chargerTotalTime = Some(__v))
      def getChargerEnableStatus: Int = chargerEnableStatus.getOrElse(0)
      def clearChargerEnableStatus: ChargeProcessInfo = copy(chargerEnableStatus = None)
      def withChargerEnableStatus(__v: Int): ChargeProcessInfo = copy(chargerEnableStatus = Some(__v))
      def getBmsMaxVolIndex: Int = bmsMaxVolIndex.getOrElse(0)
      def clearBmsMaxVolIndex: ChargeProcessInfo = copy(bmsMaxVolIndex = None)
      def withBmsMaxVolIndex(__v: Int): ChargeProcessInfo = copy(bmsMaxVolIndex = Some(__v))
      def getBmsMaxTempValue: Int = bmsMaxTempValue.getOrElse(0)
      def clearBmsMaxTempValue: ChargeProcessInfo = copy(bmsMaxTempValue = None)
      def withBmsMaxTempValue(__v: Int): ChargeProcessInfo = copy(bmsMaxTempValue = Some(__v))
      def getBmsMaxTempIndex: Int = bmsMaxTempIndex.getOrElse(0)
      def clearBmsMaxTempIndex: ChargeProcessInfo = copy(bmsMaxTempIndex = None)
      def withBmsMaxTempIndex(__v: Int): ChargeProcessInfo = copy(bmsMaxTempIndex = Some(__v))
      def getBmsMinTempValue: Int = bmsMinTempValue.getOrElse(0)
      def clearBmsMinTempValue: ChargeProcessInfo = copy(bmsMinTempValue = None)
      def withBmsMinTempValue(__v: Int): ChargeProcessInfo = copy(bmsMinTempValue = Some(__v))
      def getBmsMinTempIndex: Int = bmsMinTempIndex.getOrElse(0)
      def clearBmsMinTempIndex: ChargeProcessInfo = copy(bmsMinTempIndex = None)
      def withBmsMinTempIndex(__v: Int): ChargeProcessInfo = copy(bmsMinTempIndex = Some(__v))
      def getBmsWarnStatus1: Int = bmsWarnStatus1.getOrElse(0)
      def clearBmsWarnStatus1: ChargeProcessInfo = copy(bmsWarnStatus1 = None)
      def withBmsWarnStatus1(__v: Int): ChargeProcessInfo = copy(bmsWarnStatus1 = Some(__v))
      def getBmsWarnStatus2: Int = bmsWarnStatus2.getOrElse(0)
      def clearBmsWarnStatus2: ChargeProcessInfo = copy(bmsWarnStatus2 = None)
      def withBmsWarnStatus2(__v: Int): ChargeProcessInfo = copy(bmsWarnStatus2 = Some(__v))
      def clearBmsCellVolList = copy(bmsCellVolList = _root_.scala.collection.Seq.empty)
      def addBmsCellVolList(__vs: Int*): ChargeProcessInfo = addAllBmsCellVolList(__vs)
      def addAllBmsCellVolList(__vs: TraversableOnce[Int]): ChargeProcessInfo = copy(bmsCellVolList = bmsCellVolList ++ __vs)
      def withBmsCellVolList(__v: _root_.scala.collection.Seq[Int]): ChargeProcessInfo = copy(bmsCellVolList = __v)
      def clearBmsCellTempList = copy(bmsCellTempList = _root_.scala.collection.Seq.empty)
      def addBmsCellTempList(__vs: Int*): ChargeProcessInfo = addAllBmsCellTempList(__vs)
      def addAllBmsCellTempList(__vs: TraversableOnce[Int]): ChargeProcessInfo = copy(bmsCellTempList = bmsCellTempList ++ __vs)
      def withBmsCellTempList(__v: _root_.scala.collection.Seq[Int]): ChargeProcessInfo = copy(bmsCellTempList = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 10 => bmsRequireVoltage.orNull
          case 11 => bmsRequireCurrent.orNull
          case 12 => bmsRequireMode.orNull
          case 20 => bmsMeasureVoltage.orNull
          case 21 => bmsMeasureCurrent.orNull
          case 22 => bmsMaxVolValue.orNull
          case 23 => bmsCurrentSoc.orNull
          case 24 => bmsRemainTime.orNull
          case 30 => chargerOutputVoltage.orNull
          case 31 => chargerOutputCurrent.orNull
          case 32 => chargerTotalTime.orNull
          case 33 => chargerEnableStatus.orNull
          case 40 => bmsMaxVolIndex.orNull
          case 41 => bmsMaxTempValue.orNull
          case 42 => bmsMaxTempIndex.orNull
          case 43 => bmsMinTempValue.orNull
          case 44 => bmsMinTempIndex.orNull
          case 45 => bmsWarnStatus1.orNull
          case 46 => bmsWarnStatus2.orNull
          case 50 => bmsCellVolList
          case 60 => bmsCellTempList
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 10 => bmsRequireVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => bmsRequireCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => bmsRequireMode.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 20 => bmsMeasureVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 21 => bmsMeasureCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 22 => bmsMaxVolValue.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 23 => bmsCurrentSoc.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 24 => bmsRemainTime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 30 => chargerOutputVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 31 => chargerOutputCurrent.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 32 => chargerTotalTime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 33 => chargerEnableStatus.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 40 => bmsMaxVolIndex.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 41 => bmsMaxTempValue.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 42 => bmsMaxTempIndex.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 43 => bmsMinTempValue.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 44 => bmsMinTempIndex.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 45 => bmsWarnStatus1.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 46 => bmsWarnStatus2.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 50 => _root_.scalapb.descriptors.PRepeated(bmsCellVolList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
          case 60 => _root_.scalapb.descriptors.PRepeated(bmsCellTempList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo
  }
  
  object ChargeProcessInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(14)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(15)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(17)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(18)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.getOrElse(__fields.get(19), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
        __fieldsMap.getOrElse(__fields.get(20), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(44).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(45).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(46).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(50).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(60).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo(
    )
    implicit class ChargeProcessInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo](_l) {
      def bmsRequireVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsRequireVoltage)((c_, f_) => c_.copy(bmsRequireVoltage = Some(f_)))
      def optionalBmsRequireVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsRequireVoltage)((c_, f_) => c_.copy(bmsRequireVoltage = f_))
      def bmsRequireCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsRequireCurrent)((c_, f_) => c_.copy(bmsRequireCurrent = Some(f_)))
      def optionalBmsRequireCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsRequireCurrent)((c_, f_) => c_.copy(bmsRequireCurrent = f_))
      def bmsRequireMode: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsRequireMode)((c_, f_) => c_.copy(bmsRequireMode = Some(f_)))
      def optionalBmsRequireMode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsRequireMode)((c_, f_) => c_.copy(bmsRequireMode = f_))
      def bmsMeasureVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMeasureVoltage)((c_, f_) => c_.copy(bmsMeasureVoltage = Some(f_)))
      def optionalBmsMeasureVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMeasureVoltage)((c_, f_) => c_.copy(bmsMeasureVoltage = f_))
      def bmsMeasureCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMeasureCurrent)((c_, f_) => c_.copy(bmsMeasureCurrent = Some(f_)))
      def optionalBmsMeasureCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMeasureCurrent)((c_, f_) => c_.copy(bmsMeasureCurrent = f_))
      def bmsMaxVolValue: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMaxVolValue)((c_, f_) => c_.copy(bmsMaxVolValue = Some(f_)))
      def optionalBmsMaxVolValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMaxVolValue)((c_, f_) => c_.copy(bmsMaxVolValue = f_))
      def bmsCurrentSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsCurrentSoc)((c_, f_) => c_.copy(bmsCurrentSoc = Some(f_)))
      def optionalBmsCurrentSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsCurrentSoc)((c_, f_) => c_.copy(bmsCurrentSoc = f_))
      def bmsRemainTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsRemainTime)((c_, f_) => c_.copy(bmsRemainTime = Some(f_)))
      def optionalBmsRemainTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsRemainTime)((c_, f_) => c_.copy(bmsRemainTime = f_))
      def chargerOutputVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerOutputVoltage)((c_, f_) => c_.copy(chargerOutputVoltage = Some(f_)))
      def optionalChargerOutputVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerOutputVoltage)((c_, f_) => c_.copy(chargerOutputVoltage = f_))
      def chargerOutputCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerOutputCurrent)((c_, f_) => c_.copy(chargerOutputCurrent = Some(f_)))
      def optionalChargerOutputCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerOutputCurrent)((c_, f_) => c_.copy(chargerOutputCurrent = f_))
      def chargerTotalTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerTotalTime)((c_, f_) => c_.copy(chargerTotalTime = Some(f_)))
      def optionalChargerTotalTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerTotalTime)((c_, f_) => c_.copy(chargerTotalTime = f_))
      def chargerEnableStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerEnableStatus)((c_, f_) => c_.copy(chargerEnableStatus = Some(f_)))
      def optionalChargerEnableStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerEnableStatus)((c_, f_) => c_.copy(chargerEnableStatus = f_))
      def bmsMaxVolIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMaxVolIndex)((c_, f_) => c_.copy(bmsMaxVolIndex = Some(f_)))
      def optionalBmsMaxVolIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMaxVolIndex)((c_, f_) => c_.copy(bmsMaxVolIndex = f_))
      def bmsMaxTempValue: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMaxTempValue)((c_, f_) => c_.copy(bmsMaxTempValue = Some(f_)))
      def optionalBmsMaxTempValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMaxTempValue)((c_, f_) => c_.copy(bmsMaxTempValue = f_))
      def bmsMaxTempIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMaxTempIndex)((c_, f_) => c_.copy(bmsMaxTempIndex = Some(f_)))
      def optionalBmsMaxTempIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMaxTempIndex)((c_, f_) => c_.copy(bmsMaxTempIndex = f_))
      def bmsMinTempValue: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMinTempValue)((c_, f_) => c_.copy(bmsMinTempValue = Some(f_)))
      def optionalBmsMinTempValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMinTempValue)((c_, f_) => c_.copy(bmsMinTempValue = f_))
      def bmsMinTempIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsMinTempIndex)((c_, f_) => c_.copy(bmsMinTempIndex = Some(f_)))
      def optionalBmsMinTempIndex: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsMinTempIndex)((c_, f_) => c_.copy(bmsMinTempIndex = f_))
      def bmsWarnStatus1: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsWarnStatus1)((c_, f_) => c_.copy(bmsWarnStatus1 = Some(f_)))
      def optionalBmsWarnStatus1: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsWarnStatus1)((c_, f_) => c_.copy(bmsWarnStatus1 = f_))
      def bmsWarnStatus2: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBmsWarnStatus2)((c_, f_) => c_.copy(bmsWarnStatus2 = Some(f_)))
      def optionalBmsWarnStatus2: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.bmsWarnStatus2)((c_, f_) => c_.copy(bmsWarnStatus2 = f_))
      def bmsCellVolList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.bmsCellVolList)((c_, f_) => c_.copy(bmsCellVolList = f_))
      def bmsCellTempList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.bmsCellTempList)((c_, f_) => c_.copy(bmsCellTempList = f_))
    }
    final val BMS_REQUIRE_VOLTAGE_FIELD_NUMBER = 10
    final val BMS_REQUIRE_CURRENT_FIELD_NUMBER = 11
    final val BMS_REQUIRE_MODE_FIELD_NUMBER = 12
    final val BMS_MEASURE_VOLTAGE_FIELD_NUMBER = 20
    final val BMS_MEASURE_CURRENT_FIELD_NUMBER = 21
    final val BMS_MAX_VOL_VALUE_FIELD_NUMBER = 22
    final val BMS_CURRENT_SOC_FIELD_NUMBER = 23
    final val BMS_REMAIN_TIME_FIELD_NUMBER = 24
    final val CHARGER_OUTPUT_VOLTAGE_FIELD_NUMBER = 30
    final val CHARGER_OUTPUT_CURRENT_FIELD_NUMBER = 31
    final val CHARGER_TOTAL_TIME_FIELD_NUMBER = 32
    final val CHARGER_ENABLE_STATUS_FIELD_NUMBER = 33
    final val BMS_MAX_VOL_INDEX_FIELD_NUMBER = 40
    final val BMS_MAX_TEMP_VALUE_FIELD_NUMBER = 41
    final val BMS_MAX_TEMP_INDEX_FIELD_NUMBER = 42
    final val BMS_MIN_TEMP_VALUE_FIELD_NUMBER = 43
    final val BMS_MIN_TEMP_INDEX_FIELD_NUMBER = 44
    final val BMS_WARN_STATUS1_FIELD_NUMBER = 45
    final val BMS_WARN_STATUS2_FIELD_NUMBER = 46
    final val BMS_CELL_VOL_LIST_FIELD_NUMBER = 50
    final val BMS_CELL_TEMP_LIST_FIELD_NUMBER = 60
  }
  
  /** * 充电停止阶段信息的消息定义。消息数据从充电机国标的'PGN 6400/BST报文'、'PGN 6656/CST报文'、'PGN 7168/BSD报文'、'PGN 7424/CSD报文'中获取。
    *
    * @param plugId
    *  / (可选)充电枪ID。从充电机国标的'PGN 7424/CSD报文'中获取。范围：0～0xFFFFFFFF。
    * @param batteryStopReason
    *  / (可选)充电车辆中止充电原因。从充电机国标的'PGN 6400/BST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：达到所需SOC目标值，02：不可信；&lt;Bit2～3&gt;：00：正常，01：达到总电压设定值，02：不可信；&lt;Bit4～5&gt;：00：正常，01：达到单体电压设定值，02：不可信；&lt;Bit6～7&gt;：00：正常，01：充电机中止，02：不可信。
    * @param batteryStopFault
    *  / (可选)充电车辆中止充电故障。从充电机国标的'PGN 6400/BST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：绝缘故障，02：不可信；&lt;Bit2～3&gt;：00：正常，01：输出连接器过温，02：不可信；&lt;Bit4～5&gt;：00：正常，01：BMS元件、输出连接器过温，02：不可信；&lt;Bit6～7&gt;：00：正常，01：充电连接器故障，02：不可信；&lt;Bit8～9&gt;：00：正常，01：电池组温度过高，02：不可信；&lt;Bit10～11&gt;：00：正常，01：高压继电器故障，02：不可信；&lt;Bit12～13&gt;：00：正常，01：检测点2电压故障，02：不可信；&lt;Bit14～15&gt;：00：正常，01：其他故障，02：不可信。
    * @param batteryStopError
    *  / (可选)充电车辆中止充电错误。从充电机国标的'PGN 6400/BST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：电流超过需求值，02：不可信；&lt;Bit2～3&gt;：00：正常，01：电压异常，02：不可信。
    * @param chargerStopReason
    *  / (可选)充电机中止充电原因。从充电机国标的'PGN 6656/CST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：达到充电机设定的中止条件，02：不可信；&lt;Bit2～3&gt;：00：正常，01：人工中止，02：不可信；&lt;Bit4～5&gt;：00：正常，01：故障中止，02：不可信；&lt;Bit6～7&gt;：00：正常，01：BMS中止，02：不可信。
    * @param chargerStopFault
    *  / (可选)充电机中止充电故障。从充电机国标的'PGN 6656/CST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：充电机过温，02：不可信；&lt;Bit2～3&gt;：00：正常，01：充电连接器故障，02：不可信；&lt;Bit4～5&gt;：00：正常，01：充电机内部过温，02：不可信；&lt;Bit6～7&gt;：00：正常，01：所需电量不能传送，02：不可信；&lt;Bit8～9&gt;：00：正常，01：充电机急停，02：不可信；&lt;Bit10～11&gt;：00：正常，01：其他故障，02：不可信。
    * @param chargerStopError
    *  / (可选)充电机中止充电错误。从充电机国标的'PGN 6656/CST报文'中获取。&lt;Bit0～1&gt;：00：正常，01：电流不匹配，02：不可信；&lt;Bit2～3&gt;：00：正常，01：电压异常，02：不可信。
    * @param batteryFinishSoc
    *  / (可选)充电车辆中止荷电状态SOC。从充电机国标的'PGN 7168/BSD报文'中获取。单位：1%，范围：0%～100%。
    * @param batteryMaxVoltage
    *  / (可选)充电车辆动力蓄电池单体最高电压。从充电机国标的'PGN 7168/BSD报文'中获取。单位：0.01V，范围：0V～24.00V。
    * @param batteryMinVoltage
    *  / (可选)充电车辆动力蓄电池单体最低电压。从充电机国标的'PGN 7168/BSD报文'中获取。单位：0.01V，范围：0V～24.00V。
    * @param batteryMaxTemp
    *  / (可选)充电车辆动力蓄电池最高温度。从充电机国标的'PGN 7168/BSD报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    * @param batteryMinTemp
    *  / (可选)充电车辆动力蓄电池最低温度。从充电机国标的'PGN 7168/BSD报文'中获取。单位：1°C，偏移：-50°C，范围：-50°C～200°C。
    * @param chargerTotalTime
    *  / (可选)充电机累计充电时间。从充电机国标的'PGN 7424/CSD报文'中获取。单位：1分钟，范围：0分钟～600分钟。
    * @param chargerOutputPower
    *  / (可选)充电机输出能量。从充电机国标的'PGN 7424/CSD报文'中获取。单位：0.1kwh，范围：0kwh～1000kwh。
    */
  @SerialVersionUID(0L)
  final case class ChargeStopInfo(
      plugId: scala.Option[Int] = None,
      batteryStopReason: scala.Option[Int] = None,
      batteryStopFault: scala.Option[Int] = None,
      batteryStopError: scala.Option[Int] = None,
      chargerStopReason: scala.Option[Int] = None,
      chargerStopFault: scala.Option[Int] = None,
      chargerStopError: scala.Option[Int] = None,
      batteryFinishSoc: scala.Option[Int] = None,
      batteryMaxVoltage: scala.Option[Int] = None,
      batteryMinVoltage: scala.Option[Int] = None,
      batteryMaxTemp: scala.Option[Int] = None,
      batteryMinTemp: scala.Option[Int] = None,
      chargerTotalTime: scala.Option[Int] = None,
      chargerOutputPower: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ChargeStopInfo] with com.trueaccord.lenses.Updatable[ChargeStopInfo] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (plugId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, plugId.get) }
        if (batteryStopReason.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, batteryStopReason.get) }
        if (batteryStopFault.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, batteryStopFault.get) }
        if (batteryStopError.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, batteryStopError.get) }
        if (chargerStopReason.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(20, chargerStopReason.get) }
        if (chargerStopFault.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(21, chargerStopFault.get) }
        if (chargerStopError.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(22, chargerStopError.get) }
        if (batteryFinishSoc.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(30, batteryFinishSoc.get) }
        if (batteryMaxVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(31, batteryMaxVoltage.get) }
        if (batteryMinVoltage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(32, batteryMinVoltage.get) }
        if (batteryMaxTemp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(33, batteryMaxTemp.get) }
        if (batteryMinTemp.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(34, batteryMinTemp.get) }
        if (chargerTotalTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(40, chargerTotalTime.get) }
        if (chargerOutputPower.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(41, chargerOutputPower.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        plugId.foreach { __v =>
          _output__.writeUInt32(1, __v)
        };
        batteryStopReason.foreach { __v =>
          _output__.writeUInt32(10, __v)
        };
        batteryStopFault.foreach { __v =>
          _output__.writeUInt32(11, __v)
        };
        batteryStopError.foreach { __v =>
          _output__.writeUInt32(12, __v)
        };
        chargerStopReason.foreach { __v =>
          _output__.writeUInt32(20, __v)
        };
        chargerStopFault.foreach { __v =>
          _output__.writeUInt32(21, __v)
        };
        chargerStopError.foreach { __v =>
          _output__.writeUInt32(22, __v)
        };
        batteryFinishSoc.foreach { __v =>
          _output__.writeUInt32(30, __v)
        };
        batteryMaxVoltage.foreach { __v =>
          _output__.writeUInt32(31, __v)
        };
        batteryMinVoltage.foreach { __v =>
          _output__.writeUInt32(32, __v)
        };
        batteryMaxTemp.foreach { __v =>
          _output__.writeUInt32(33, __v)
        };
        batteryMinTemp.foreach { __v =>
          _output__.writeUInt32(34, __v)
        };
        chargerTotalTime.foreach { __v =>
          _output__.writeUInt32(40, __v)
        };
        chargerOutputPower.foreach { __v =>
          _output__.writeUInt32(41, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo = {
        var __plugId = this.plugId
        var __batteryStopReason = this.batteryStopReason
        var __batteryStopFault = this.batteryStopFault
        var __batteryStopError = this.batteryStopError
        var __chargerStopReason = this.chargerStopReason
        var __chargerStopFault = this.chargerStopFault
        var __chargerStopError = this.chargerStopError
        var __batteryFinishSoc = this.batteryFinishSoc
        var __batteryMaxVoltage = this.batteryMaxVoltage
        var __batteryMinVoltage = this.batteryMinVoltage
        var __batteryMaxTemp = this.batteryMaxTemp
        var __batteryMinTemp = this.batteryMinTemp
        var __chargerTotalTime = this.chargerTotalTime
        var __chargerOutputPower = this.chargerOutputPower
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __plugId = Some(_input__.readUInt32())
            case 80 =>
              __batteryStopReason = Some(_input__.readUInt32())
            case 88 =>
              __batteryStopFault = Some(_input__.readUInt32())
            case 96 =>
              __batteryStopError = Some(_input__.readUInt32())
            case 160 =>
              __chargerStopReason = Some(_input__.readUInt32())
            case 168 =>
              __chargerStopFault = Some(_input__.readUInt32())
            case 176 =>
              __chargerStopError = Some(_input__.readUInt32())
            case 240 =>
              __batteryFinishSoc = Some(_input__.readUInt32())
            case 248 =>
              __batteryMaxVoltage = Some(_input__.readUInt32())
            case 256 =>
              __batteryMinVoltage = Some(_input__.readUInt32())
            case 264 =>
              __batteryMaxTemp = Some(_input__.readUInt32())
            case 272 =>
              __batteryMinTemp = Some(_input__.readUInt32())
            case 320 =>
              __chargerTotalTime = Some(_input__.readUInt32())
            case 328 =>
              __chargerOutputPower = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo(
            plugId = __plugId,
            batteryStopReason = __batteryStopReason,
            batteryStopFault = __batteryStopFault,
            batteryStopError = __batteryStopError,
            chargerStopReason = __chargerStopReason,
            chargerStopFault = __chargerStopFault,
            chargerStopError = __chargerStopError,
            batteryFinishSoc = __batteryFinishSoc,
            batteryMaxVoltage = __batteryMaxVoltage,
            batteryMinVoltage = __batteryMinVoltage,
            batteryMaxTemp = __batteryMaxTemp,
            batteryMinTemp = __batteryMinTemp,
            chargerTotalTime = __chargerTotalTime,
            chargerOutputPower = __chargerOutputPower
        )
      }
      def getPlugId: Int = plugId.getOrElse(0)
      def clearPlugId: ChargeStopInfo = copy(plugId = None)
      def withPlugId(__v: Int): ChargeStopInfo = copy(plugId = Some(__v))
      def getBatteryStopReason: Int = batteryStopReason.getOrElse(0)
      def clearBatteryStopReason: ChargeStopInfo = copy(batteryStopReason = None)
      def withBatteryStopReason(__v: Int): ChargeStopInfo = copy(batteryStopReason = Some(__v))
      def getBatteryStopFault: Int = batteryStopFault.getOrElse(0)
      def clearBatteryStopFault: ChargeStopInfo = copy(batteryStopFault = None)
      def withBatteryStopFault(__v: Int): ChargeStopInfo = copy(batteryStopFault = Some(__v))
      def getBatteryStopError: Int = batteryStopError.getOrElse(0)
      def clearBatteryStopError: ChargeStopInfo = copy(batteryStopError = None)
      def withBatteryStopError(__v: Int): ChargeStopInfo = copy(batteryStopError = Some(__v))
      def getChargerStopReason: Int = chargerStopReason.getOrElse(0)
      def clearChargerStopReason: ChargeStopInfo = copy(chargerStopReason = None)
      def withChargerStopReason(__v: Int): ChargeStopInfo = copy(chargerStopReason = Some(__v))
      def getChargerStopFault: Int = chargerStopFault.getOrElse(0)
      def clearChargerStopFault: ChargeStopInfo = copy(chargerStopFault = None)
      def withChargerStopFault(__v: Int): ChargeStopInfo = copy(chargerStopFault = Some(__v))
      def getChargerStopError: Int = chargerStopError.getOrElse(0)
      def clearChargerStopError: ChargeStopInfo = copy(chargerStopError = None)
      def withChargerStopError(__v: Int): ChargeStopInfo = copy(chargerStopError = Some(__v))
      def getBatteryFinishSoc: Int = batteryFinishSoc.getOrElse(0)
      def clearBatteryFinishSoc: ChargeStopInfo = copy(batteryFinishSoc = None)
      def withBatteryFinishSoc(__v: Int): ChargeStopInfo = copy(batteryFinishSoc = Some(__v))
      def getBatteryMaxVoltage: Int = batteryMaxVoltage.getOrElse(0)
      def clearBatteryMaxVoltage: ChargeStopInfo = copy(batteryMaxVoltage = None)
      def withBatteryMaxVoltage(__v: Int): ChargeStopInfo = copy(batteryMaxVoltage = Some(__v))
      def getBatteryMinVoltage: Int = batteryMinVoltage.getOrElse(0)
      def clearBatteryMinVoltage: ChargeStopInfo = copy(batteryMinVoltage = None)
      def withBatteryMinVoltage(__v: Int): ChargeStopInfo = copy(batteryMinVoltage = Some(__v))
      def getBatteryMaxTemp: Int = batteryMaxTemp.getOrElse(0)
      def clearBatteryMaxTemp: ChargeStopInfo = copy(batteryMaxTemp = None)
      def withBatteryMaxTemp(__v: Int): ChargeStopInfo = copy(batteryMaxTemp = Some(__v))
      def getBatteryMinTemp: Int = batteryMinTemp.getOrElse(0)
      def clearBatteryMinTemp: ChargeStopInfo = copy(batteryMinTemp = None)
      def withBatteryMinTemp(__v: Int): ChargeStopInfo = copy(batteryMinTemp = Some(__v))
      def getChargerTotalTime: Int = chargerTotalTime.getOrElse(0)
      def clearChargerTotalTime: ChargeStopInfo = copy(chargerTotalTime = None)
      def withChargerTotalTime(__v: Int): ChargeStopInfo = copy(chargerTotalTime = Some(__v))
      def getChargerOutputPower: Int = chargerOutputPower.getOrElse(0)
      def clearChargerOutputPower: ChargeStopInfo = copy(chargerOutputPower = None)
      def withChargerOutputPower(__v: Int): ChargeStopInfo = copy(chargerOutputPower = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => plugId.orNull
          case 10 => batteryStopReason.orNull
          case 11 => batteryStopFault.orNull
          case 12 => batteryStopError.orNull
          case 20 => chargerStopReason.orNull
          case 21 => chargerStopFault.orNull
          case 22 => chargerStopError.orNull
          case 30 => batteryFinishSoc.orNull
          case 31 => batteryMaxVoltage.orNull
          case 32 => batteryMinVoltage.orNull
          case 33 => batteryMaxTemp.orNull
          case 34 => batteryMinTemp.orNull
          case 40 => chargerTotalTime.orNull
          case 41 => chargerOutputPower.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => plugId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => batteryStopReason.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => batteryStopFault.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => batteryStopError.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 20 => chargerStopReason.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 21 => chargerStopFault.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 22 => chargerStopError.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 30 => batteryFinishSoc.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 31 => batteryMaxVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 32 => batteryMinVoltage.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 33 => batteryMaxTemp.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 34 => batteryMinTemp.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 40 => chargerTotalTime.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 41 => chargerOutputPower.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo
  }
  
  object ChargeStopInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.javaDescriptor.getNestedTypes.get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgCharge.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo(
    )
    implicit class ChargeStopInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo](_l) {
      def plugId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlugId)((c_, f_) => c_.copy(plugId = Some(f_)))
      def optionalPlugId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plugId)((c_, f_) => c_.copy(plugId = f_))
      def batteryStopReason: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryStopReason)((c_, f_) => c_.copy(batteryStopReason = Some(f_)))
      def optionalBatteryStopReason: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryStopReason)((c_, f_) => c_.copy(batteryStopReason = f_))
      def batteryStopFault: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryStopFault)((c_, f_) => c_.copy(batteryStopFault = Some(f_)))
      def optionalBatteryStopFault: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryStopFault)((c_, f_) => c_.copy(batteryStopFault = f_))
      def batteryStopError: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryStopError)((c_, f_) => c_.copy(batteryStopError = Some(f_)))
      def optionalBatteryStopError: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryStopError)((c_, f_) => c_.copy(batteryStopError = f_))
      def chargerStopReason: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerStopReason)((c_, f_) => c_.copy(chargerStopReason = Some(f_)))
      def optionalChargerStopReason: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerStopReason)((c_, f_) => c_.copy(chargerStopReason = f_))
      def chargerStopFault: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerStopFault)((c_, f_) => c_.copy(chargerStopFault = Some(f_)))
      def optionalChargerStopFault: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerStopFault)((c_, f_) => c_.copy(chargerStopFault = f_))
      def chargerStopError: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerStopError)((c_, f_) => c_.copy(chargerStopError = Some(f_)))
      def optionalChargerStopError: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerStopError)((c_, f_) => c_.copy(chargerStopError = f_))
      def batteryFinishSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryFinishSoc)((c_, f_) => c_.copy(batteryFinishSoc = Some(f_)))
      def optionalBatteryFinishSoc: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryFinishSoc)((c_, f_) => c_.copy(batteryFinishSoc = f_))
      def batteryMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryMaxVoltage)((c_, f_) => c_.copy(batteryMaxVoltage = Some(f_)))
      def optionalBatteryMaxVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryMaxVoltage)((c_, f_) => c_.copy(batteryMaxVoltage = f_))
      def batteryMinVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryMinVoltage)((c_, f_) => c_.copy(batteryMinVoltage = Some(f_)))
      def optionalBatteryMinVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryMinVoltage)((c_, f_) => c_.copy(batteryMinVoltage = f_))
      def batteryMaxTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryMaxTemp)((c_, f_) => c_.copy(batteryMaxTemp = Some(f_)))
      def optionalBatteryMaxTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryMaxTemp)((c_, f_) => c_.copy(batteryMaxTemp = f_))
      def batteryMinTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getBatteryMinTemp)((c_, f_) => c_.copy(batteryMinTemp = Some(f_)))
      def optionalBatteryMinTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.batteryMinTemp)((c_, f_) => c_.copy(batteryMinTemp = f_))
      def chargerTotalTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerTotalTime)((c_, f_) => c_.copy(chargerTotalTime = Some(f_)))
      def optionalChargerTotalTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerTotalTime)((c_, f_) => c_.copy(chargerTotalTime = f_))
      def chargerOutputPower: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getChargerOutputPower)((c_, f_) => c_.copy(chargerOutputPower = Some(f_)))
      def optionalChargerOutputPower: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.chargerOutputPower)((c_, f_) => c_.copy(chargerOutputPower = f_))
    }
    final val PLUG_ID_FIELD_NUMBER = 1
    final val BATTERY_STOP_REASON_FIELD_NUMBER = 10
    final val BATTERY_STOP_FAULT_FIELD_NUMBER = 11
    final val BATTERY_STOP_ERROR_FIELD_NUMBER = 12
    final val CHARGER_STOP_REASON_FIELD_NUMBER = 20
    final val CHARGER_STOP_FAULT_FIELD_NUMBER = 21
    final val CHARGER_STOP_ERROR_FIELD_NUMBER = 22
    final val BATTERY_FINISH_SOC_FIELD_NUMBER = 30
    final val BATTERY_MAX_VOLTAGE_FIELD_NUMBER = 31
    final val BATTERY_MIN_VOLTAGE_FIELD_NUMBER = 32
    final val BATTERY_MAX_TEMP_FIELD_NUMBER = 33
    final val BATTERY_MIN_TEMP_FIELD_NUMBER = 34
    final val CHARGER_TOTAL_TIME_FIELD_NUMBER = 40
    final val CHARGER_OUTPUT_POWER_FIELD_NUMBER = 41
  }
  
  implicit class DataChgChargeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge](_l) {
    def chargeHandshake: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo] = field(_.getChargeHandshake)((c_, f_) => c_.copy(chargeHandshake = Some(f_)))
    def optionalChargeHandshake: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeHandshakeInfo]] = field(_.chargeHandshake)((c_, f_) => c_.copy(chargeHandshake = f_))
    def chargeConfig: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo] = field(_.getChargeConfig)((c_, f_) => c_.copy(chargeConfig = Some(f_)))
    def optionalChargeConfig: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeConfigInfo]] = field(_.chargeConfig)((c_, f_) => c_.copy(chargeConfig = f_))
    def chargeProcess: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo] = field(_.getChargeProcess)((c_, f_) => c_.copy(chargeProcess = Some(f_)))
    def optionalChargeProcess: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeProcessInfo]] = field(_.chargeProcess)((c_, f_) => c_.copy(chargeProcess = f_))
    def chargeStop: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo] = field(_.getChargeStop)((c_, f_) => c_.copy(chargeStop = Some(f_)))
    def optionalChargeStop: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgCharge.ChargeStopInfo]] = field(_.chargeStop)((c_, f_) => c_.copy(chargeStop = f_))
  }
  final val CHARGE_HANDSHAKE_FIELD_NUMBER = 1
  final val CHARGE_CONFIG_FIELD_NUMBER = 2
  final val CHARGE_PROCESS_FIELD_NUMBER = 3
  final val CHARGE_STOP_FIELD_NUMBER = 4
}
