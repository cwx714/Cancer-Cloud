// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 充电桩TCU设备充电过程事件应答的消息定义。其中：event_id为请求消息的消息头的消息序列号。
  *
  * @param billInfo
  *  / (可选)充电计费账单的消费及价格明细。此数据只在平台计费的情况下有效。
  */
@SerialVersionUID(0L)
final case class ResultChgChargeProcess(
    billInfo: scala.Option[com.chargerlink.gateway.bean.data.DataChgBill] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResultChgChargeProcess] with com.trueaccord.lenses.Updatable[ResultChgChargeProcess] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (billInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(billInfo.get.serializedSize) + billInfo.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      billInfo.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.ResultChgChargeProcess = {
      var __billInfo = this.billInfo
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __billInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __billInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgBill.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.event.ResultChgChargeProcess(
          billInfo = __billInfo
      )
    }
    def getBillInfo: com.chargerlink.gateway.bean.data.DataChgBill = billInfo.getOrElse(com.chargerlink.gateway.bean.data.DataChgBill.defaultInstance)
    def clearBillInfo: ResultChgChargeProcess = copy(billInfo = None)
    def withBillInfo(__v: com.chargerlink.gateway.bean.data.DataChgBill): ResultChgChargeProcess = copy(billInfo = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => billInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => billInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.ResultChgChargeProcess
}

object ResultChgChargeProcess extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeProcess] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeProcess] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.ResultChgChargeProcess = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.ResultChgChargeProcess(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.ResultChgChargeProcess] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.ResultChgChargeProcess(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventChargerProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventChargerProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgBill
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.ResultChgChargeProcess(
  )
  implicit class ResultChgChargeProcessLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeProcess]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeProcess](_l) {
    def billInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill] = field(_.getBillInfo)((c_, f_) => c_.copy(billInfo = Some(f_)))
    def optionalBillInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgBill]] = field(_.billInfo)((c_, f_) => c_.copy(billInfo = f_))
  }
  final val BILL_INFO_FIELD_NUMBER = 1
}
