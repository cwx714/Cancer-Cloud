// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 当前充电订单的计费账单的消息定义。只有当前充电桩处于充电状态时数据才有效。
  *
  * @param priceSchemeId
  *  / (可选)计费模板ID。此订单将使用对应的计费模板计费。
  * @param totalMoney
  *  / (可选)整个充电服务总费用。单位：0.01元。如果为空，则根据详细消费项累加计算总费用。
  * @param billList
  *  / (可选)组成充电服务总费用的详细消费项列表。消费项包括：分时计费的充电费、服务费、停车费等。
  */
@SerialVersionUID(0L)
final case class DataChgBill(
    priceSchemeId: scala.Option[Int] = None,
    totalMoney: scala.Option[Int] = None,
    billList: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgBill.BillItem] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgBill] with com.trueaccord.lenses.Updatable[DataChgBill] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (priceSchemeId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, priceSchemeId.get) }
      if (totalMoney.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, totalMoney.get) }
      billList.foreach(billList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(billList.serializedSize) + billList.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      priceSchemeId.foreach { __v =>
        _output__.writeUInt32(1, __v)
      };
      totalMoney.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      billList.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgBill = {
      var __priceSchemeId = this.priceSchemeId
      var __totalMoney = this.totalMoney
      val __billList = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataChgBill.BillItem] ++= this.billList)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __priceSchemeId = Some(_input__.readUInt32())
          case 16 =>
            __totalMoney = Some(_input__.readUInt32())
          case 26 =>
            __billList += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataChgBill.BillItem.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.data.DataChgBill(
          priceSchemeId = __priceSchemeId,
          totalMoney = __totalMoney,
          billList = __billList.result()
      )
    }
    def getPriceSchemeId: Int = priceSchemeId.getOrElse(0)
    def clearPriceSchemeId: DataChgBill = copy(priceSchemeId = None)
    def withPriceSchemeId(__v: Int): DataChgBill = copy(priceSchemeId = Some(__v))
    def getTotalMoney: Int = totalMoney.getOrElse(0)
    def clearTotalMoney: DataChgBill = copy(totalMoney = None)
    def withTotalMoney(__v: Int): DataChgBill = copy(totalMoney = Some(__v))
    def clearBillList = copy(billList = _root_.scala.collection.Seq.empty)
    def addBillList(__vs: com.chargerlink.gateway.bean.data.DataChgBill.BillItem*): DataChgBill = addAllBillList(__vs)
    def addAllBillList(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataChgBill.BillItem]): DataChgBill = copy(billList = billList ++ __vs)
    def withBillList(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgBill.BillItem]): DataChgBill = copy(billList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => priceSchemeId.orNull
        case 2 => totalMoney.orNull
        case 3 => billList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => priceSchemeId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => totalMoney.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(billList.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgBill
}

object DataChgBill extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgBill] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgBill] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgBill = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgBill(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgBill.BillItem]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgBill] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgBill(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgBill.BillItem]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => __out = com.chargerlink.gateway.bean.data.DataChgBill.BillItem
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgBill(
  )
  /** * 计费账单的消费数据的消息定义。
    *
    * @param tariffId
    *  / (必填)费率编号ID。在相同计费模板内，所有费率编号ID必须唯一。
    * @param amount
    *  / (必填)消费量。消费量可以是按次、按时间或按电量的值。当消费量为按时间时，单位：1秒；当消费量为按电量时，单位：0.01kwh；当消费量为按次时，单位：1次。
    * @param money
    *  / (可选)消费费用。单位：0.01元。
    */
  @SerialVersionUID(0L)
  final case class BillItem(
      tariffId: Int,
      amount: Int,
      money: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[BillItem] with com.trueaccord.lenses.Updatable[BillItem] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, tariffId)
        __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, amount)
        if (money.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, money.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeUInt32(1, tariffId)
        _output__.writeUInt32(2, amount)
        money.foreach { __v =>
          _output__.writeUInt32(3, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgBill.BillItem = {
        var __tariffId = this.tariffId
        var __amount = this.amount
        var __money = this.money
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __tariffId = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffeL
            case 16 =>
              __amount = _input__.readUInt32()
              __requiredFields0 &= 0xfffffffffffffffdL
            case 24 =>
              __money = Some(_input__.readUInt32())
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.data.DataChgBill.BillItem(
            tariffId = __tariffId,
            amount = __amount,
            money = __money
        )
      }
      def withTariffId(__v: Int): BillItem = copy(tariffId = __v)
      def withAmount(__v: Int): BillItem = copy(amount = __v)
      def getMoney: Int = money.getOrElse(0)
      def clearMoney: BillItem = copy(money = None)
      def withMoney(__v: Int): BillItem = copy(money = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => tariffId
          case 2 => amount
          case 3 => money.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(tariffId)
          case 2 => _root_.scalapb.descriptors.PInt(amount)
          case 3 => money.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgBill.BillItem
  }
  
  object BillItem extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgBill.BillItem] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgBill.BillItem] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgBill.BillItem = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgBill.BillItem(
        __fieldsMap(__fields.get(0)).asInstanceOf[Int],
        __fieldsMap(__fields.get(1)).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgBill.BillItem] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgBill.BillItem(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgBill.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgBill.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgBill.BillItem(
      tariffId = 0,
      amount = 0
    )
    implicit class BillItemLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill.BillItem]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill.BillItem](_l) {
      def tariffId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.tariffId)((c_, f_) => c_.copy(tariffId = f_))
      def amount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
      def money: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMoney)((c_, f_) => c_.copy(money = Some(f_)))
      def optionalMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.money)((c_, f_) => c_.copy(money = f_))
    }
    final val TARIFF_ID_FIELD_NUMBER = 1
    final val AMOUNT_FIELD_NUMBER = 2
    final val MONEY_FIELD_NUMBER = 3
  }
  
  implicit class DataChgBillLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgBill](_l) {
    def priceSchemeId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPriceSchemeId)((c_, f_) => c_.copy(priceSchemeId = Some(f_)))
    def optionalPriceSchemeId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.priceSchemeId)((c_, f_) => c_.copy(priceSchemeId = f_))
    def totalMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getTotalMoney)((c_, f_) => c_.copy(totalMoney = Some(f_)))
    def optionalTotalMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.totalMoney)((c_, f_) => c_.copy(totalMoney = f_))
    def billList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgBill.BillItem]] = field(_.billList)((c_, f_) => c_.copy(billList = f_))
  }
  final val PRICE_SCHEME_ID_FIELD_NUMBER = 1
  final val TOTAL_MONEY_FIELD_NUMBER = 2
  final val BILL_LIST_FIELD_NUMBER = 3
}
