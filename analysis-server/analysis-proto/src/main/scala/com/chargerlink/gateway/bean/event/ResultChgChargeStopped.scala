// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 充电桩TCU设备充电停止事件应答的消息定义。其中：event_id为请求消息的消息头的消息序列号。
  *
  * @param svpOrderId
  *  / (必填)业务系统生成的全局唯一充电订单号。如果请求事件消息中的全局充电订单号为空，则返回业务系统重新生成的全局充电订单号；否则，返回原事件消息中的全局充电订单号。
  * @param authStatus
  *  / (可选)业务系统返回的鉴权结果。
  * @param totalCost
  *  / (可选)业务系统返回的总费用。
  * @param isCharged
  *  / (可选)业务系统返回的是否已扣费。
  */
@SerialVersionUID(0L)
final case class ResultChgChargeStopped(
    svpOrderId: String,
    authStatus: scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth] = None,
    totalCost: scala.Option[Int] = None,
    isCharged: scala.Option[Boolean] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResultChgChargeStopped] with com.trueaccord.lenses.Updatable[ResultChgChargeStopped] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, svpOrderId)
      if (authStatus.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(authStatus.get.serializedSize) + authStatus.get.serializedSize }
      if (totalCost.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, totalCost.get) }
      if (isCharged.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, isCharged.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, svpOrderId)
      authStatus.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      totalCost.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      isCharged.foreach { __v =>
        _output__.writeBool(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.ResultChgChargeStopped = {
      var __svpOrderId = this.svpOrderId
      var __authStatus = this.authStatus
      var __totalCost = this.totalCost
      var __isCharged = this.isCharged
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __svpOrderId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __authStatus = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __authStatus.getOrElse(com.chargerlink.gateway.bean.data.DataChgAuth.defaultInstance)))
          case 24 =>
            __totalCost = Some(_input__.readInt32())
          case 32 =>
            __isCharged = Some(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.ResultChgChargeStopped(
          svpOrderId = __svpOrderId,
          authStatus = __authStatus,
          totalCost = __totalCost,
          isCharged = __isCharged
      )
    }
    def withSvpOrderId(__v: String): ResultChgChargeStopped = copy(svpOrderId = __v)
    def getAuthStatus: com.chargerlink.gateway.bean.data.DataChgAuth = authStatus.getOrElse(com.chargerlink.gateway.bean.data.DataChgAuth.defaultInstance)
    def clearAuthStatus: ResultChgChargeStopped = copy(authStatus = None)
    def withAuthStatus(__v: com.chargerlink.gateway.bean.data.DataChgAuth): ResultChgChargeStopped = copy(authStatus = Some(__v))
    def getTotalCost: Int = totalCost.getOrElse(0)
    def clearTotalCost: ResultChgChargeStopped = copy(totalCost = None)
    def withTotalCost(__v: Int): ResultChgChargeStopped = copy(totalCost = Some(__v))
    def getIsCharged: Boolean = isCharged.getOrElse(false)
    def clearIsCharged: ResultChgChargeStopped = copy(isCharged = None)
    def withIsCharged(__v: Boolean): ResultChgChargeStopped = copy(isCharged = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => svpOrderId
        case 2 => authStatus.orNull
        case 3 => totalCost.orNull
        case 4 => isCharged.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(svpOrderId)
        case 2 => authStatus.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => totalCost.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => isCharged.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.ResultChgChargeStopped
}

object ResultChgChargeStopped extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeStopped] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultChgChargeStopped] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.ResultChgChargeStopped = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.ResultChgChargeStopped(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.ResultChgChargeStopped] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.ResultChgChargeStopped(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventChargerProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventChargerProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = com.chargerlink.gateway.bean.data.DataChgAuth
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.ResultChgChargeStopped(
    svpOrderId = ""
  )
  implicit class ResultChgChargeStoppedLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeStopped]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.ResultChgChargeStopped](_l) {
    def svpOrderId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.svpOrderId)((c_, f_) => c_.copy(svpOrderId = f_))
    def authStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgAuth] = field(_.getAuthStatus)((c_, f_) => c_.copy(authStatus = Some(f_)))
    def optionalAuthStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataChgAuth]] = field(_.authStatus)((c_, f_) => c_.copy(authStatus = f_))
    def totalCost: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getTotalCost)((c_, f_) => c_.copy(totalCost = Some(f_)))
    def optionalTotalCost: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.totalCost)((c_, f_) => c_.copy(totalCost = f_))
    def isCharged: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getIsCharged)((c_, f_) => c_.copy(isCharged = Some(f_)))
    def optionalIsCharged: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.isCharged)((c_, f_) => c_.copy(isCharged = f_))
  }
  final val SVP_ORDER_ID_FIELD_NUMBER = 1
  final val AUTH_STATUS_FIELD_NUMBER = 2
  final val TOTAL_COST_FIELD_NUMBER = 3
  final val IS_CHARGED_FIELD_NUMBER = 4
}
