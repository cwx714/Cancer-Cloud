// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.common



sealed trait PkMeasureType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
  type EnumType = PkMeasureType
  def isPkMeasureVendorExtension: Boolean = false
  def isPkMeasureWorkingStatus: Boolean = false
  def isPkMeasureTemperature: Boolean = false
  def isPkMeasureVoltage: Boolean = false
  def isPkMeasureMilliVol: Boolean = false
  def isPkMeasureCurrent: Boolean = false
  def isPkMeasureGeneralInput: Boolean = false
  def isPkMeasureGeneralAdc: Boolean = false
  def isPkMeasureGuidanceVoltage: Boolean = false
  def isPkMeasureContactorStatus: Boolean = false
  def isPkMeasureDoorStatus: Boolean = false
  def isPkMeasureInputVoltage: Boolean = false
  def isPkMeasureInputVoltageA: Boolean = false
  def isPkMeasureInputVoltageB: Boolean = false
  def isPkMeasureInputVoltageC: Boolean = false
  def isPkMeasureInputCurrent: Boolean = false
  def isPkMeasureInputCurrentA: Boolean = false
  def isPkMeasureInputCurrentB: Boolean = false
  def isPkMeasureInputCurrentC: Boolean = false
  def isPkMeasureOutputVoltage: Boolean = false
  def isPkMeasureOutputCurrent: Boolean = false
  def isPkMeasureWifiRssi: Boolean = false
  def isPkMeasureWirelessSignal: Boolean = false
  def isPkMeasureCpuUsage: Boolean = false
  def isPkMeasureMemoryFree: Boolean = false
  def isPkMeasureStorageFree: Boolean = false
  def isPkMeasureParkingStatus: Boolean = false
  def isPkMeasureParklockStatus: Boolean = false
  def isPkMeasureVoltageA: Boolean = false
  def isPkMeasureVoltageB: Boolean = false
  def isPkMeasureVoltageC: Boolean = false
  def isPkMeasureCurrentA: Boolean = false
  def isPkMeasureCurrentB: Boolean = false
  def isPkMeasureCurrentC: Boolean = false
  def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[PkMeasureType] = com.chargerlink.gateway.bean.common.PkMeasureType
}

object PkMeasureType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[PkMeasureType] {
  implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[PkMeasureType] = this
  @SerialVersionUID(0L)
  case object PK_MEASURE_VENDOR_EXTENSION extends PkMeasureType {
    val value = 0
    val index = 0
    val name = "PK_MEASURE_VENDOR_EXTENSION"
    override def isPkMeasureVendorExtension: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_WORKING_STATUS extends PkMeasureType {
    val value = 1
    val index = 1
    val name = "PK_MEASURE_WORKING_STATUS"
    override def isPkMeasureWorkingStatus: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_TEMPERATURE extends PkMeasureType {
    val value = 100
    val index = 2
    val name = "PK_MEASURE_TEMPERATURE"
    override def isPkMeasureTemperature: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_VOLTAGE extends PkMeasureType {
    val value = 101
    val index = 3
    val name = "PK_MEASURE_VOLTAGE"
    override def isPkMeasureVoltage: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_MILLI_VOL extends PkMeasureType {
    val value = 102
    val index = 4
    val name = "PK_MEASURE_MILLI_VOL"
    override def isPkMeasureMilliVol: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CURRENT extends PkMeasureType {
    val value = 103
    val index = 5
    val name = "PK_MEASURE_CURRENT"
    override def isPkMeasureCurrent: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_GENERAL_INPUT extends PkMeasureType {
    val value = 107
    val index = 6
    val name = "PK_MEASURE_GENERAL_INPUT"
    override def isPkMeasureGeneralInput: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_GENERAL_ADC extends PkMeasureType {
    val value = 108
    val index = 7
    val name = "PK_MEASURE_GENERAL_ADC"
    override def isPkMeasureGeneralAdc: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_GUIDANCE_VOLTAGE extends PkMeasureType {
    val value = 109
    val index = 8
    val name = "PK_MEASURE_GUIDANCE_VOLTAGE"
    override def isPkMeasureGuidanceVoltage: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CONTACTOR_STATUS extends PkMeasureType {
    val value = 110
    val index = 9
    val name = "PK_MEASURE_CONTACTOR_STATUS"
    override def isPkMeasureContactorStatus: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_DOOR_STATUS extends PkMeasureType {
    val value = 116
    val index = 10
    val name = "PK_MEASURE_DOOR_STATUS"
    override def isPkMeasureDoorStatus: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_VOLTAGE extends PkMeasureType {
    val value = 117
    val index = 11
    val name = "PK_MEASURE_INPUT_VOLTAGE"
    override def isPkMeasureInputVoltage: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_VOLTAGE_A extends PkMeasureType {
    val value = 118
    val index = 12
    val name = "PK_MEASURE_INPUT_VOLTAGE_A"
    override def isPkMeasureInputVoltageA: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_VOLTAGE_B extends PkMeasureType {
    val value = 119
    val index = 13
    val name = "PK_MEASURE_INPUT_VOLTAGE_B"
    override def isPkMeasureInputVoltageB: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_VOLTAGE_C extends PkMeasureType {
    val value = 120
    val index = 14
    val name = "PK_MEASURE_INPUT_VOLTAGE_C"
    override def isPkMeasureInputVoltageC: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_CURRENT extends PkMeasureType {
    val value = 121
    val index = 15
    val name = "PK_MEASURE_INPUT_CURRENT"
    override def isPkMeasureInputCurrent: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_CURRENT_A extends PkMeasureType {
    val value = 122
    val index = 16
    val name = "PK_MEASURE_INPUT_CURRENT_A"
    override def isPkMeasureInputCurrentA: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_CURRENT_B extends PkMeasureType {
    val value = 123
    val index = 17
    val name = "PK_MEASURE_INPUT_CURRENT_B"
    override def isPkMeasureInputCurrentB: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_INPUT_CURRENT_C extends PkMeasureType {
    val value = 124
    val index = 18
    val name = "PK_MEASURE_INPUT_CURRENT_C"
    override def isPkMeasureInputCurrentC: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_OUTPUT_VOLTAGE extends PkMeasureType {
    val value = 125
    val index = 19
    val name = "PK_MEASURE_OUTPUT_VOLTAGE"
    override def isPkMeasureOutputVoltage: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_OUTPUT_CURRENT extends PkMeasureType {
    val value = 126
    val index = 20
    val name = "PK_MEASURE_OUTPUT_CURRENT"
    override def isPkMeasureOutputCurrent: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_WIFI_RSSI extends PkMeasureType {
    val value = 127
    val index = 21
    val name = "PK_MEASURE_WIFI_RSSI"
    override def isPkMeasureWifiRssi: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_WIRELESS_SIGNAL extends PkMeasureType {
    val value = 128
    val index = 22
    val name = "PK_MEASURE_WIRELESS_SIGNAL"
    override def isPkMeasureWirelessSignal: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CPU_USAGE extends PkMeasureType {
    val value = 129
    val index = 23
    val name = "PK_MEASURE_CPU_USAGE"
    override def isPkMeasureCpuUsage: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_MEMORY_FREE extends PkMeasureType {
    val value = 130
    val index = 24
    val name = "PK_MEASURE_MEMORY_FREE"
    override def isPkMeasureMemoryFree: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_STORAGE_FREE extends PkMeasureType {
    val value = 131
    val index = 25
    val name = "PK_MEASURE_STORAGE_FREE"
    override def isPkMeasureStorageFree: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_PARKING_STATUS extends PkMeasureType {
    val value = 132
    val index = 26
    val name = "PK_MEASURE_PARKING_STATUS"
    override def isPkMeasureParkingStatus: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_PARKLOCK_STATUS extends PkMeasureType {
    val value = 133
    val index = 27
    val name = "PK_MEASURE_PARKLOCK_STATUS"
    override def isPkMeasureParklockStatus: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_VOLTAGE_A extends PkMeasureType {
    val value = 136
    val index = 28
    val name = "PK_MEASURE_VOLTAGE_A"
    override def isPkMeasureVoltageA: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_VOLTAGE_B extends PkMeasureType {
    val value = 137
    val index = 29
    val name = "PK_MEASURE_VOLTAGE_B"
    override def isPkMeasureVoltageB: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_VOLTAGE_C extends PkMeasureType {
    val value = 138
    val index = 30
    val name = "PK_MEASURE_VOLTAGE_C"
    override def isPkMeasureVoltageC: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CURRENT_A extends PkMeasureType {
    val value = 139
    val index = 31
    val name = "PK_MEASURE_CURRENT_A"
    override def isPkMeasureCurrentA: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CURRENT_B extends PkMeasureType {
    val value = 140
    val index = 32
    val name = "PK_MEASURE_CURRENT_B"
    override def isPkMeasureCurrentB: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PK_MEASURE_CURRENT_C extends PkMeasureType {
    val value = 141
    val index = 33
    val name = "PK_MEASURE_CURRENT_C"
    override def isPkMeasureCurrentC: Boolean = true
  }
  
  @SerialVersionUID(0L)
  case class Unrecognized(value: Int) extends PkMeasureType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.Seq(PK_MEASURE_VENDOR_EXTENSION, PK_MEASURE_WORKING_STATUS, PK_MEASURE_TEMPERATURE, PK_MEASURE_VOLTAGE, PK_MEASURE_MILLI_VOL, PK_MEASURE_CURRENT, PK_MEASURE_GENERAL_INPUT, PK_MEASURE_GENERAL_ADC, PK_MEASURE_GUIDANCE_VOLTAGE, PK_MEASURE_CONTACTOR_STATUS, PK_MEASURE_DOOR_STATUS, PK_MEASURE_INPUT_VOLTAGE, PK_MEASURE_INPUT_VOLTAGE_A, PK_MEASURE_INPUT_VOLTAGE_B, PK_MEASURE_INPUT_VOLTAGE_C, PK_MEASURE_INPUT_CURRENT, PK_MEASURE_INPUT_CURRENT_A, PK_MEASURE_INPUT_CURRENT_B, PK_MEASURE_INPUT_CURRENT_C, PK_MEASURE_OUTPUT_VOLTAGE, PK_MEASURE_OUTPUT_CURRENT, PK_MEASURE_WIFI_RSSI, PK_MEASURE_WIRELESS_SIGNAL, PK_MEASURE_CPU_USAGE, PK_MEASURE_MEMORY_FREE, PK_MEASURE_STORAGE_FREE, PK_MEASURE_PARKING_STATUS, PK_MEASURE_PARKLOCK_STATUS, PK_MEASURE_VOLTAGE_A, PK_MEASURE_VOLTAGE_B, PK_MEASURE_VOLTAGE_C, PK_MEASURE_CURRENT_A, PK_MEASURE_CURRENT_B, PK_MEASURE_CURRENT_C)
  def fromValue(value: Int): PkMeasureType = value match {
    case 0 => PK_MEASURE_VENDOR_EXTENSION
    case 1 => PK_MEASURE_WORKING_STATUS
    case 100 => PK_MEASURE_TEMPERATURE
    case 101 => PK_MEASURE_VOLTAGE
    case 102 => PK_MEASURE_MILLI_VOL
    case 103 => PK_MEASURE_CURRENT
    case 107 => PK_MEASURE_GENERAL_INPUT
    case 108 => PK_MEASURE_GENERAL_ADC
    case 109 => PK_MEASURE_GUIDANCE_VOLTAGE
    case 110 => PK_MEASURE_CONTACTOR_STATUS
    case 116 => PK_MEASURE_DOOR_STATUS
    case 117 => PK_MEASURE_INPUT_VOLTAGE
    case 118 => PK_MEASURE_INPUT_VOLTAGE_A
    case 119 => PK_MEASURE_INPUT_VOLTAGE_B
    case 120 => PK_MEASURE_INPUT_VOLTAGE_C
    case 121 => PK_MEASURE_INPUT_CURRENT
    case 122 => PK_MEASURE_INPUT_CURRENT_A
    case 123 => PK_MEASURE_INPUT_CURRENT_B
    case 124 => PK_MEASURE_INPUT_CURRENT_C
    case 125 => PK_MEASURE_OUTPUT_VOLTAGE
    case 126 => PK_MEASURE_OUTPUT_CURRENT
    case 127 => PK_MEASURE_WIFI_RSSI
    case 128 => PK_MEASURE_WIRELESS_SIGNAL
    case 129 => PK_MEASURE_CPU_USAGE
    case 130 => PK_MEASURE_MEMORY_FREE
    case 131 => PK_MEASURE_STORAGE_FREE
    case 132 => PK_MEASURE_PARKING_STATUS
    case 133 => PK_MEASURE_PARKLOCK_STATUS
    case 136 => PK_MEASURE_VOLTAGE_A
    case 137 => PK_MEASURE_VOLTAGE_B
    case 138 => PK_MEASURE_VOLTAGE_C
    case 139 => PK_MEASURE_CURRENT_A
    case 140 => PK_MEASURE_CURRENT_B
    case 141 => PK_MEASURE_CURRENT_C
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = EnumParkingProto.javaDescriptor.getEnumTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = EnumParkingProto.scalaDescriptor.enums(2)
}