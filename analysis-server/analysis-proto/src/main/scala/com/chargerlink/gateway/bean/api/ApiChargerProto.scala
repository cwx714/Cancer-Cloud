// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.api



object ApiChargerProto {
  private lazy val ProtoBytes: Array[Byte] =
      com.trueaccord.scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChViZWFuL0FwaUNoYXJnZXIucHJvdG8SE0NoYXJnZXJMaW5rLkdhdGV3YXkaFmJlYW4vRW51bUNoYXJnZXIucHJvdG8aFmJlY
  W4vRGF0YUNoYXJnZXIucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8i5ScKE0NvbW1hbmRDaGFyZ2VyQ0xfdjISXAoMc
  mVtb3RlX3N0YXJ0GAEgASgLMjcuQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tYW5kQ2hhcmdlckNMX3YyLkNtZFJlbW90ZVN0YXJ0S
  ABSC3JlbW90ZVN0YXJ0ElkKC3JlbW90ZV9zdG9wGAIgASgLMjYuQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tYW5kQ2hhcmdlckNMX
  3YyLkNtZFJlbW90ZVN0b3BIAFIKcmVtb3RlU3RvcBJfCg1yZXNlcnZlX3N0YXJ0GAMgASgLMjguQ2hhcmdlckxpbmsuR2F0ZXdhe
  S5Db21tYW5kQ2hhcmdlckNMX3YyLkNtZFJlc2VydmVTdGFydEgAUgxyZXNlcnZlU3RhcnQSYgoOcmVzZXJ2ZV9jYW5jZWwYBCABK
  AsyOS5DaGFyZ2VyTGluay5HYXRld2F5LkNvbW1hbmRDaGFyZ2VyQ0xfdjIuQ21kUmVzZXJ2ZUNhbmNlbEgAUg1yZXNlcnZlQ2FuY
  2VsEmIKDnJlbW90ZV9jb250cm9sGAUgASgLMjkuQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tYW5kQ2hhcmdlckNMX3YyLkNtZFJlb
  W90ZUNvbnRyb2xIAFINcmVtb3RlQ29udHJvbBJWCgpzZXRfY29uZmlnGAogASgLMjUuQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tY
  W5kQ2hhcmdlckNMX3YyLkNtZFNldENvbmZpZ0gAUglzZXRDb25maWcSVgoKZ2V0X2NvbmZpZxgLIAEoCzI1LkNoYXJnZXJMaW5rL
  kdhdGV3YXkuQ29tbWFuZENoYXJnZXJDTF92Mi5DbWRHZXRDb25maWdIAFIJZ2V0Q29uZmlnElMKCXNldF9wcmljZRgMIAEoCzI0L
  kNoYXJnZXJMaW5rLkdhdGV3YXkuQ29tbWFuZENoYXJnZXJDTF92Mi5DbWRTZXRQcmljZUgAUghzZXRQcmljZRJlCg91cGRhdGVfZ
  mlybXdhcmUYDSABKAsyOi5DaGFyZ2VyTGluay5HYXRld2F5LkNvbW1hbmRDaGFyZ2VyQ0xfdjIuQ21kVXBkYXRlRmlybXdhcmVIA
  FIOdXBkYXRlRmlybXdhcmUSYgoOdHJpZ2dlcl9vcmRlcnMYFCABKAsyOS5DaGFyZ2VyTGluay5HYXRld2F5LkNvbW1hbmRDaGFyZ
  2VyQ0xfdjIuQ21kVHJpZ2dlck9yZGVyc0gAUg10cmlnZ2VyT3JkZXJzEl8KDXRyaWdnZXJfd2FybnMYFSABKAsyOC5DaGFyZ2VyT
  Gluay5HYXRld2F5LkNvbW1hbmRDaGFyZ2VyQ0xfdjIuQ21kVHJpZ2dlcldhcm5zSABSDHRyaWdnZXJXYXJucxJfCg10cmlnZ2VyX
  2RpYWdzGBYgASgLMjguQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tYW5kQ2hhcmdlckNMX3YyLkNtZFRyaWdnZXJEaWFnc0gAUgx0c
  mlnZ2VyRGlhZ3MSZQoPdHJpZ2dlcl9tZXNzYWdlGBcgASgLMjouQ2hhcmdlckxpbmsuR2F0ZXdheS5Db21tYW5kQ2hhcmdlckNMX
  3YyLkNtZFRyaWdnZXJNZXNzYWdlSABSDnRyaWdnZXJNZXNzYWdlGoIFCg5DbWRSZW1vdGVTdGFydBIXCgdwbHVnX2lkGAEgAigNU
  gZwbHVnSWQSFwoHdXNlcl9pZBgCIAIoCVIGdXNlcklkEj0KCXVzZXJfdHlwZRgDIAEoDjIgLkNoYXJnZXJMaW5rLkdhdGV3YXkuQ
  2hnVXNlclR5cGVSCHVzZXJUeXBlEiEKDHVzZXJfYmFsYW5jZRgEIAEoBVILdXNlckJhbGFuY2USGQoIcGluX2NvZGUYBSABKAlSB
  3BpbkNvZGUSGQoIcGluX2F1dGgYBiABKAhSB3BpbkF1dGgSHQoKc3RhcnRfdGltZRgHIAEoA1IJc3RhcnRUaW1lEiAKDHN2cF9vc
  mRlcl9pZBgKIAIoCVIKc3ZwT3JkZXJJZBJGCgxzZXJ2aWNlX3R5cGUYFCABKA4yIy5DaGFyZ2VyTGluay5HYXRld2F5LkNoZ1Nlc
  nZpY2VUeXBlUgtzZXJ2aWNlVHlwZRJKCgxwcmljZV9zY2hlbWUYFSABKAsyJy5DaGFyZ2VyTGluay5HYXRld2F5LkRhdGFDaGdQc
  mljZVNjaGVtZVILcHJpY2VTY2hlbWUSIQoMYWxsb3dfbWludXRlGBYgASgNUgthbGxvd01pbnV0ZRIbCglhbGxvd19rd2gYFyABK
  A1SCGFsbG93S3doEh8KC2FsbG93X21vbmV5GBggASgNUgphbGxvd01vbmV5EjcKDGRldmljZV9leHRyYRgeIAEoCzIULmdvb2dsZ
  S5wcm90b2J1Zi5BbnlSC2RldmljZUV4dHJhEjcKDHNlcnZlcl9leHRyYRgfIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlSC3Nlc
  nZlckV4dHJhGmMKDUNtZFJlbW90ZVN0b3ASIAoMc3ZwX29yZGVyX2lkGAEgAigJUgpzdnBPcmRlcklkEhcKB3BsdWdfaWQYAiABK
  A1SBnBsdWdJZBIXCgd1c2VyX2lkGAMgASgJUgZ1c2VySWQawwEKD0NtZFJlc2VydmVTdGFydBIXCgdwbHVnX2lkGAEgAigNUgZwb
  HVnSWQSFwoHdXNlcl9pZBgCIAIoCVIGdXNlcklkEj0KCXVzZXJfdHlwZRgDIAEoDjIgLkNoYXJnZXJMaW5rLkdhdGV3YXkuQ2hnV
  XNlclR5cGVSCHVzZXJUeXBlEh8KC2V4cGlyZV90aW1lGAQgAigDUgpleHBpcmVUaW1lEh4KC3N2cF9ib29rX2lkGAogAigJUglzd
  nBCb29rSWQaZAoQQ21kUmVzZXJ2ZUNhbmNlbBIeCgtzdnBfYm9va19pZBgBIAIoCVIJc3ZwQm9va0lkEhcKB3BsdWdfaWQYAiABK
  A1SBnBsdWdJZBIXCgd1c2VyX2lkGAMgASgJUgZ1c2VySWQayAEKEENtZFJlbW90ZUNvbnRyb2wSGgoIZnVuY3Rpb24YASACKAlSC
  GZ1bmN0aW9uEhwKCXBhcmFtZXRlchgCIAEoCVIJcGFyYW1ldGVyInoKDEZ1bmN0aW9uTmFtZRIJCgVSZXNldBABEhMKD1VubG9ja
  0Nvbm5lY3RvchACEg8KC1JlbW90ZVN0YXJ0EAMSDgoKUmVtb3RlU3RvcBAEEhEKDVVwZGF0ZVNTTENlcnQQBxIWChJDaGFuZ2VBd
  mFpbGFiaWxpdHkQCBqkBQoMQ21kU2V0Q29uZmlnEmYKC2NvbmZpZ19saXN0GAEgAygLMkUuQ2hhcmdlckxpbmsuR2F0ZXdheS5Db
  21tYW5kQ2hhcmdlckNMX3YyLkNtZFNldENvbmZpZy5Db25maWdMaXN0RW50cnlSCmNvbmZpZ0xpc3QaPQoPQ29uZmlnTGlzdEVud
  HJ5EhAKA2tleRgBIAEoCVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2YWx1ZToCOAEi7AMKCkNvbmZpZ05hbWUSDQoJU2VydmVyVXJsE
  AESCAoEVXNlchACEgwKCFBhc3N3b3JkEAMSDwoLQWRtUGFzc3dvcmQQBBIKCgZCTVNJbnQQBRIPCgtNZXRlckNoZ0ludBAGEhAKD
  E1ldGVySWRsZUludBAHEhAKDEhlYXJ0YmVhdEludBAIEhAKDFJlY29ubmVjdEludBAJEgsKB0Jvb3RJbnQQChIKCgZTeXNJbnQQC
  xIOCgpTeXNJZGxlSW50EAwSDgoKRUxvc3NSYXRpbxANEg0KCU1ldGVyTUFDMRAOEg0KCU1ldGVyTUFDMhAPEg0KCU1ldGVyTUFDM
  xAQEg0KCU1ldGVyTUFDNBAREgwKCE1ldGVyTnVtEBISEQoNT2ZmTGluZUVuYWJsZRATEhAKDEF2YWlsYWJpbGl0eRAUEg4KClBhc
  nROdW1iZXIQFRIQCgxTZXJpYWxOdW1iZXIQFhIHCgNWSUQQFxINCglGV1ZlcnNpb24QGBINCglQVFZlcnNpb24QGRIKCgZDb25Od
  W0QGhILCgdDb25UeXBlEBsSBwoDTUFDEBwSDwoLU2VjdGlvblBhdGgQHRIQCgxRUkNvZGVIZWFkZXIQHhIKCgZRUkNvZGUQHxIRC
  g1TZXJ2aWNlTnVtYmVyECAaKQoMQ21kR2V0Q29uZmlnEhkKCGtleV9saXN0GAEgAygJUgdrZXlMaXN0GvoCCgtDbWRTZXRQcmljZ
  RJGCgpwcmljZV9saXN0GAEgAygLMicuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnUHJpY2VTY2hlbWVSCXByaWNlTGlzdBJlC
  gtwZXJpb2RfbGlzdBgCIAMoCzJELkNoYXJnZXJMaW5rLkdhdGV3YXkuQ29tbWFuZENoYXJnZXJDTF92Mi5DbWRTZXRQcmljZS5QZ
  XJpb2RMaXN0RW50cnlSCnBlcmlvZExpc3QSKAoQbm9ybWFsX3NjaGVtZV9pZBgDIAEoBVIObm9ybWFsU2NoZW1lSWQSKgoRd2Vla
  2VuZF9zY2hlbWVfaWQYBCABKAVSD3dlZWtlbmRTY2hlbWVJZBpmCg9QZXJpb2RMaXN0RW50cnkSEAoDa2V5GAEgASgNUgNrZXkSP
  QoFdmFsdWUYAiABKAsyJy5DaGFyZ2VyTGluay5HYXRld2F5LkRhdGFDaGdQcmljZVBlcmlvZFIFdmFsdWU6AjgBGsYBChFDbWRVc
  GRhdGVGaXJtd2FyZRIhCgxmaXJtd2FyZV91cmwYASACKAlSC2Zpcm13YXJlVXJsEiEKDGZpcm13YXJlX21kNRgCIAIoCVILZmlyb
  XdhcmVNZDUSHwoLcmV0cnlfY291bnQYAyABKA1SCnJldHJ5Q291bnQSJQoOcmV0cnlfaW50ZXJ2YWwYBCABKA1SDXJldHJ5SW50Z
  XJ2YWwSIwoNZG93bmxvYWRfdGltZRgFIAEoA1IMZG93bmxvYWRUaW1lGsoBChBDbWRUcmlnZ2VyT3JkZXJzEhcKB3BsdWdfaWQYA
  SABKA1SBnBsdWdJZBIfCgtvcmRlcl9sZXZlbBgCIAEoBVIKb3JkZXJMZXZlbBIdCgpzdGFydF90aW1lGAMgASgDUglzdGFydFRpb
  WUSGwoJc3RvcF90aW1lGAQgASgDUghzdG9wVGltZRIWCgZvZmZzZXQYBSABKAVSBm9mZnNldBIUCgVjb3VudBgGIAEoBVIFY291b
  nQSEgoEc2l6ZRgHIAEoBVIEc2l6ZRqTAgoPQ21kVHJpZ2dlcldhcm5zEj0KCWNvbXBfdHlwZRgBIAEoDjIgLkNoYXJnZXJMaW5rL
  kdhdGV3YXkuQ2hnQ29tcFR5cGVSCGNvbXBUeXBlEkMKC2FsYXJtX2xldmVsGAIgASgOMiIuQ2hhcmdlckxpbmsuR2F0ZXdheS5Da
  GdBbGFybUxldmVsUgphbGFybUxldmVsEh0KCnN0YXJ0X3RpbWUYAyABKANSCXN0YXJ0VGltZRIbCglzdG9wX3RpbWUYBCABKANSC
  HN0b3BUaW1lEhYKBm9mZnNldBgFIAEoBVIGb2Zmc2V0EhQKBWNvdW50GAYgASgFUgVjb3VudBISCgRzaXplGAcgASgFUgRzaXplG
  rQBCg9DbWRUcmlnZ2VyRGlhZ3MSHQoKdXBsb2FkX3VybBgBIAIoCVIJdXBsb2FkVXJsEh8KC3JldHJ5X2NvdW50GAIgASgNUgpyZ
  XRyeUNvdW50EiUKDnJldHJ5X2ludGVydmFsGAMgASgNUg1yZXRyeUludGVydmFsEh0KCnN0YXJ0X3RpbWUYBCABKANSCXN0YXJ0V
  GltZRIbCglzdG9wX3RpbWUYBSABKANSCHN0b3BUaW1lGtQEChFDbWRUcmlnZ2VyTWVzc2FnZRJnCgtyZXF1ZXN0X21zZxgBIAIoD
  jJGLkNoYXJnZXJMaW5rLkdhdGV3YXkuQ29tbWFuZENoYXJnZXJDTF92Mi5DbWRUcmlnZ2VyTWVzc2FnZS5NZXNzYWdlVHlwZVIKc
  mVxdWVzdE1zZxIXCgdwbHVnX2lkGAIgASgNUgZwbHVnSWQivAMKC01lc3NhZ2VUeXBlEiEKHU1FU1NBR0VfQk9PVF9OT1RJRklDQ
  VRJT05fUkVREAESGQoVTUVTU0FHRV9IRUFSVEJFQVRfUkVREAISLAooTUVTU0FHRV9GSVJNV0FSRV9TVEFUVVNfTk9USUZJQ0FUS
  U9OX1JFURAHEi8KK01FU1NBR0VfRElBR05PU1RJQ1NfU1RBVFVTX05PVElGSUNBVElPTl9SRVEQCRIhCh1NRVNTQUdFX1NUQVJUX
  1RSQU5TQUNUSU9OX1JFURASEiAKHE1FU1NBR0VfU1RPUF9UUkFOU0FDVElPTl9SRVEQExIjCh9NRVNTQUdFX1NUQVRVU19OT1RJR
  klDQVRJT19OUkVRECASIAocTUVTU0FHRV9TWVNURU1fVEVMRU1FVFJZX1JFURAhEh0KGU1FU1NBR0VfREVWSUNFX1JFUE9SVF9SR
  VEQIhIlCiFNRVNTQUdFX0NIQVJHSU5HX1BST0NFU1NfSU5GT19SRVEQIxIgChxNRVNTQUdFX1RSQU5TQUNUSU9OX0xJU1RfUkVRE
  DESHAoYTUVTU0FHRV9XQVJOSU5HX0xJU1RfUkVREDNCCQoHY29tbWFuZCKWEQoSUmVzdWx0Q2hhcmdlckNMX3YyEl4KDHJlbW90Z
  V9zdGFydBgBIAEoCzI5LkNoYXJnZXJMaW5rLkdhdGV3YXkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc3VsdFJlbW90ZVN0YXJ0SABSC
  3JlbW90ZVN0YXJ0ElsKC3JlbW90ZV9zdG9wGAIgASgLMjguQ2hhcmdlckxpbmsuR2F0ZXdheS5SZXN1bHRDaGFyZ2VyQ0xfdjIuU
  mVzdWx0UmVtb3RlU3RvcEgAUgpyZW1vdGVTdG9wEmEKDXJlc2VydmVfc3RhcnQYAyABKAsyOi5DaGFyZ2VyTGluay5HYXRld2F5L
  lJlc3VsdENoYXJnZXJDTF92Mi5SZXN1bHRSZXNlcnZlU3RhcnRIAFIMcmVzZXJ2ZVN0YXJ0EmUKDnJlc2VydmVfY2FuY2VsGAQgA
  SgOMjwuQ2hhcmdlckxpbmsuR2F0ZXdheS5SZXN1bHRDaGFyZ2VyQ0xfdjIuUmVzdWx0UmVzcG9uc2VTdGF0dXNIAFINcmVzZXJ2Z
  UNhbmNlbBJlCg5yZW1vdGVfY29udHJvbBgFIAEoDjI8LkNoYXJnZXJMaW5rLkdhdGV3YXkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc
  3VsdFJlc3BvbnNlU3RhdHVzSABSDXJlbW90ZUNvbnRyb2wSWAoKc2V0X2NvbmZpZxgKIAEoDjI3LkNoYXJnZXJMaW5rLkdhdGV3Y
  XkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc3VsdFNldENvbmZpZ0gAUglzZXRDb25maWcSWAoKZ2V0X2NvbmZpZxgLIAEoCzI3LkNoY
  XJnZXJMaW5rLkdhdGV3YXkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc3VsdEdldENvbmZpZ0gAUglnZXRDb25maWcSWwoJc2V0X3Bya
  WNlGAwgASgOMjwuQ2hhcmdlckxpbmsuR2F0ZXdheS5SZXN1bHRDaGFyZ2VyQ0xfdjIuUmVzdWx0UmVzcG9uc2VTdGF0dXNIAFIIc
  2V0UHJpY2USYgoOdHJpZ2dlcl9vcmRlcnMYFCABKAsyOS5DaGFyZ2VyTGluay5HYXRld2F5LlJlc3VsdENoYXJnZXJDTF92Mi5SZ
  XN1bHRUcmlnZ2VyTGlzdEgAUg10cmlnZ2VyT3JkZXJzEmYKEHRyaWdnZXJfd2FybmluZ3MYFSABKAsyOS5DaGFyZ2VyTGluay5HY
  XRld2F5LlJlc3VsdENoYXJnZXJDTF92Mi5SZXN1bHRUcmlnZ2VyTGlzdEgAUg90cmlnZ2VyV2FybmluZ3MSYQoNdHJpZ2dlcl9ka
  WFncxgWIAEoCzI6LkNoYXJnZXJMaW5rLkdhdGV3YXkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc3VsdFRyaWdnZXJEaWFnc0gAUgx0c
  mlnZ2VyRGlhZ3MaqwEKEVJlc3VsdFJlbW90ZVN0YXJ0ElQKBnN0YXR1cxgBIAIoDjI8LkNoYXJnZXJMaW5rLkdhdGV3YXkuUmVzd
  Wx0Q2hhcmdlckNMX3YyLlJlc3VsdFJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSQAoKb3JkZXJfaW5mbxgCIAEoCzIhLkNoYXJnZXJMa
  W5rLkdhdGV3YXkuRGF0YUNoZ09yZGVyUglvcmRlckluZm8aqgEKEFJlc3VsdFJlbW90ZVN0b3ASVAoGc3RhdHVzGAEgAigOMjwuQ
  2hhcmdlckxpbmsuR2F0ZXdheS5SZXN1bHRDaGFyZ2VyQ0xfdjIuUmVzdWx0UmVzcG9uc2VTdGF0dXNSBnN0YXR1cxJACgpvcmRlc
  l9pbmZvGAIgASgLMiEuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnT3JkZXJSCW9yZGVySW5mbxqeAQoSUmVzdWx0UmVzZXJ2Z
  VN0YXJ0ElQKBnN0YXR1cxgBIAIoDjI8LkNoYXJnZXJMaW5rLkdhdGV3YXkuUmVzdWx0Q2hhcmdlckNMX3YyLlJlc3VsdFJlc3Bvb
  nNlU3RhdHVzUgZzdGF0dXMSFwoHcGx1Z19pZBgCIAEoDVIGcGx1Z0lkEhkKCHBpbl9jb2RlGAMgASgJUgdwaW5Db2RlGroBCg9SZ
  XN1bHRHZXRDb25maWcSaAoLY29uZmlnX2xpc3QYASADKAsyRy5DaGFyZ2VyTGluay5HYXRld2F5LlJlc3VsdENoYXJnZXJDTF92M
  i5SZXN1bHRHZXRDb25maWcuQ29uZmlnTGlzdEVudHJ5Ugpjb25maWdMaXN0Gj0KD0NvbmZpZ0xpc3RFbnRyeRIQCgNrZXkYASABK
  AlSA2tleRIUCgV2YWx1ZRgCIAEoCVIFdmFsdWU6AjgBGjQKEVJlc3VsdFRyaWdnZXJMaXN0Eh8KC3RvdGFsX2NvdW50GAEgASgFU
  gp0b3RhbENvdW50GjEKElJlc3VsdFRyaWdnZXJEaWFncxIbCglmaWxlX25hbWUYASABKAlSCGZpbGVOYW1lIo4BChRSZXN1bHRSZ
  XNwb25zZVN0YXR1cxIcChhSRVNVTFRfUkVTUE9OU0VfQUNDRVBURUQQABIcChhSRVNVTFRfUkVTUE9OU0VfUkVKRUNURUQQARIdC
  hlSRVNVTFRfUkVTUE9OU0VfVU5TVVBQT1JUEAISGwoXUkVTVUxUX1JFU1BPTlNFX0lOVkFMSUQQAyKUAQoPUmVzdWx0U2V0Q29uZ
  mlnEh4KGlJFU1VMVF9TRVRfQ09ORklHX0FDQ0VQVEVEEAASHgoaUkVTVUxUX1NFVF9DT05GSUdfUkVKRUNURUQQARIgChxSRVNVT
  FRfU0VUX0NPTkZJR19ORUVEUkVCT09UEAISHwobUkVTVUxUX1NFVF9DT05GSUdfVU5TVVBQT1JUEANCCAoGcmVzdWx0QmkKIGNvb
  S5jaGFyZ2VybGluay5nYXRld2F5LmJlYW4uYXBpUABaIGNvbS5jaGFyZ2VybGluay5nYXRld2F5LmJlYW4uYXBpqgIgY29tLmNoY
  XJnZXJsaW5rLmdhdGV3YXkuYmVhbi5hcGk="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, Seq(
      com.chargerlink.gateway.bean.common.EnumChargerProto.scalaDescriptor,
      com.chargerlink.gateway.bean.data.DataChargerProto.scalaDescriptor,
      com.google.protobuf.any.AnyProto.scalaDescriptor
    ))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      com.chargerlink.gateway.bean.common.EnumChargerProto.javaDescriptor,
      com.chargerlink.gateway.bean.data.DataChargerProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}