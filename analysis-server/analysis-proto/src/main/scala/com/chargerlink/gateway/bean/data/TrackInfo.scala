// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 终端设备行程信息的消息定义。目前只支持行车记录仪设备。
  *
  * @param deviceType
  *  / (必填)终端设备类型。
  * @param deviceId
  *  / (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
  * @param trackId
  *  / (必填)行程ID。采用行程开始的毫秒时间戳作为行程的ID。
  * @param dataTime
  *  / (必填)数据采集的时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param startTime
  *  / (必填)行程的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param stopTime
  *  / (可选)行程的结束时间(北京时间的毫秒时间戳)。单位：毫秒。0：表示行程未结束。
  * @param isPowerOn
  *  / (可选)行程启动时是否加电。
  * @param isPowerOff
  *  / (可选)行程结束时是否断电。
  * @param stopPic
  *  / (可选)行程结束时停车图片的URL。缺省：空串，表示行程未结束或图片上传失败。
  * @param stopData
  *  / (可选)行程结束时设备的实时数据信息。
  */
@SerialVersionUID(0L)
final case class TrackInfo(
    deviceType: com.chargerlink.gateway.bean.common.DeviceType,
    deviceId: String,
    trackId: Long,
    dataTime: Long,
    startTime: Long,
    stopTime: scala.Option[Long] = None,
    isPowerOn: scala.Option[Boolean] = None,
    isPowerOff: scala.Option[Boolean] = None,
    stopPic: scala.Option[String] = None,
    stopData: scala.Option[com.chargerlink.gateway.bean.data.DataInfo] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[TrackInfo] with com.trueaccord.lenses.Updatable[TrackInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, deviceType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, deviceId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, trackId)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, dataTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, startTime)
      if (stopTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, stopTime.get) }
      if (isPowerOn.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, isPowerOn.get) }
      if (isPowerOff.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, isPowerOff.get) }
      if (stopPic.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, stopPic.get) }
      if (stopData.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(stopData.get.serializedSize) + stopData.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, deviceType.value)
      _output__.writeString(2, deviceId)
      _output__.writeInt64(3, trackId)
      _output__.writeInt64(4, dataTime)
      _output__.writeInt64(5, startTime)
      stopTime.foreach { __v =>
        _output__.writeInt64(6, __v)
      };
      isPowerOn.foreach { __v =>
        _output__.writeBool(7, __v)
      };
      isPowerOff.foreach { __v =>
        _output__.writeBool(8, __v)
      };
      stopPic.foreach { __v =>
        _output__.writeString(9, __v)
      };
      stopData.foreach { __v =>
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.TrackInfo = {
      var __deviceType = this.deviceType
      var __deviceId = this.deviceId
      var __trackId = this.trackId
      var __dataTime = this.dataTime
      var __startTime = this.startTime
      var __stopTime = this.stopTime
      var __isPowerOn = this.isPowerOn
      var __isPowerOff = this.isPowerOff
      var __stopPic = this.stopPic
      var __stopData = this.stopData
      var __requiredFields0: Long = 0x1fL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __deviceId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __trackId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __dataTime = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __startTime = _input__.readInt64()
            __requiredFields0 &= 0xffffffffffffffefL
          case 48 =>
            __stopTime = Some(_input__.readInt64())
          case 56 =>
            __isPowerOn = Some(_input__.readBool())
          case 64 =>
            __isPowerOff = Some(_input__.readBool())
          case 74 =>
            __stopPic = Some(_input__.readString())
          case 82 =>
            __stopData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __stopData.getOrElse(com.chargerlink.gateway.bean.data.DataInfo.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.TrackInfo(
          deviceType = __deviceType,
          deviceId = __deviceId,
          trackId = __trackId,
          dataTime = __dataTime,
          startTime = __startTime,
          stopTime = __stopTime,
          isPowerOn = __isPowerOn,
          isPowerOff = __isPowerOff,
          stopPic = __stopPic,
          stopData = __stopData
      )
    }
    def withDeviceType(__v: com.chargerlink.gateway.bean.common.DeviceType): TrackInfo = copy(deviceType = __v)
    def withDeviceId(__v: String): TrackInfo = copy(deviceId = __v)
    def withTrackId(__v: Long): TrackInfo = copy(trackId = __v)
    def withDataTime(__v: Long): TrackInfo = copy(dataTime = __v)
    def withStartTime(__v: Long): TrackInfo = copy(startTime = __v)
    def getStopTime: Long = stopTime.getOrElse(0L)
    def clearStopTime: TrackInfo = copy(stopTime = None)
    def withStopTime(__v: Long): TrackInfo = copy(stopTime = Some(__v))
    def getIsPowerOn: Boolean = isPowerOn.getOrElse(false)
    def clearIsPowerOn: TrackInfo = copy(isPowerOn = None)
    def withIsPowerOn(__v: Boolean): TrackInfo = copy(isPowerOn = Some(__v))
    def getIsPowerOff: Boolean = isPowerOff.getOrElse(false)
    def clearIsPowerOff: TrackInfo = copy(isPowerOff = None)
    def withIsPowerOff(__v: Boolean): TrackInfo = copy(isPowerOff = Some(__v))
    def getStopPic: String = stopPic.getOrElse("")
    def clearStopPic: TrackInfo = copy(stopPic = None)
    def withStopPic(__v: String): TrackInfo = copy(stopPic = Some(__v))
    def getStopData: com.chargerlink.gateway.bean.data.DataInfo = stopData.getOrElse(com.chargerlink.gateway.bean.data.DataInfo.defaultInstance)
    def clearStopData: TrackInfo = copy(stopData = None)
    def withStopData(__v: com.chargerlink.gateway.bean.data.DataInfo): TrackInfo = copy(stopData = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.javaValueDescriptor
        case 2 => deviceId
        case 3 => trackId
        case 4 => dataTime
        case 5 => startTime
        case 6 => stopTime.orNull
        case 7 => isPowerOn.orNull
        case 8 => isPowerOff.orNull
        case 9 => stopPic.orNull
        case 10 => stopData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(deviceType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(deviceId)
        case 3 => _root_.scalapb.descriptors.PLong(trackId)
        case 4 => _root_.scalapb.descriptors.PLong(dataTime)
        case 5 => _root_.scalapb.descriptors.PLong(startTime)
        case 6 => stopTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => isPowerOn.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => isPowerOff.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => stopPic.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => stopData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.TrackInfo
}

object TrackInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.TrackInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.TrackInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.TrackInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.TrackInfo(
      com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap(__fields.get(2)).asInstanceOf[Long],
      __fieldsMap(__fields.get(3)).asInstanceOf[Long],
      __fieldsMap(__fields.get(4)).asInstanceOf[Long],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.data.DataInfo]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.TrackInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.TrackInfo(
        com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.data.DataInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataBaseProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataBaseProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 10 => __out = com.chargerlink.gateway.bean.data.DataInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.DeviceType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.TrackInfo(
    deviceType = com.chargerlink.gateway.bean.common.DeviceType.DEVICE_VEHICLE_GB_V1,
    deviceId = "",
    trackId = 0L,
    dataTime = 0L,
    startTime = 0L
  )
  implicit class TrackInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.TrackInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.TrackInfo](_l) {
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.DeviceType] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def trackId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.trackId)((c_, f_) => c_.copy(trackId = f_))
    def dataTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.dataTime)((c_, f_) => c_.copy(dataTime = f_))
    def startTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def stopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getStopTime)((c_, f_) => c_.copy(stopTime = Some(f_)))
    def optionalStopTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.stopTime)((c_, f_) => c_.copy(stopTime = f_))
    def isPowerOn: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getIsPowerOn)((c_, f_) => c_.copy(isPowerOn = Some(f_)))
    def optionalIsPowerOn: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.isPowerOn)((c_, f_) => c_.copy(isPowerOn = f_))
    def isPowerOff: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getIsPowerOff)((c_, f_) => c_.copy(isPowerOff = Some(f_)))
    def optionalIsPowerOff: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.isPowerOff)((c_, f_) => c_.copy(isPowerOff = f_))
    def stopPic: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getStopPic)((c_, f_) => c_.copy(stopPic = Some(f_)))
    def optionalStopPic: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.stopPic)((c_, f_) => c_.copy(stopPic = f_))
    def stopData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataInfo] = field(_.getStopData)((c_, f_) => c_.copy(stopData = Some(f_)))
    def optionalStopData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.data.DataInfo]] = field(_.stopData)((c_, f_) => c_.copy(stopData = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val TRACK_ID_FIELD_NUMBER = 3
  final val DATA_TIME_FIELD_NUMBER = 4
  final val START_TIME_FIELD_NUMBER = 5
  final val STOP_TIME_FIELD_NUMBER = 6
  final val IS_POWER_ON_FIELD_NUMBER = 7
  final val IS_POWER_OFF_FIELD_NUMBER = 8
  final val STOP_PIC_FIELD_NUMBER = 9
  final val STOP_DATA_FIELD_NUMBER = 10
}
