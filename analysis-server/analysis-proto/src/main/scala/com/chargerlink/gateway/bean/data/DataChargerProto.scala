// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



object DataChargerProto {
  private lazy val ProtoBytes: Array[Byte] =
      com.trueaccord.scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChZiZWFuL0RhdGFDaGFyZ2VyLnByb3RvEhNDaGFyZ2VyTGluay5HYXRld2F5GhZiZWFuL0VudW1DaGFyZ2VyLnByb3RvGhlnb
  29nbGUvcHJvdG9idWYvYW55LnByb3RvIpYFCgtEYXRhQ2hhcmdlchI9CglldnNlX2RhdGEYASACKAsyIC5DaGFyZ2VyTGluay5HY
  XRld2F5LkRhdGFDaGdFdnNlUghldnNlRGF0YRJLCglwbHVnX2xpc3QYAiADKAsyLi5DaGFyZ2VyTGluay5HYXRld2F5LkRhdGFDa
  GFyZ2VyLlBsdWdMaXN0RW50cnlSCHBsdWdMaXN0Ek4KCm9yZGVyX2xpc3QYCiADKAsyLy5DaGFyZ2VyTGluay5HYXRld2F5LkRhd
  GFDaGFyZ2VyLk9yZGVyTGlzdEVudHJ5UglvcmRlckxpc3QSUQoLY2hhcmdlX2xpc3QYCyADKAsyMC5DaGFyZ2VyTGluay5HYXRld
  2F5LkRhdGFDaGFyZ2VyLkNoYXJnZUxpc3RFbnRyeVIKY2hhcmdlTGlzdBI1CgtleHRlbmRfZGF0YRhkIAEoCzIULmdvb2dsZS5wc
  m90b2J1Zi5BbnlSCmV4dGVuZERhdGEaXQoNUGx1Z0xpc3RFbnRyeRIQCgNrZXkYASABKA1SA2tleRI2CgV2YWx1ZRgCIAEoCzIgL
  kNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ1BsdWdSBXZhbHVlOgI4ARpfCg5PcmRlckxpc3RFbnRyeRIQCgNrZXkYASABKA1SA
  2tleRI3CgV2YWx1ZRgCIAEoCzIhLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ09yZGVyUgV2YWx1ZToCOAEaYQoPQ2hhcmdlT
  GlzdEVudHJ5EhAKA2tleRgBIAEoDVIDa2V5EjgKBXZhbHVlGAIgASgLMiIuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnQ2hhc
  mdlUgV2YWx1ZToCOAEi+QEKC0RhdGFDaGdFdnNlEhsKCWV2c2VfdGltZRgKIAIoA1IIZXZzZVRpbWUSQwoLZXZzZV9zdGF0dXMYC
  yACKA4yIi5DaGFyZ2VyTGluay5HYXRld2F5LkNoZ0V2c2VTdGF0dXNSCmV2c2VTdGF0dXMSRgoMbWVhc3VyZV9saXN0GBQgAygLM
  iMuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnTWVhc3VyZVILbWVhc3VyZUxpc3QSQAoKYWxhcm1fbGlzdBgeIAMoCzIhLkNoY
  XJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ0FsYXJtUglhbGFybUxpc3Qi0QIKC0RhdGFDaGdQbHVnEhcKB3BsdWdfaWQYASACKA1SB
  nBsdWdJZBI9CglwbHVnX3R5cGUYAiABKA4yIC5DaGFyZ2VyTGluay5HYXRld2F5LkNoZ1BsdWdUeXBlUghwbHVnVHlwZRIbCglwb
  HVnX3RpbWUYCiACKANSCHBsdWdUaW1lEkMKC3BsdWdfc3RhdHVzGAsgAigOMiIuQ2hhcmdlckxpbmsuR2F0ZXdheS5DaGdQbHVnU
  3RhdHVzUgpwbHVnU3RhdHVzEkYKDG1lYXN1cmVfbGlzdBgUIAMoCzIjLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ01lYXN1c
  mVSC21lYXN1cmVMaXN0EkAKCmFsYXJtX2xpc3QYHiADKAsyIS5DaGFyZ2VyTGluay5HYXRld2F5LkRhdGFDaGdBbGFybVIJYWxhc
  m1MaXN0Iq0LCgxEYXRhQ2hnT3JkZXISFwoHcGx1Z19pZBgBIAIoDVIGcGx1Z0lkEiAKDGRldl9vcmRlcl9pZBgCIAIoA1IKZGV2T
  3JkZXJJZBIgCgxzdnBfb3JkZXJfaWQYAyABKAlSCnN2cE9yZGVySWQSHgoLc3ZwX2Jvb2tfaWQYBCABKAlSCXN2cEJvb2tJZBJGC
  gxzZXJ2aWNlX3R5cGUYBSABKA4yIy5DaGFyZ2VyTGluay5HYXRld2F5LkNoZ1NlcnZpY2VUeXBlUgtzZXJ2aWNlVHlwZRIZCghwa
  W5fY29kZRgGIAEoCVIHcGluQ29kZRIdCgplcnJvcl9jb2RlGAcgASgFUgllcnJvckNvZGUSHQoKc3RhcnRfdGltZRgKIAIoA1IJc
  3RhcnRUaW1lEh8KC3N0YXJ0X21ldGVyGAsgAigNUgpzdGFydE1ldGVyEkAKCnN0YXJ0X3R5cGUYDCABKA4yIS5DaGFyZ2VyTGlua
  y5HYXRld2F5LkNoZ1N0YXJ0VHlwZVIJc3RhcnRUeXBlEiEKDGN1cnJlbnRfdGltZRgNIAEoA1ILY3VycmVudFRpbWUSIwoNY3Vyc
  mVudF9tZXRlchgOIAEoDVIMY3VycmVudE1ldGVyEiMKDWN1cnJlbnRfcG93ZXIYDyABKA1SDGN1cnJlbnRQb3dlchIbCglzdG9wX
  3RpbWUYECABKANSCHN0b3BUaW1lEh0KCnN0b3BfbWV0ZXIYESABKA1SCXN0b3BNZXRlchI9CglzdG9wX3R5cGUYEiABKA4yIC5Da
  GFyZ2VyTGluay5HYXRld2F5LkNoZ1N0b3BUeXBlUghzdG9wVHlwZRIdCgppc19jaGFyZ2VkGBQgASgIUglpc0NoYXJnZWQSIQoMa
  XNfY29tZmlybWVkGBUgASgIUgtpc0NvbWZpcm1lZBI9Cgl1c2VyX2luZm8YFiACKAsyIC5DaGFyZ2VyTGluay5HYXRld2F5LkRhd
  GFDaGdVc2VyUgh1c2VySW5mbxI9CgliaWxsX2luZm8YFyABKAsyIC5DaGFyZ2VyTGluay5HYXRld2F5LkRhdGFDaGdCaWxsUghia
  WxsSW5mbxJRCgtkZWR1Y3RfaW5mbxgYIAEoCzIwLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ09yZGVyLk9yZGVyRGVkdWN0a
  W9uUgpkZWR1Y3RJbmZvEkwKCWVsZWNfbGlzdBgZIAEoCzIvLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ09yZGVyLk9yZGVyR
  WxlY0xpc3RSCGVsZWNMaXN0EjcKDGRldmljZV9leHRyYRgeIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlSC2RldmljZUV4dHJhE
  jcKDHNlcnZlcl9leHRyYRgfIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlSC3NlcnZlckV4dHJhGlIKDk9yZGVyRGVkdWN0aW9uE
  hQKBW1vbmV5GAEgASgFUgVtb25leRIYCgdiYWxhbmNlGAIgASgFUgdiYWxhbmNlEhAKA3RhYxgDIAEoCVIDdGFjGkgKDU9yZGVyR
  WxlY0xpc3QSGgoIaW50ZXJ2YWwYASACKA1SCGludGVydmFsEhsKCWVsZWNfbGlzdBgCIAEoDFIIZWxlY0xpc3QaQgoTT3JkZXJEZ
  XZpY2VFeHRyYUNMMRIrChF0cmFuc3BhcmVudF90b2tlbhgBIAEoCVIQdHJhbnNwYXJlbnRUb2tlbhp/ChNPcmRlclNlcnZlckV4d
  HJhQ0wxEh0KCmNoYW5uZWxfaWQYASABKAVSCWNoYW5uZWxJZBIfCgtwbGF0Zm9ybV9pZBgCIAEoCVIKcGxhdGZvcm1JZBIoChBja
  GFubmVsX29yZGVyX2lkGAMgASgJUg5jaGFubmVsT3JkZXJJZCKCAQoLRGF0YUNoZ1VzZXISFwoHdXNlcl9pZBgBIAIoCVIGdXNlc
  klkEj0KCXVzZXJfdHlwZRgCIAEoDjIgLkNoYXJnZXJMaW5rLkdhdGV3YXkuQ2hnVXNlclR5cGVSCHVzZXJUeXBlEhsKCXVzZXJfc
  GFzcxgDIAEoCVIIdXNlclBhc3MilgEKC0RhdGFDaGdBdXRoEkMKC2F1dGhfc3RhdHVzGAEgAigOMiIuQ2hhcmdlckxpbmsuR2F0Z
  XdheS5DaGdBdXRoU3RhdHVzUgphdXRoU3RhdHVzEh8KC2V4cGlyZV90aW1lGAIgASgDUgpleHBpcmVUaW1lEiEKDHVzZXJfYmFsY
  W5jZRgDIAEoBVILdXNlckJhbGFuY2Ui9QEKC0RhdGFDaGdCaWxsEiYKD3ByaWNlX3NjaGVtZV9pZBgBIAEoDVINcHJpY2VTY2hlb
  WVJZBIfCgt0b3RhbF9tb25leRgCIAEoDVIKdG90YWxNb25leRJGCgliaWxsX2xpc3QYAyADKAsyKS5DaGFyZ2VyTGluay5HYXRld
  2F5LkRhdGFDaGdCaWxsLkJpbGxJdGVtUghiaWxsTGlzdBpVCghCaWxsSXRlbRIbCgl0YXJpZmZfaWQYASACKA1SCHRhcmlmZklkE
  hYKBmFtb3VudBgCIAIoDVIGYW1vdW50EhQKBW1vbmV5GAMgASgNUgVtb25leSKlGQoNRGF0YUNoZ0NoYXJnZRJhChBjaGFyZ2Vfa
  GFuZHNoYWtlGAEgASgLMjYuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnQ2hhcmdlLkNoYXJnZUhhbmRzaGFrZUluZm9SD2NoY
  XJnZUhhbmRzaGFrZRJYCg1jaGFyZ2VfY29uZmlnGAIgASgLMjMuQ2hhcmdlckxpbmsuR2F0ZXdheS5EYXRhQ2hnQ2hhcmdlLkNoY
  XJnZUNvbmZpZ0luZm9SDGNoYXJnZUNvbmZpZxJbCg5jaGFyZ2VfcHJvY2VzcxgDIAEoCzI0LkNoYXJnZXJMaW5rLkdhdGV3YXkuR
  GF0YUNoZ0NoYXJnZS5DaGFyZ2VQcm9jZXNzSW5mb1INY2hhcmdlUHJvY2VzcxJSCgtjaGFyZ2Vfc3RvcBgEIAEoCzIxLkNoYXJnZ
  XJMaW5rLkdhdGV3YXkuRGF0YUNoZ0NoYXJnZS5DaGFyZ2VTdG9wSW5mb1IKY2hhcmdlU3RvcBrYBAoTQ2hhcmdlSGFuZHNoYWtlS
  W5mbxIXCgdwbHVnX2lkGAEgASgNUgZwbHVnSWQSKQoQY2hhcmdlcl9wcm90b2NvbBgKIAEoCVIPY2hhcmdlclByb3RvY29sEiYKD
  2Jtc19tYXhfdm9sdGFnZRgUIAEoBVINYm1zTWF4Vm9sdGFnZRIlCg5jaGFyZ2VyX3N0YXR1cxgeIAEoDVINY2hhcmdlclN0YXR1c
  xIhCgxjaGFyZ2VyX2FyZWEYHyABKAlSC2NoYXJnZXJBcmVhEiEKDGJtc19wcm90b2NvbBgoIAEoCVILYm1zUHJvdG9jb2wSIQoMY
  mF0dGVyeV90eXBlGCkgASgNUgtiYXR0ZXJ5VHlwZRIjCg1iYXR0ZXJ5X3Bvd2VyGCogASgNUgxiYXR0ZXJ5UG93ZXISJwoPYmF0d
  GVyeV92b2x0YWdlGCsgASgNUg5iYXR0ZXJ5Vm9sdGFnZRIlCg5iYXR0ZXJ5X3ZlbmRvchgsIAEoCVINYmF0dGVyeVZlbmRvchIlC
  g5iYXR0ZXJ5X3NlcmlhbBgtIAEoDVINYmF0dGVyeVNlcmlhbBIhCgxiYXR0ZXJ5X2RhdGUYLiABKAlSC2JhdHRlcnlEYXRlEiUKD
  mJhdHRlcnlfY3ljbGVzGC8gASgNUg1iYXR0ZXJ5Q3ljbGVzEiMKDWJhdHRlcnlfb3duZXIYMCABKAVSDGJhdHRlcnlPd25lchIZC
  gh2aW5fY29kZRgxIAEoCVIHdmluQ29kZRIfCgtibXNfdmVyc2lvbhgyIAEoCVIKYm1zVmVyc2lvbhrwBAoQQ2hhcmdlQ29uZmlnS
  W5mbxIsChJjZWxsX2FsbG93X3ZvbHRhZ2UYCiABKA1SEGNlbGxBbGxvd1ZvbHRhZ2USMgoVYmF0dGVyeV9hbGxvd19jdXJyZW50G
  AsgASgNUhNiYXR0ZXJ5QWxsb3dDdXJyZW50Ei4KE2JhdHRlcnlfdG90YWxfcG93ZXIYDCABKA1SEWJhdHRlcnlUb3RhbFBvd2VyE
  jIKFWJhdHRlcnlfYWxsb3dfdm9sdGFnZRgNIAEoDVITYmF0dGVyeUFsbG93Vm9sdGFnZRIsChJiYXR0ZXJ5X2FsbG93X3RlbXAYD
  iABKA1SEGJhdHRlcnlBbGxvd1RlbXASLgoTYmF0dGVyeV9jdXJyZW50X3NvYxgPIAEoDVIRYmF0dGVyeUN1cnJlbnRTb2MSLgoTY
  mF0dGVyeV9jdXJyZW50X3ZvbBgQIAEoDVIRYmF0dGVyeUN1cnJlbnRWb2wSLgoTY2hhcmdlcl9tYXhfdm9sdGFnZRgUIAEoDVIRY
  2hhcmdlck1heFZvbHRhZ2USLgoTY2hhcmdlcl9taW5fdm9sdGFnZRgVIAEoDVIRY2hhcmdlck1pblZvbHRhZ2USLgoTY2hhcmdlc
  l9tYXhfY3VycmVudBgWIAEoDVIRY2hhcmdlck1heEN1cnJlbnQSLgoTY2hhcmdlcl9taW5fY3VycmVudBgXIAEoDVIRY2hhcmdlc
  k1pbkN1cnJlbnQSIwoNYmF0dGVyeV9yZWFkeRgeIAEoDVIMYmF0dGVyeVJlYWR5EiMKDWNoYXJnZXJfcmVhZHkYKCABKA1SDGNoY
  XJnZXJSZWFkeRrRBwoRQ2hhcmdlUHJvY2Vzc0luZm8SLgoTYm1zX3JlcXVpcmVfdm9sdGFnZRgKIAEoDVIRYm1zUmVxdWlyZVZvb
  HRhZ2USLgoTYm1zX3JlcXVpcmVfY3VycmVudBgLIAEoDVIRYm1zUmVxdWlyZUN1cnJlbnQSKAoQYm1zX3JlcXVpcmVfbW9kZRgMI
  AEoDVIOYm1zUmVxdWlyZU1vZGUSLgoTYm1zX21lYXN1cmVfdm9sdGFnZRgUIAEoDVIRYm1zTWVhc3VyZVZvbHRhZ2USLgoTYm1zX
  21lYXN1cmVfY3VycmVudBgVIAEoDVIRYm1zTWVhc3VyZUN1cnJlbnQSKQoRYm1zX21heF92b2xfdmFsdWUYFiABKA1SDmJtc01he
  FZvbFZhbHVlEiYKD2Jtc19jdXJyZW50X3NvYxgXIAEoDVINYm1zQ3VycmVudFNvYxImCg9ibXNfcmVtYWluX3RpbWUYGCABKA1SD
  WJtc1JlbWFpblRpbWUSNAoWY2hhcmdlcl9vdXRwdXRfdm9sdGFnZRgeIAEoDVIUY2hhcmdlck91dHB1dFZvbHRhZ2USNAoWY2hhc
  mdlcl9vdXRwdXRfY3VycmVudBgfIAEoDVIUY2hhcmdlck91dHB1dEN1cnJlbnQSLAoSY2hhcmdlcl90b3RhbF90aW1lGCAgASgNU
  hBjaGFyZ2VyVG90YWxUaW1lEjIKFWNoYXJnZXJfZW5hYmxlX3N0YXR1cxghIAEoDVITY2hhcmdlckVuYWJsZVN0YXR1cxIpChFib
  XNfbWF4X3ZvbF9pbmRleBgoIAEoDVIOYm1zTWF4Vm9sSW5kZXgSKwoSYm1zX21heF90ZW1wX3ZhbHVlGCkgASgNUg9ibXNNYXhUZ
  W1wVmFsdWUSKwoSYm1zX21heF90ZW1wX2luZGV4GCogASgNUg9ibXNNYXhUZW1wSW5kZXgSKwoSYm1zX21pbl90ZW1wX3ZhbHVlG
  CsgASgNUg9ibXNNaW5UZW1wVmFsdWUSKwoSYm1zX21pbl90ZW1wX2luZGV4GCwgASgNUg9ibXNNaW5UZW1wSW5kZXgSKAoQYm1zX
  3dhcm5fc3RhdHVzMRgtIAEoDVIOYm1zV2FyblN0YXR1czESKAoQYm1zX3dhcm5fc3RhdHVzMhguIAEoDVIOYm1zV2FyblN0YXR1c
  zISKQoRYm1zX2NlbGxfdm9sX2xpc3QYMiADKA1SDmJtc0NlbGxWb2xMaXN0EisKEmJtc19jZWxsX3RlbXBfbGlzdBg8IAMoDVIPY
  m1zQ2VsbFRlbXBMaXN0GoMFCg5DaGFyZ2VTdG9wSW5mbxIXCgdwbHVnX2lkGAEgASgNUgZwbHVnSWQSLgoTYmF0dGVyeV9zdG9wX
  3JlYXNvbhgKIAEoDVIRYmF0dGVyeVN0b3BSZWFzb24SLAoSYmF0dGVyeV9zdG9wX2ZhdWx0GAsgASgNUhBiYXR0ZXJ5U3RvcEZhd
  Wx0EiwKEmJhdHRlcnlfc3RvcF9lcnJvchgMIAEoDVIQYmF0dGVyeVN0b3BFcnJvchIuChNjaGFyZ2VyX3N0b3BfcmVhc29uGBQgA
  SgNUhFjaGFyZ2VyU3RvcFJlYXNvbhIsChJjaGFyZ2VyX3N0b3BfZmF1bHQYFSABKA1SEGNoYXJnZXJTdG9wRmF1bHQSLAoSY2hhc
  mdlcl9zdG9wX2Vycm9yGBYgASgNUhBjaGFyZ2VyU3RvcEVycm9yEiwKEmJhdHRlcnlfZmluaXNoX3NvYxgeIAEoDVIQYmF0dGVye
  UZpbmlzaFNvYxIuChNiYXR0ZXJ5X21heF92b2x0YWdlGB8gASgNUhFiYXR0ZXJ5TWF4Vm9sdGFnZRIuChNiYXR0ZXJ5X21pbl92b
  2x0YWdlGCAgASgNUhFiYXR0ZXJ5TWluVm9sdGFnZRIoChBiYXR0ZXJ5X21heF90ZW1wGCEgASgNUg5iYXR0ZXJ5TWF4VGVtcBIoC
  hBiYXR0ZXJ5X21pbl90ZW1wGCIgASgNUg5iYXR0ZXJ5TWluVGVtcBIsChJjaGFyZ2VyX3RvdGFsX3RpbWUYKCABKA1SEGNoYXJnZ
  XJUb3RhbFRpbWUSMAoUY2hhcmdlcl9vdXRwdXRfcG93ZXIYKSABKA1SEmNoYXJnZXJPdXRwdXRQb3dlciKcAwoORGF0YUNoZ01lY
  XN1cmUSPQoJY29tcF90eXBlGAEgAigOMiAuQ2hhcmdlckxpbmsuR2F0ZXdheS5DaGdDb21wVHlwZVIIY29tcFR5cGUSGQoIY29tc
  F9pZHgYAiABKA1SB2NvbXBJZHgSFwoHcGx1Z19pZBgDIAEoDVIGcGx1Z0lkEj4KCGxvY2F0aW9uGAQgASgOMiIuQ2hhcmdlckxpb
  msuR2F0ZXdheS5DaGdNZWFzdXJlTG9jUghsb2NhdGlvbhJPCgp2YWx1ZV9saXN0GAUgAygLMjAuQ2hhcmdlckxpbmsuR2F0ZXdhe
  S5EYXRhQ2hnTWVhc3VyZS5NZWFzdXJlVmFsdWVSCXZhbHVlTGlzdBqFAQoMTWVhc3VyZVZhbHVlEkEKCW1lYXN1cmFuZBgBIAIoD
  jIjLkNoYXJnZXJMaW5rLkdhdGV3YXkuQ2hnTWVhc3VyZVR5cGVSCW1lYXN1cmFuZBIcCglleHRlbnNpb24YAiABKAlSCWV4dGVuc
  2lvbhIUCgV2YWx1ZRgDIAIoBVIFdmFsdWUi2gIKDERhdGFDaGdBbGFybRI1CgRjb2RlGAEgAigOMiEuQ2hhcmdlckxpbmsuR2F0Z
  XdheS5DaGdBbGFybUNvZGVSBGNvZGUSEgoEbmFtZRgCIAEoCVIEbmFtZRISCgRpbmZvGAMgASgJUgRpbmZvEjgKBWxldmVsGAQgA
  SgOMiIuQ2hhcmdlckxpbmsuR2F0ZXdheS5DaGdBbGFybUxldmVsUgVsZXZlbBIcCgl0aW1lc3RhbXAYBSABKANSCXRpbWVzdGFtc
  BI9Cgljb21wX3R5cGUYBiACKA4yIC5DaGFyZ2VyTGluay5HYXRld2F5LkNoZ0NvbXBUeXBlUghjb21wVHlwZRIZCghjb21wX2lke
  BgHIAEoDVIHY29tcElkeBIXCgdwbHVnX2lkGAggASgNUgZwbHVnSWQSIAoMZGV2X29yZGVyX2lkGAkgASgDUgpkZXZPcmRlcklkI
  qsHChJEYXRhQ2hnUHJpY2VTY2hlbWUSJgoPcHJpY2Vfc2NoZW1lX2lkGAEgAigNUg1wcmljZVNjaGVtZUlkEioKEXByaWNlX3Nja
  GVtZV9kZXNjGAIgASgJUg9wcmljZVNjaGVtZURlc2MSYgoPdGFyaWZmX3NldF9saXN0GAMgAygLMjouQ2hhcmdlckxpbmsuR2F0Z
  XdheS5EYXRhQ2hnUHJpY2VTY2hlbWUuVGFyaWZmU2V0TGlzdEVudHJ5Ug10YXJpZmZTZXRMaXN0GnQKElRhcmlmZlNldExpc3RFb
  nRyeRIQCgNrZXkYASABKA1SA2tleRJICgV2YWx1ZRgCIAEoCzIyLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ1ByaWNlU2NoZ
  W1lLlRhcmlmZkxpc3RSBXZhbHVlOgI4ARrsAgoKVGFyaWZmTGlzdBJDCgt0YXJpZmZfdHlwZRgBIAIoDjIiLkNoYXJnZXJMaW5rL
  kdhdGV3YXkuQ2hnVGFyaWZmVHlwZVIKdGFyaWZmVHlwZRJjCgt0YXJpZmZfbGlzdBgCIAMoCzJCLkNoYXJnZXJMaW5rLkdhdGV3Y
  XkuRGF0YUNoZ1ByaWNlU2NoZW1lLlRhcmlmZkxpc3QuVGFyaWZmTGlzdEVudHJ5Ugp0YXJpZmZMaXN0Eh8KC3RhcmlmZl9kZXNjG
  AMgASgJUgp0YXJpZmZEZXNjEh8KC3RhcmlmZl90aW1lGAQgASgNUgp0YXJpZmZUaW1lGnIKD1RhcmlmZkxpc3RFbnRyeRIQCgNrZ
  XkYASABKA1SA2tleRJJCgV2YWx1ZRgCIAEoCzIzLkNoYXJnZXJMaW5rLkdhdGV3YXkuRGF0YUNoZ1ByaWNlU2NoZW1lLlRhcmlmZ
  lByaWNlUgV2YWx1ZToCOAEa9wEKC1RhcmlmZlByaWNlEhsKCXRhcmlmZl9pZBgBIAIoDVIIdGFyaWZmSWQSHwoLcHJpY2VfbW9uZ
  XkYAiACKA1SCnByaWNlTW9uZXkSHQoKcHJpY2VfZGVzYxgDIAEoCVIJcHJpY2VEZXNjEh0KCnN0YXJ0X3RpbWUYBCABKA1SCXN0Y
  XJ0VGltZRIhCgxzdGFydF9wZXJpb2QYBSABKA1SC3N0YXJ0UGVyaW9kEkkKDXRhcmlmZl9wZXJpb2QYBiABKA4yJC5DaGFyZ2VyT
  Gluay5HYXRld2F5LkNoZ1RhcmlmZlBlcmlvZFIMdGFyaWZmUGVyaW9kIngKEkRhdGFDaGdQcmljZVBlcmlvZBImCg9wcmljZV9zY
  2hlbWVfaWQYASACKA1SDXByaWNlU2NoZW1lSWQSHQoKc3RhcnRfZGF0ZRgCIAIoA1IJc3RhcnREYXRlEhsKCXN0b3BfZGF0ZRgDI
  AIoA1IIc3RvcERhdGVCbAohY29tLmNoYXJnZXJsaW5rLmdhdGV3YXkuYmVhbi5kYXRhUABaIWNvbS5jaGFyZ2VybGluay5nYXRld
  2F5LmJlYW4uZGF0YaoCIWNvbS5jaGFyZ2VybGluay5nYXRld2F5LmJlYW4uZGF0YQ=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, Seq(
      com.chargerlink.gateway.bean.common.EnumChargerProto.scalaDescriptor,
      com.google.protobuf.any.AnyProto.scalaDescriptor
    ))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      com.chargerlink.gateway.bean.common.EnumChargerProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}