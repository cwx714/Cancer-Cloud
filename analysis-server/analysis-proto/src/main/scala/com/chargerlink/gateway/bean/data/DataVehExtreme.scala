// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 极值数据的消息定义。对应电动车国标'0x06极值数据'。
  *
  * @param maxVolIdx
  *  / (必填，国标字段)最高电压电池子系统号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param maxVolPos
  *  / (必填，国标字段)最高电压电池单体代号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param maxVolVal
  *  / (必填，国标字段)电池单体电压最高值。单位：0.001V，范围：0.000V～15.000V，0xFFFE：异常，0xFFFF：无效。
  * @param minVolIdx
  *  / (必填，国标字段)最低电压电池子系统号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param minVolPos
  *  / (必填，国标字段)最低电压电池单体代号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param minVolVal
  *  / (必填，国标字段)电池单体电压最低值。单位：0.001V，范围：0.000V～15.000V，0xFFFE：异常，0xFFFF：无效。
  * @param maxTempIdx
  *  / (必填，国标字段)最高温度子系统号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param maxTempPos
  *  / (必填，国标字段)最高温度探针序号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param maxTempVal
  *  / (必填，国标字段)最高温度值。单位：1°C，偏移：-40°C，范围：-40A～210A，0xFE：异常，0xFF：无效。
  * @param minTempIdx
  *  / (必填，国标字段)最低温度子系统号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param minTempPos
  *  / (必填，国标字段)最低温度探针序号。范围：1～250，0xFE：异常，0xFF：无效。
  * @param minTempVal
  *  / (必填，国标字段)最低温度值。单位：1°C，偏移：-40°C，范围：-40A～210A，0xFE：异常，0xFF：无效。
  */
@SerialVersionUID(0L)
final case class DataVehExtreme(
    maxVolIdx: Int,
    maxVolPos: Int,
    maxVolVal: Int,
    minVolIdx: Int,
    minVolPos: Int,
    minVolVal: Int,
    maxTempIdx: Int,
    maxTempPos: Int,
    maxTempVal: Int,
    minTempIdx: Int,
    minTempPos: Int,
    minTempVal: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehExtreme] with com.trueaccord.lenses.Updatable[DataVehExtreme] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, maxVolIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, maxVolPos)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, maxVolVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, minVolIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, minVolPos)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, minVolVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, maxTempIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, maxTempPos)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(9, maxTempVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, minTempIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, minTempPos)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, minTempVal)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, maxVolIdx)
      _output__.writeUInt32(2, maxVolPos)
      _output__.writeUInt32(3, maxVolVal)
      _output__.writeUInt32(4, minVolIdx)
      _output__.writeUInt32(5, minVolPos)
      _output__.writeUInt32(6, minVolVal)
      _output__.writeUInt32(7, maxTempIdx)
      _output__.writeUInt32(8, maxTempPos)
      _output__.writeUInt32(9, maxTempVal)
      _output__.writeUInt32(10, minTempIdx)
      _output__.writeUInt32(11, minTempPos)
      _output__.writeUInt32(12, minTempVal)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehExtreme = {
      var __maxVolIdx = this.maxVolIdx
      var __maxVolPos = this.maxVolPos
      var __maxVolVal = this.maxVolVal
      var __minVolIdx = this.minVolIdx
      var __minVolPos = this.minVolPos
      var __minVolVal = this.minVolVal
      var __maxTempIdx = this.maxTempIdx
      var __maxTempPos = this.maxTempPos
      var __maxTempVal = this.maxTempVal
      var __minTempIdx = this.minTempIdx
      var __minTempPos = this.minTempPos
      var __minTempVal = this.minTempVal
      var __requiredFields0: Long = 0xfffL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __maxVolIdx = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __maxVolPos = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __maxVolVal = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __minVolIdx = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __minVolPos = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffefL
          case 48 =>
            __minVolVal = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 56 =>
            __maxTempIdx = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffbfL
          case 64 =>
            __maxTempPos = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffff7fL
          case 72 =>
            __maxTempVal = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffeffL
          case 80 =>
            __minTempIdx = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffdffL
          case 88 =>
            __minTempPos = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffbffL
          case 96 =>
            __minTempVal = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffff7ffL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehExtreme(
          maxVolIdx = __maxVolIdx,
          maxVolPos = __maxVolPos,
          maxVolVal = __maxVolVal,
          minVolIdx = __minVolIdx,
          minVolPos = __minVolPos,
          minVolVal = __minVolVal,
          maxTempIdx = __maxTempIdx,
          maxTempPos = __maxTempPos,
          maxTempVal = __maxTempVal,
          minTempIdx = __minTempIdx,
          minTempPos = __minTempPos,
          minTempVal = __minTempVal
      )
    }
    def withMaxVolIdx(__v: Int): DataVehExtreme = copy(maxVolIdx = __v)
    def withMaxVolPos(__v: Int): DataVehExtreme = copy(maxVolPos = __v)
    def withMaxVolVal(__v: Int): DataVehExtreme = copy(maxVolVal = __v)
    def withMinVolIdx(__v: Int): DataVehExtreme = copy(minVolIdx = __v)
    def withMinVolPos(__v: Int): DataVehExtreme = copy(minVolPos = __v)
    def withMinVolVal(__v: Int): DataVehExtreme = copy(minVolVal = __v)
    def withMaxTempIdx(__v: Int): DataVehExtreme = copy(maxTempIdx = __v)
    def withMaxTempPos(__v: Int): DataVehExtreme = copy(maxTempPos = __v)
    def withMaxTempVal(__v: Int): DataVehExtreme = copy(maxTempVal = __v)
    def withMinTempIdx(__v: Int): DataVehExtreme = copy(minTempIdx = __v)
    def withMinTempPos(__v: Int): DataVehExtreme = copy(minTempPos = __v)
    def withMinTempVal(__v: Int): DataVehExtreme = copy(minTempVal = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => maxVolIdx
        case 2 => maxVolPos
        case 3 => maxVolVal
        case 4 => minVolIdx
        case 5 => minVolPos
        case 6 => minVolVal
        case 7 => maxTempIdx
        case 8 => maxTempPos
        case 9 => maxTempVal
        case 10 => minTempIdx
        case 11 => minTempPos
        case 12 => minTempVal
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(maxVolIdx)
        case 2 => _root_.scalapb.descriptors.PInt(maxVolPos)
        case 3 => _root_.scalapb.descriptors.PInt(maxVolVal)
        case 4 => _root_.scalapb.descriptors.PInt(minVolIdx)
        case 5 => _root_.scalapb.descriptors.PInt(minVolPos)
        case 6 => _root_.scalapb.descriptors.PInt(minVolVal)
        case 7 => _root_.scalapb.descriptors.PInt(maxTempIdx)
        case 8 => _root_.scalapb.descriptors.PInt(maxTempPos)
        case 9 => _root_.scalapb.descriptors.PInt(maxTempVal)
        case 10 => _root_.scalapb.descriptors.PInt(minTempIdx)
        case 11 => _root_.scalapb.descriptors.PInt(minTempPos)
        case 12 => _root_.scalapb.descriptors.PInt(minTempVal)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehExtreme
}

object DataVehExtreme extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehExtreme] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehExtreme] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehExtreme = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehExtreme(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[Int],
      __fieldsMap(__fields.get(3)).asInstanceOf[Int],
      __fieldsMap(__fields.get(4)).asInstanceOf[Int],
      __fieldsMap(__fields.get(5)).asInstanceOf[Int],
      __fieldsMap(__fields.get(6)).asInstanceOf[Int],
      __fieldsMap(__fields.get(7)).asInstanceOf[Int],
      __fieldsMap(__fields.get(8)).asInstanceOf[Int],
      __fieldsMap(__fields.get(9)).asInstanceOf[Int],
      __fieldsMap(__fields.get(10)).asInstanceOf[Int],
      __fieldsMap(__fields.get(11)).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehExtreme] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehExtreme(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).get.as[Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehExtreme(
    maxVolIdx = 0,
    maxVolPos = 0,
    maxVolVal = 0,
    minVolIdx = 0,
    minVolPos = 0,
    minVolVal = 0,
    maxTempIdx = 0,
    maxTempPos = 0,
    maxTempVal = 0,
    minTempIdx = 0,
    minTempPos = 0,
    minTempVal = 0
  )
  implicit class DataVehExtremeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehExtreme]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehExtreme](_l) {
    def maxVolIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxVolIdx)((c_, f_) => c_.copy(maxVolIdx = f_))
    def maxVolPos: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxVolPos)((c_, f_) => c_.copy(maxVolPos = f_))
    def maxVolVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxVolVal)((c_, f_) => c_.copy(maxVolVal = f_))
    def minVolIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minVolIdx)((c_, f_) => c_.copy(minVolIdx = f_))
    def minVolPos: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minVolPos)((c_, f_) => c_.copy(minVolPos = f_))
    def minVolVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minVolVal)((c_, f_) => c_.copy(minVolVal = f_))
    def maxTempIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxTempIdx)((c_, f_) => c_.copy(maxTempIdx = f_))
    def maxTempPos: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxTempPos)((c_, f_) => c_.copy(maxTempPos = f_))
    def maxTempVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxTempVal)((c_, f_) => c_.copy(maxTempVal = f_))
    def minTempIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minTempIdx)((c_, f_) => c_.copy(minTempIdx = f_))
    def minTempPos: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minTempPos)((c_, f_) => c_.copy(minTempPos = f_))
    def minTempVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.minTempVal)((c_, f_) => c_.copy(minTempVal = f_))
  }
  final val MAX_VOL_IDX_FIELD_NUMBER = 1
  final val MAX_VOL_POS_FIELD_NUMBER = 2
  final val MAX_VOL_VAL_FIELD_NUMBER = 3
  final val MIN_VOL_IDX_FIELD_NUMBER = 4
  final val MIN_VOL_POS_FIELD_NUMBER = 5
  final val MIN_VOL_VAL_FIELD_NUMBER = 6
  final val MAX_TEMP_IDX_FIELD_NUMBER = 7
  final val MAX_TEMP_POS_FIELD_NUMBER = 8
  final val MAX_TEMP_VAL_FIELD_NUMBER = 9
  final val MIN_TEMP_IDX_FIELD_NUMBER = 10
  final val MIN_TEMP_POS_FIELD_NUMBER = 11
  final val MIN_TEMP_VAL_FIELD_NUMBER = 12
}
