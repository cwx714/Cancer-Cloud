// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 充电桩遥测数据的消息定义。
  *
  * @param compType
  *  / (必填)设备组件类型。
  * @param compIdx
  *  / (可选)设备组件编号。如：风扇1、风扇2；电表1、电表2等。null：表示只有1个设备组件。
  * @param plugId
  *  / (可选)设备组件的充电接口ID。null：表示不属于充电接口的设备组件。
  * @param location
  *  / (可选)设备组件的遥测位置。
  * @param valueList
  *  / (必填)遥测数据列表。
  */
@SerialVersionUID(0L)
final case class DataChgMeasure(
    compType: com.chargerlink.gateway.bean.common.ChgCompType,
    compIdx: scala.Option[Int] = None,
    plugId: scala.Option[Int] = None,
    location: scala.Option[com.chargerlink.gateway.bean.common.ChgMeasureLoc] = None,
    valueList: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataChgMeasure] with com.trueaccord.lenses.Updatable[DataChgMeasure] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, compType.value)
      if (compIdx.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, compIdx.get) }
      if (plugId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, plugId.get) }
      if (location.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, location.get.value) }
      valueList.foreach(valueList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(valueList.serializedSize) + valueList.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, compType.value)
      compIdx.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      plugId.foreach { __v =>
        _output__.writeUInt32(3, __v)
      };
      location.foreach { __v =>
        _output__.writeEnum(4, __v.value)
      };
      valueList.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgMeasure = {
      var __compType = this.compType
      var __compIdx = this.compIdx
      var __plugId = this.plugId
      var __location = this.location
      val __valueList = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue] ++= this.valueList)
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __compType = com.chargerlink.gateway.bean.common.ChgCompType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __compIdx = Some(_input__.readUInt32())
          case 24 =>
            __plugId = Some(_input__.readUInt32())
          case 32 =>
            __location = Some(com.chargerlink.gateway.bean.common.ChgMeasureLoc.fromValue(_input__.readEnum()))
          case 42 =>
            __valueList += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataChgMeasure(
          compType = __compType,
          compIdx = __compIdx,
          plugId = __plugId,
          location = __location,
          valueList = __valueList.result()
      )
    }
    def withCompType(__v: com.chargerlink.gateway.bean.common.ChgCompType): DataChgMeasure = copy(compType = __v)
    def getCompIdx: Int = compIdx.getOrElse(0)
    def clearCompIdx: DataChgMeasure = copy(compIdx = None)
    def withCompIdx(__v: Int): DataChgMeasure = copy(compIdx = Some(__v))
    def getPlugId: Int = plugId.getOrElse(0)
    def clearPlugId: DataChgMeasure = copy(plugId = None)
    def withPlugId(__v: Int): DataChgMeasure = copy(plugId = Some(__v))
    def getLocation: com.chargerlink.gateway.bean.common.ChgMeasureLoc = location.getOrElse(com.chargerlink.gateway.bean.common.ChgMeasureLoc.CHG_MEASURE_LOC_OUTSIDE)
    def clearLocation: DataChgMeasure = copy(location = None)
    def withLocation(__v: com.chargerlink.gateway.bean.common.ChgMeasureLoc): DataChgMeasure = copy(location = Some(__v))
    def clearValueList = copy(valueList = _root_.scala.collection.Seq.empty)
    def addValueList(__vs: com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue*): DataChgMeasure = addAllValueList(__vs)
    def addAllValueList(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]): DataChgMeasure = copy(valueList = valueList ++ __vs)
    def withValueList(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]): DataChgMeasure = copy(valueList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => compType.javaValueDescriptor
        case 2 => compIdx.orNull
        case 3 => plugId.orNull
        case 4 => location.map(_.javaValueDescriptor).orNull
        case 5 => valueList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(compType.scalaValueDescriptor)
        case 2 => compIdx.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => plugId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => location.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(valueList.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataChgMeasure
}

object DataChgMeasure extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgMeasure] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgMeasure] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgMeasure = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataChgMeasure(
      com.chargerlink.gateway.bean.common.ChgCompType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.ChgMeasureLoc.fromValue(__e.getNumber)),
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgMeasure] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataChgMeasure(
        com.chargerlink.gateway.bean.common.ChgCompType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.chargerlink.gateway.bean.common.ChgMeasureLoc.fromValue(__e.number)),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataChargerProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataChargerProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => __out = com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.ChgCompType
      case 4 => com.chargerlink.gateway.bean.common.ChgMeasureLoc
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgMeasure(
    compType = com.chargerlink.gateway.bean.common.ChgCompType.CHG_COMP_NONE
  )
  /** * 遥测数据值的消息定义。
    *
    * @param measurand
    *  / (必填)遥测参数。
    * @param extension
    *  / (可选)扩展遥测参数名。当遥测参数为0时有效。
    * @param value
    *  / (必填)遥测值。
    */
  @SerialVersionUID(0L)
  final case class MeasureValue(
      measurand: com.chargerlink.gateway.bean.common.ChgMeasureType,
      extension: scala.Option[String] = None,
      value: Int
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MeasureValue] with com.trueaccord.lenses.Updatable[MeasureValue] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, measurand.value)
        if (extension.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, extension.get) }
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, value)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        _output__.writeEnum(1, measurand.value)
        extension.foreach { __v =>
          _output__.writeString(2, __v)
        };
        _output__.writeInt32(3, value)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue = {
        var __measurand = this.measurand
        var __extension = this.extension
        var __value = this.value
        var __requiredFields0: Long = 0x3L
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __measurand = com.chargerlink.gateway.bean.common.ChgMeasureType.fromValue(_input__.readEnum())
              __requiredFields0 &= 0xfffffffffffffffeL
            case 18 =>
              __extension = Some(_input__.readString())
            case 24 =>
              __value = _input__.readInt32()
              __requiredFields0 &= 0xfffffffffffffffdL
            case tag => _input__.skipField(tag)
          }
        }
        if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
        com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue(
            measurand = __measurand,
            extension = __extension,
            value = __value
        )
      }
      def withMeasurand(__v: com.chargerlink.gateway.bean.common.ChgMeasureType): MeasureValue = copy(measurand = __v)
      def getExtension: String = extension.getOrElse("")
      def clearExtension: MeasureValue = copy(extension = None)
      def withExtension(__v: String): MeasureValue = copy(extension = Some(__v))
      def withValue(__v: Int): MeasureValue = copy(value = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => measurand.javaValueDescriptor
          case 2 => extension.orNull
          case 3 => value
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(measurand.scalaValueDescriptor)
          case 2 => extension.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue
  }
  
  object MeasureValue extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue(
        com.chargerlink.gateway.bean.common.ChgMeasureType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
        __fieldsMap(__fields.get(2)).asInstanceOf[Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue(
          com.chargerlink.gateway.bean.common.ChgMeasureType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int]
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgMeasure.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataChgMeasure.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => com.chargerlink.gateway.bean.common.ChgMeasureType
      }
    }
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue(
      measurand = com.chargerlink.gateway.bean.common.ChgMeasureType.CHG_MEASURE_VENDOR_EXTENSION,
      value = 0
    )
    implicit class MeasureValueLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue](_l) {
      def measurand: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgMeasureType] = field(_.measurand)((c_, f_) => c_.copy(measurand = f_))
      def extension: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getExtension)((c_, f_) => c_.copy(extension = Some(f_)))
      def optionalExtension: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.extension)((c_, f_) => c_.copy(extension = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val MEASURAND_FIELD_NUMBER = 1
    final val EXTENSION_FIELD_NUMBER = 2
    final val VALUE_FIELD_NUMBER = 3
  }
  
  implicit class DataChgMeasureLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgMeasure]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataChgMeasure](_l) {
    def compType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgCompType] = field(_.compType)((c_, f_) => c_.copy(compType = f_))
    def compIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getCompIdx)((c_, f_) => c_.copy(compIdx = Some(f_)))
    def optionalCompIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.compIdx)((c_, f_) => c_.copy(compIdx = f_))
    def plugId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlugId)((c_, f_) => c_.copy(plugId = Some(f_)))
    def optionalPlugId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plugId)((c_, f_) => c_.copy(plugId = f_))
    def location: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.ChgMeasureLoc] = field(_.getLocation)((c_, f_) => c_.copy(location = Some(f_)))
    def optionalLocation: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.common.ChgMeasureLoc]] = field(_.location)((c_, f_) => c_.copy(location = f_))
    def valueList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataChgMeasure.MeasureValue]] = field(_.valueList)((c_, f_) => c_.copy(valueList = f_))
  }
  final val COMP_TYPE_FIELD_NUMBER = 1
  final val COMP_IDX_FIELD_NUMBER = 2
  final val PLUG_ID_FIELD_NUMBER = 3
  final val LOCATION_FIELD_NUMBER = 4
  final val VALUE_LIST_FIELD_NUMBER = 5
}
