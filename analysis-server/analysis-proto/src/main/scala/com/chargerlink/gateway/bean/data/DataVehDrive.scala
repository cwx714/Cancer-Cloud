// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 驱动电机数据的消息定义。对应电动车国标'0x02驱动电机数据'。
  *
  * @param index
  *  / (必填，国标字段)驱动电机序号。范围：1～253。
  * @param driveStatus
  *  / (必填，国标字段)驱动电机状态。0x01：耗电状态，0x02：发电状态，0x03：关闭状态，0x04：准备状态，0xFE：异常，0xFF：无效。
  * @param ctrlerTemp
  *  / (必填，国标字段)驱动电机控制器温度。单位：1°C，偏移：-40°C，范围：-40°C～210°C，0xFE：异常，0xFF：无效。
  * @param driveSpeed
  *  / (必填，国标字段)驱动电机转速。单位：1rpm，偏移：-2000rpm，范围：-2000rpm～45531rpm，0xFFFE：异常，0xFFFF：无效。
  * @param driveTorque
  *  / (必填，国标字段)驱动电机转矩。单位：0.1N*m，偏移：-2000.0rpm，范围：-2000.0N*m～4553.1N*m，0xFFFE：异常，0xFFFF：无效。
  * @param driveTemp
  *  / (必填，国标字段)驱动电机温度。单位：1°C，偏移：-40°C，范围：-40°C～210°C，0xFE：异常，0xFF：无效。
  * @param busVoltage
  *  / (必填，国标字段)电机输入电压。单位：0.1V，范围：0.0V～6000.0V，0xFFFE：异常，0xFFFF：无效。
  * @param busCurrent
  *  / (必填，国标字段)电机母线电流。单位：0.1A，偏移：-1000.0A，范围：-1000.0A～1000.0A，0xFFFE：异常，0xF
  */
@SerialVersionUID(0L)
final case class DataVehDrive(
    index: Int,
    driveStatus: Int,
    ctrlerTemp: Int,
    driveSpeed: Int,
    driveTorque: Int,
    driveTemp: Int,
    busVoltage: Int,
    busCurrent: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehDrive] with com.trueaccord.lenses.Updatable[DataVehDrive] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, index)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, driveStatus)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, ctrlerTemp)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, driveSpeed)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, driveTorque)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, driveTemp)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, busVoltage)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, busCurrent)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, index)
      _output__.writeUInt32(2, driveStatus)
      _output__.writeUInt32(3, ctrlerTemp)
      _output__.writeUInt32(4, driveSpeed)
      _output__.writeUInt32(5, driveTorque)
      _output__.writeUInt32(6, driveTemp)
      _output__.writeUInt32(7, busVoltage)
      _output__.writeUInt32(8, busCurrent)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehDrive = {
      var __index = this.index
      var __driveStatus = this.driveStatus
      var __ctrlerTemp = this.ctrlerTemp
      var __driveSpeed = this.driveSpeed
      var __driveTorque = this.driveTorque
      var __driveTemp = this.driveTemp
      var __busVoltage = this.busVoltage
      var __busCurrent = this.busCurrent
      var __requiredFields0: Long = 0xffL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __index = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __driveStatus = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __ctrlerTemp = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __driveSpeed = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 40 =>
            __driveTorque = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffefL
          case 48 =>
            __driveTemp = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 56 =>
            __busVoltage = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffbfL
          case 64 =>
            __busCurrent = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffff7fL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehDrive(
          index = __index,
          driveStatus = __driveStatus,
          ctrlerTemp = __ctrlerTemp,
          driveSpeed = __driveSpeed,
          driveTorque = __driveTorque,
          driveTemp = __driveTemp,
          busVoltage = __busVoltage,
          busCurrent = __busCurrent
      )
    }
    def withIndex(__v: Int): DataVehDrive = copy(index = __v)
    def withDriveStatus(__v: Int): DataVehDrive = copy(driveStatus = __v)
    def withCtrlerTemp(__v: Int): DataVehDrive = copy(ctrlerTemp = __v)
    def withDriveSpeed(__v: Int): DataVehDrive = copy(driveSpeed = __v)
    def withDriveTorque(__v: Int): DataVehDrive = copy(driveTorque = __v)
    def withDriveTemp(__v: Int): DataVehDrive = copy(driveTemp = __v)
    def withBusVoltage(__v: Int): DataVehDrive = copy(busVoltage = __v)
    def withBusCurrent(__v: Int): DataVehDrive = copy(busCurrent = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => index
        case 2 => driveStatus
        case 3 => ctrlerTemp
        case 4 => driveSpeed
        case 5 => driveTorque
        case 6 => driveTemp
        case 7 => busVoltage
        case 8 => busCurrent
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(index)
        case 2 => _root_.scalapb.descriptors.PInt(driveStatus)
        case 3 => _root_.scalapb.descriptors.PInt(ctrlerTemp)
        case 4 => _root_.scalapb.descriptors.PInt(driveSpeed)
        case 5 => _root_.scalapb.descriptors.PInt(driveTorque)
        case 6 => _root_.scalapb.descriptors.PInt(driveTemp)
        case 7 => _root_.scalapb.descriptors.PInt(busVoltage)
        case 8 => _root_.scalapb.descriptors.PInt(busCurrent)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehDrive
}

object DataVehDrive extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehDrive] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehDrive] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehDrive = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehDrive(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[Int],
      __fieldsMap(__fields.get(3)).asInstanceOf[Int],
      __fieldsMap(__fields.get(4)).asInstanceOf[Int],
      __fieldsMap(__fields.get(5)).asInstanceOf[Int],
      __fieldsMap(__fields.get(6)).asInstanceOf[Int],
      __fieldsMap(__fields.get(7)).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehDrive] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehDrive(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehDrive(
    index = 0,
    driveStatus = 0,
    ctrlerTemp = 0,
    driveSpeed = 0,
    driveTorque = 0,
    driveTemp = 0,
    busVoltage = 0,
    busCurrent = 0
  )
  implicit class DataVehDriveLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehDrive]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehDrive](_l) {
    def index: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.index)((c_, f_) => c_.copy(index = f_))
    def driveStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.driveStatus)((c_, f_) => c_.copy(driveStatus = f_))
    def ctrlerTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.ctrlerTemp)((c_, f_) => c_.copy(ctrlerTemp = f_))
    def driveSpeed: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.driveSpeed)((c_, f_) => c_.copy(driveSpeed = f_))
    def driveTorque: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.driveTorque)((c_, f_) => c_.copy(driveTorque = f_))
    def driveTemp: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.driveTemp)((c_, f_) => c_.copy(driveTemp = f_))
    def busVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.busVoltage)((c_, f_) => c_.copy(busVoltage = f_))
    def busCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.busCurrent)((c_, f_) => c_.copy(busCurrent = f_))
  }
  final val INDEX_FIELD_NUMBER = 1
  final val DRIVE_STATUS_FIELD_NUMBER = 2
  final val CTRLER_TEMP_FIELD_NUMBER = 3
  final val DRIVE_SPEED_FIELD_NUMBER = 4
  final val DRIVE_TORQUE_FIELD_NUMBER = 5
  final val DRIVE_TEMP_FIELD_NUMBER = 6
  final val BUS_VOLTAGE_FIELD_NUMBER = 7
  final val BUS_CURRENT_FIELD_NUMBER = 8
}
