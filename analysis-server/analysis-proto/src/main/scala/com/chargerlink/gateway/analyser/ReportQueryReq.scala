// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.chargerlink.gateway.analyser



/** * 报表查询请求的消息定义。
  *
  * @param reportId
  *  / (必填)查询的报表ID。其中：报表ID见README.md中的定义。
  * @param fromTime
  *  / (必填)查询的开始时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param toTime
  *  / (必填)查询的结束时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param period
  *  / (必填)查询的报表统计周期。
  * @param offset
  *  / (可选)返回统计记录的起始记录。null：0。
  * @param total
  *  / (可选)返回统计记录的最大记录数。null：返回全部记录。
  * @param params
  *  / (可选)附加的分组或查询条件。格式为：参数ID-&gt;参数值。其中：参数ID为常量Group的值，或其他扩展ID的值。
  */
@SerialVersionUID(0L)
final case class ReportQueryReq(
    reportId: Int = 0,
    fromTime: Long = 0L,
    toTime: Long = 0L,
    period: com.chargerlink.gateway.analyser.ReportQueryReq.Period = com.chargerlink.gateway.analyser.ReportQueryReq.Period.PERIOD_COUNT,
    offset: Int = 0,
    total: Int = 0,
    params: scala.collection.immutable.Map[Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param] = scala.collection.immutable.Map.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ReportQueryReq] with com.trueaccord.lenses.Updatable[ReportQueryReq] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (reportId != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, reportId) }
      if (fromTime != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, fromTime) }
      if (toTime != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(3, toTime) }
      if (period != com.chargerlink.gateway.analyser.ReportQueryReq.Period.PERIOD_COUNT) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, period.value) }
      if (offset != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, offset) }
      if (total != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, total) }
      params.foreach(params => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase(params).serializedSize) + com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase(params).serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = reportId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = fromTime
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      {
        val __v = toTime
        if (__v != 0L) {
          _output__.writeUInt64(3, __v)
        }
      };
      {
        val __v = period
        if (__v != com.chargerlink.gateway.analyser.ReportQueryReq.Period.PERIOD_COUNT) {
          _output__.writeEnum(4, __v.value)
        }
      };
      {
        val __v = offset
        if (__v != 0) {
          _output__.writeUInt32(5, __v)
        }
      };
      {
        val __v = total
        if (__v != 0) {
          _output__.writeUInt32(6, __v)
        }
      };
      params.foreach { __v =>
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase(__v).serializedSize)
        com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase(__v).writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.ReportQueryReq = {
      var __reportId = this.reportId
      var __fromTime = this.fromTime
      var __toTime = this.toTime
      var __period = this.period
      var __offset = this.offset
      var __total = this.total
      val __params = (scala.collection.immutable.Map.newBuilder[Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param] ++= this.params)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __reportId = _input__.readUInt32()
          case 16 =>
            __fromTime = _input__.readUInt64()
          case 24 =>
            __toTime = _input__.readUInt64()
          case 32 =>
            __period = com.chargerlink.gateway.analyser.ReportQueryReq.Period.fromValue(_input__.readEnum())
          case 40 =>
            __offset = _input__.readUInt32()
          case 48 =>
            __total = _input__.readUInt32()
          case 58 =>
            __params += com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry.defaultInstance))
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.analyser.ReportQueryReq(
          reportId = __reportId,
          fromTime = __fromTime,
          toTime = __toTime,
          period = __period,
          offset = __offset,
          total = __total,
          params = __params.result()
      )
    }
    def withReportId(__v: Int): ReportQueryReq = copy(reportId = __v)
    def withFromTime(__v: Long): ReportQueryReq = copy(fromTime = __v)
    def withToTime(__v: Long): ReportQueryReq = copy(toTime = __v)
    def withPeriod(__v: com.chargerlink.gateway.analyser.ReportQueryReq.Period): ReportQueryReq = copy(period = __v)
    def withOffset(__v: Int): ReportQueryReq = copy(offset = __v)
    def withTotal(__v: Int): ReportQueryReq = copy(total = __v)
    def clearParams = copy(params = scala.collection.immutable.Map.empty)
    def addParams(__vs: (Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)*): ReportQueryReq = addAllParams(__vs)
    def addAllParams(__vs: TraversableOnce[(Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)]): ReportQueryReq = copy(params = params ++ __vs)
    def withParams(__v: scala.collection.immutable.Map[Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param]): ReportQueryReq = copy(params = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = reportId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = fromTime
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = toTime
          if (__t != 0L) __t else null
        }
        case 4 => {
          val __t = period.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => {
          val __t = offset
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = total
          if (__t != 0) __t else null
        }
        case 7 => params.map(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase)(_root_.scala.collection.breakOut)
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(reportId)
        case 2 => _root_.scalapb.descriptors.PLong(fromTime)
        case 3 => _root_.scalapb.descriptors.PLong(toTime)
        case 4 => _root_.scalapb.descriptors.PEnum(period.scalaValueDescriptor)
        case 5 => _root_.scalapb.descriptors.PInt(offset)
        case 6 => _root_.scalapb.descriptors.PInt(total)
        case 7 => _root_.scalapb.descriptors.PRepeated(params.map(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.analyser.ReportQueryReq
}

object ReportQueryReq extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.ReportQueryReq = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.analyser.ReportQueryReq(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), 0L).asInstanceOf[Long],
      com.chargerlink.gateway.analyser.ReportQueryReq.Period.fromValue(__fieldsMap.getOrElse(__fields.get(3), com.chargerlink.gateway.analyser.ReportQueryReq.Period.PERIOD_COUNT.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(5), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry]].map(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toCustom)(_root_.scala.collection.breakOut)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.ReportQueryReq] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.analyser.ReportQueryReq(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Long]).getOrElse(0L),
        com.chargerlink.gateway.analyser.ReportQueryReq.Period.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.chargerlink.gateway.analyser.ReportQueryReq.Period.PERIOD_COUNT.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.analyser.ReportQueryReq._typemapper_params.toCustom)(_root_.scala.collection.breakOut)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = QueryProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = QueryProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => __out = com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => com.chargerlink.gateway.analyser.ReportQueryReq.Period
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.analyser.ReportQueryReq(
  )
  sealed trait Period extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Period
    def isPeriodCount: Boolean = false
    def isPeriodHour: Boolean = false
    def isPeriodDay: Boolean = false
    def isPeriodWeek: Boolean = false
    def isPeriodMonth: Boolean = false
    def isPeriodQuarter: Boolean = false
    def isPeriodYear: Boolean = false
    def isPeriodAll: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Period] = com.chargerlink.gateway.analyser.ReportQueryReq.Period
  }
  
  object Period extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Period] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Period] = this
    @SerialVersionUID(0L)
    case object PERIOD_COUNT extends Period {
      val value = 0
      val index = 0
      val name = "PERIOD_COUNT"
      override def isPeriodCount: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_HOUR extends Period {
      val value = 1
      val index = 1
      val name = "PERIOD_HOUR"
      override def isPeriodHour: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_DAY extends Period {
      val value = 2
      val index = 2
      val name = "PERIOD_DAY"
      override def isPeriodDay: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_WEEK extends Period {
      val value = 3
      val index = 3
      val name = "PERIOD_WEEK"
      override def isPeriodWeek: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_MONTH extends Period {
      val value = 4
      val index = 4
      val name = "PERIOD_MONTH"
      override def isPeriodMonth: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_QUARTER extends Period {
      val value = 5
      val index = 5
      val name = "PERIOD_QUARTER"
      override def isPeriodQuarter: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_YEAR extends Period {
      val value = 6
      val index = 6
      val name = "PERIOD_YEAR"
      override def isPeriodYear: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERIOD_ALL extends Period {
      val value = 7
      val index = 7
      val name = "PERIOD_ALL"
      override def isPeriodAll: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Period with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(PERIOD_COUNT, PERIOD_HOUR, PERIOD_DAY, PERIOD_WEEK, PERIOD_MONTH, PERIOD_QUARTER, PERIOD_YEAR, PERIOD_ALL)
    def fromValue(value: Int): Period = value match {
      case 0 => PERIOD_COUNT
      case 1 => PERIOD_HOUR
      case 2 => PERIOD_DAY
      case 3 => PERIOD_WEEK
      case 4 => PERIOD_MONTH
      case 5 => PERIOD_QUARTER
      case 6 => PERIOD_YEAR
      case 7 => PERIOD_ALL
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.ReportQueryReq.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.ReportQueryReq.scalaDescriptor.enums(0)
  }
  sealed trait Group extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = Group
    def isGroupAccessId: Boolean = false
    def isGroupDeviceType: Boolean = false
    def isGroupDeviceId: Boolean = false
    def isGroupPowerStatus: Boolean = false
    def isGroupEvseStatus: Boolean = false
    def isGroupPlugStatus: Boolean = false
    def isGroupAlarmCode: Boolean = false
    def isGroupEventType: Boolean = false
    def isGroupBrand: Boolean = false
    def isGroupEnterprise: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Group] = com.chargerlink.gateway.analyser.ReportQueryReq.Group
  }
  
  object Group extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Group] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[Group] = this
    @SerialVersionUID(0L)
    case object GROUP_ACCESS_ID extends Group {
      val value = 0
      val index = 0
      val name = "GROUP_ACCESS_ID"
      override def isGroupAccessId: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_DEVICE_TYPE extends Group {
      val value = 1
      val index = 1
      val name = "GROUP_DEVICE_TYPE"
      override def isGroupDeviceType: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_DEVICE_ID extends Group {
      val value = 2
      val index = 2
      val name = "GROUP_DEVICE_ID"
      override def isGroupDeviceId: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_POWER_STATUS extends Group {
      val value = 10
      val index = 3
      val name = "GROUP_POWER_STATUS"
      override def isGroupPowerStatus: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_EVSE_STATUS extends Group {
      val value = 11
      val index = 4
      val name = "GROUP_EVSE_STATUS"
      override def isGroupEvseStatus: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_PLUG_STATUS extends Group {
      val value = 12
      val index = 5
      val name = "GROUP_PLUG_STATUS"
      override def isGroupPlugStatus: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_ALARM_CODE extends Group {
      val value = 20
      val index = 6
      val name = "GROUP_ALARM_CODE"
      override def isGroupAlarmCode: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_EVENT_TYPE extends Group {
      val value = 21
      val index = 7
      val name = "GROUP_EVENT_TYPE"
      override def isGroupEventType: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_BRAND extends Group {
      val value = 30
      val index = 8
      val name = "GROUP_BRAND"
      override def isGroupBrand: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP_ENTERPRISE extends Group {
      val value = 31
      val index = 9
      val name = "GROUP_ENTERPRISE"
      override def isGroupEnterprise: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends Group with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(GROUP_ACCESS_ID, GROUP_DEVICE_TYPE, GROUP_DEVICE_ID, GROUP_POWER_STATUS, GROUP_EVSE_STATUS, GROUP_PLUG_STATUS, GROUP_ALARM_CODE, GROUP_EVENT_TYPE, GROUP_BRAND, GROUP_ENTERPRISE)
    def fromValue(value: Int): Group = value match {
      case 0 => GROUP_ACCESS_ID
      case 1 => GROUP_DEVICE_TYPE
      case 2 => GROUP_DEVICE_ID
      case 10 => GROUP_POWER_STATUS
      case 11 => GROUP_EVSE_STATUS
      case 12 => GROUP_PLUG_STATUS
      case 20 => GROUP_ALARM_CODE
      case 21 => GROUP_EVENT_TYPE
      case 30 => GROUP_BRAND
      case 31 => GROUP_ENTERPRISE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.ReportQueryReq.javaDescriptor.getEnumTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.analyser.ReportQueryReq.scalaDescriptor.enums(1)
  }
  @SerialVersionUID(0L)
  final case class ParamsEntry(
      key: Int = 0,
      value: scala.Option[com.chargerlink.gateway.analyser.ReportQueryReq.Param] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ParamsEntry] with com.trueaccord.lenses.Updatable[ParamsEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, key) }
        if (value.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.get.serializedSize) + value.get.serializedSize }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = key
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        value.foreach { __v =>
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = _input__.readUInt32()
            case 18 =>
              __value = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.chargerlink.gateway.analyser.ReportQueryReq.Param.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry(
            key = __key,
            value = __value
        )
      }
      def withKey(__v: Int): ParamsEntry = copy(key = __v)
      def getValue: com.chargerlink.gateway.analyser.ReportQueryReq.Param = value.getOrElse(com.chargerlink.gateway.analyser.ReportQueryReq.Param.defaultInstance)
      def clearValue: ParamsEntry = copy(value = None)
      def withValue(__v: com.chargerlink.gateway.analyser.ReportQueryReq.Param): ParamsEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != 0) __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry
  }
  
  object ParamsEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry(
        __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.chargerlink.gateway.analyser.ReportQueryReq.Param]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[Int]).getOrElse(0),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.analyser.ReportQueryReq.Param]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryReq.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryReq.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => __out = com.chargerlink.gateway.analyser.ReportQueryReq.Param
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry(
    )
    implicit class ParamsEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.Param] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.analyser.ReportQueryReq.Param]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry, (Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry, (Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)](__m => (__m.key, __m.getValue))(__p => com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry(__p._1, Some(__p._2)))
  }
  
  /** * 报表查询参数值的消息定义。
    *
    * @param values
    *  / (必填)查询参数值的列表。
    */
  @SerialVersionUID(0L)
  final case class Param(
      values: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value] = _root_.scala.collection.Seq.empty
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Param] with com.trueaccord.lenses.Updatable[Param] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        values.foreach(values => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(values.serializedSize) + values.serializedSize)
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        values.foreach { __v =>
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.analyser.ReportQueryReq.Param = {
        val __values = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.analyser.Value] ++= this.values)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __values += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.analyser.Value.defaultInstance)
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.analyser.ReportQueryReq.Param(
            values = __values.result()
        )
      }
      def clearValues = copy(values = _root_.scala.collection.Seq.empty)
      def addValues(__vs: com.chargerlink.gateway.analyser.Value*): Param = addAllValues(__vs)
      def addAllValues(__vs: TraversableOnce[com.chargerlink.gateway.analyser.Value]): Param = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]): Param = copy(values = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(values.map(_.toPMessage)(_root_.scala.collection.breakOut))
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.analyser.ReportQueryReq.Param
  }
  
  object Param extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq.Param] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.analyser.ReportQueryReq.Param] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.analyser.ReportQueryReq.Param = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.analyser.ReportQueryReq.Param(
        __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.analyser.ReportQueryReq.Param] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.analyser.ReportQueryReq.Param(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]]).getOrElse(_root_.scala.collection.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryReq.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.analyser.ReportQueryReq.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => __out = com.chargerlink.gateway.analyser.Value
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.analyser.ReportQueryReq.Param(
    )
    implicit class ParamLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.Param]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.Param](_l) {
      def values: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.analyser.Value]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val VALUES_FIELD_NUMBER = 1
  }
  
  implicit class ReportQueryReqLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq](_l) {
    def reportId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.reportId)((c_, f_) => c_.copy(reportId = f_))
    def fromTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.fromTime)((c_, f_) => c_.copy(fromTime = f_))
    def toTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.toTime)((c_, f_) => c_.copy(toTime = f_))
    def period: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.analyser.ReportQueryReq.Period] = field(_.period)((c_, f_) => c_.copy(period = f_))
    def offset: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def total: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.total)((c_, f_) => c_.copy(total = f_))
    def params: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param]] = field(_.params)((c_, f_) => c_.copy(params = f_))
  }
  final val REPORT_ID_FIELD_NUMBER = 1
  final val FROM_TIME_FIELD_NUMBER = 2
  final val TO_TIME_FIELD_NUMBER = 3
  final val PERIOD_FIELD_NUMBER = 4
  final val OFFSET_FIELD_NUMBER = 5
  final val TOTAL_FIELD_NUMBER = 6
  final val PARAMS_FIELD_NUMBER = 7
  @transient
  private val _typemapper_params: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry, (Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.analyser.ReportQueryReq.ParamsEntry, (Int, com.chargerlink.gateway.analyser.ReportQueryReq.Param)]]
}
