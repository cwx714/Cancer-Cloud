// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 车辆位置数据的消息定义。对应电动车国标'0x05车辆位置数据'。
  *
  * @param posType
  *  / (必填)定位类型。0：未定位，1：GPS二维定位，2：GPS三维定位，3：LBS基站定位，4：WIFI定位。
  * @param gpsCount
  *  / (定位类型位GPS时必填)可见卫星总数。0-12，越多越好。
  * @param pdop
  *  / (定位类型位GPS时必填)PDOP位置精度因子。0.5-99.9，越小精度越高。
  * @param latitude
  *  / (定位类型位GPS时必填)纬度数据。ddd.ddddd格式，负数：南纬，正数：北纬。
  * @param longitude
  *  / (定位类型位GPS时必填)经度数据。ddd.ddddd格式，负数：西经，正数：东经。
  * @param height
  *  / (定位类型位GPS时必填)海拔高度。单位：米。
  * @param speed
  *  / (定位类型位GPS时必填)地面速率。单位：米/秒。
  * @param direction
  *  / (定位类型位GPS时必填)方向角度。单位：度，0-360°。
  * @param lbsCellList
  *  / (定位类型位LBS时必填)LBS小区基站信号强度列表。格式为：小区基站ID-&gt;基站信号强度，LBS小区基站ID的格式为：MCC(3位)+MNC(2位)+LAC(5位)+CID(5位)的15位数字。
  * @param wifiMacList
  *  / (定位类型位WIFI时必填)WIFI热点的MAC地址列表。格式为：将MAC地址转换成8字节长整数，例如：12:34:56:78:90:AB为0x1234567890ab
  */
@SerialVersionUID(0L)
final case class DataVehPos(
    posType: Int,
    gpsCount: scala.Option[Int] = None,
    pdop: scala.Option[Float] = None,
    latitude: scala.Option[Double] = None,
    longitude: scala.Option[Double] = None,
    height: scala.Option[Int] = None,
    speed: scala.Option[Int] = None,
    direction: scala.Option[Int] = None,
    lbsCellList: scala.collection.immutable.Map[Long, Int] = scala.collection.immutable.Map.empty,
    wifiMacList: _root_.scala.collection.Seq[Long] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehPos] with com.trueaccord.lenses.Updatable[DataVehPos] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, posType)
      if (gpsCount.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, gpsCount.get) }
      if (pdop.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, pdop.get) }
      if (latitude.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, latitude.get) }
      if (longitude.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, longitude.get) }
      if (height.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, height.get) }
      if (speed.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, speed.get) }
      if (direction.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, direction.get) }
      lbsCellList.foreach(lbsCellList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase(lbsCellList).serializedSize) + com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase(lbsCellList).serializedSize)
      wifiMacList.foreach(wifiMacList => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, wifiMacList))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, posType)
      gpsCount.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      pdop.foreach { __v =>
        _output__.writeFloat(3, __v)
      };
      latitude.foreach { __v =>
        _output__.writeDouble(4, __v)
      };
      longitude.foreach { __v =>
        _output__.writeDouble(5, __v)
      };
      height.foreach { __v =>
        _output__.writeUInt32(6, __v)
      };
      speed.foreach { __v =>
        _output__.writeUInt32(7, __v)
      };
      direction.foreach { __v =>
        _output__.writeUInt32(8, __v)
      };
      lbsCellList.foreach { __v =>
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase(__v).writeTo(_output__)
      };
      wifiMacList.foreach { __v =>
        _output__.writeInt64(10, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehPos = {
      var __posType = this.posType
      var __gpsCount = this.gpsCount
      var __pdop = this.pdop
      var __latitude = this.latitude
      var __longitude = this.longitude
      var __height = this.height
      var __speed = this.speed
      var __direction = this.direction
      val __lbsCellList = (scala.collection.immutable.Map.newBuilder[Long, Int] ++= this.lbsCellList)
      val __wifiMacList = (_root_.scala.collection.immutable.Vector.newBuilder[Long] ++= this.wifiMacList)
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __posType = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __gpsCount = Some(_input__.readUInt32())
          case 29 =>
            __pdop = Some(_input__.readFloat())
          case 33 =>
            __latitude = Some(_input__.readDouble())
          case 41 =>
            __longitude = Some(_input__.readDouble())
          case 48 =>
            __height = Some(_input__.readUInt32())
          case 56 =>
            __speed = Some(_input__.readUInt32())
          case 64 =>
            __direction = Some(_input__.readUInt32())
          case 74 =>
            __lbsCellList += com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry.defaultInstance))
          case 80 =>
            __wifiMacList += _input__.readInt64()
          case 82 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __wifiMacList += _input__.readInt64
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehPos(
          posType = __posType,
          gpsCount = __gpsCount,
          pdop = __pdop,
          latitude = __latitude,
          longitude = __longitude,
          height = __height,
          speed = __speed,
          direction = __direction,
          lbsCellList = __lbsCellList.result(),
          wifiMacList = __wifiMacList.result()
      )
    }
    def withPosType(__v: Int): DataVehPos = copy(posType = __v)
    def getGpsCount: Int = gpsCount.getOrElse(0)
    def clearGpsCount: DataVehPos = copy(gpsCount = None)
    def withGpsCount(__v: Int): DataVehPos = copy(gpsCount = Some(__v))
    def getPdop: Float = pdop.getOrElse(0.0f)
    def clearPdop: DataVehPos = copy(pdop = None)
    def withPdop(__v: Float): DataVehPos = copy(pdop = Some(__v))
    def getLatitude: Double = latitude.getOrElse(0.0)
    def clearLatitude: DataVehPos = copy(latitude = None)
    def withLatitude(__v: Double): DataVehPos = copy(latitude = Some(__v))
    def getLongitude: Double = longitude.getOrElse(0.0)
    def clearLongitude: DataVehPos = copy(longitude = None)
    def withLongitude(__v: Double): DataVehPos = copy(longitude = Some(__v))
    def getHeight: Int = height.getOrElse(0)
    def clearHeight: DataVehPos = copy(height = None)
    def withHeight(__v: Int): DataVehPos = copy(height = Some(__v))
    def getSpeed: Int = speed.getOrElse(0)
    def clearSpeed: DataVehPos = copy(speed = None)
    def withSpeed(__v: Int): DataVehPos = copy(speed = Some(__v))
    def getDirection: Int = direction.getOrElse(0)
    def clearDirection: DataVehPos = copy(direction = None)
    def withDirection(__v: Int): DataVehPos = copy(direction = Some(__v))
    def clearLbsCellList = copy(lbsCellList = scala.collection.immutable.Map.empty)
    def addLbsCellList(__vs: (Long, Int)*): DataVehPos = addAllLbsCellList(__vs)
    def addAllLbsCellList(__vs: TraversableOnce[(Long, Int)]): DataVehPos = copy(lbsCellList = lbsCellList ++ __vs)
    def withLbsCellList(__v: scala.collection.immutable.Map[Long, Int]): DataVehPos = copy(lbsCellList = __v)
    def clearWifiMacList = copy(wifiMacList = _root_.scala.collection.Seq.empty)
    def addWifiMacList(__vs: Long*): DataVehPos = addAllWifiMacList(__vs)
    def addAllWifiMacList(__vs: TraversableOnce[Long]): DataVehPos = copy(wifiMacList = wifiMacList ++ __vs)
    def withWifiMacList(__v: _root_.scala.collection.Seq[Long]): DataVehPos = copy(wifiMacList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => posType
        case 2 => gpsCount.orNull
        case 3 => pdop.orNull
        case 4 => latitude.orNull
        case 5 => longitude.orNull
        case 6 => height.orNull
        case 7 => speed.orNull
        case 8 => direction.orNull
        case 9 => lbsCellList.map(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase)(_root_.scala.collection.breakOut)
        case 10 => wifiMacList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(posType)
        case 2 => gpsCount.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => pdop.map(_root_.scalapb.descriptors.PFloat).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => latitude.map(_root_.scalapb.descriptors.PDouble).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => longitude.map(_root_.scalapb.descriptors.PDouble).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => height.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => speed.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => direction.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => _root_.scalapb.descriptors.PRepeated(lbsCellList.map(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 10 => _root_.scalapb.descriptors.PRepeated(wifiMacList.map(_root_.scalapb.descriptors.PLong)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehPos
}

object DataVehPos extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehPos] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehPos] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehPos = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehPos(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Float]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Double]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry]].map(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[_root_.scala.collection.Seq[Long]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehPos] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehPos(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Float]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Double]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataVehPos._typemapper_lbsCellList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.collection.Seq[Long]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 9 => __out = com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehPos(
    posType = 0
  )
  @SerialVersionUID(0L)
  final case class LbsCellListEntry(
      key: scala.Option[Long] = None,
      value: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[LbsCellListEntry] with com.trueaccord.lenses.Updatable[LbsCellListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, key.get) }
        if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, value.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeInt64(1, __v)
        };
        value.foreach { __v =>
          _output__.writeInt32(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readInt64())
            case 16 =>
              __value = Some(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Long = key.getOrElse(0L)
      def clearKey: LbsCellListEntry = copy(key = None)
      def withKey(__v: Long): LbsCellListEntry = copy(key = Some(__v))
      def getValue: Int = value.getOrElse(0)
      def clearValue: LbsCellListEntry = copy(value = None)
      def withValue(__v: Int): LbsCellListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry
  }
  
  object LbsCellListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataVehPos.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataVehPos.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry(
    )
    implicit class LbsCellListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry, (Long, Int)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry, (Long, Int)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry(Some(__p._1), Some(__p._2)))
  }
  
  implicit class DataVehPosLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos](_l) {
    def posType: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.posType)((c_, f_) => c_.copy(posType = f_))
    def gpsCount: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getGpsCount)((c_, f_) => c_.copy(gpsCount = Some(f_)))
    def optionalGpsCount: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.gpsCount)((c_, f_) => c_.copy(gpsCount = f_))
    def pdop: _root_.com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.getPdop)((c_, f_) => c_.copy(pdop = Some(f_)))
    def optionalPdop: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Float]] = field(_.pdop)((c_, f_) => c_.copy(pdop = f_))
    def latitude: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getLatitude)((c_, f_) => c_.copy(latitude = Some(f_)))
    def optionalLatitude: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.latitude)((c_, f_) => c_.copy(latitude = f_))
    def longitude: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getLongitude)((c_, f_) => c_.copy(longitude = Some(f_)))
    def optionalLongitude: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.longitude)((c_, f_) => c_.copy(longitude = f_))
    def height: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getHeight)((c_, f_) => c_.copy(height = Some(f_)))
    def optionalHeight: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.height)((c_, f_) => c_.copy(height = f_))
    def speed: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getSpeed)((c_, f_) => c_.copy(speed = Some(f_)))
    def optionalSpeed: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.speed)((c_, f_) => c_.copy(speed = f_))
    def direction: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getDirection)((c_, f_) => c_.copy(direction = Some(f_)))
    def optionalDirection: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.direction)((c_, f_) => c_.copy(direction = f_))
    def lbsCellList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Long, Int]] = field(_.lbsCellList)((c_, f_) => c_.copy(lbsCellList = f_))
    def wifiMacList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Long]] = field(_.wifiMacList)((c_, f_) => c_.copy(wifiMacList = f_))
  }
  final val POS_TYPE_FIELD_NUMBER = 1
  final val GPS_COUNT_FIELD_NUMBER = 2
  final val PDOP_FIELD_NUMBER = 3
  final val LATITUDE_FIELD_NUMBER = 4
  final val LONGITUDE_FIELD_NUMBER = 5
  final val HEIGHT_FIELD_NUMBER = 6
  final val SPEED_FIELD_NUMBER = 7
  final val DIRECTION_FIELD_NUMBER = 8
  final val LBS_CELL_LIST_FIELD_NUMBER = 9
  final val WIFI_MAC_LIST_FIELD_NUMBER = 10
  @transient
  private val _typemapper_lbsCellList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry, (Long, Int)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataVehPos.LbsCellListEntry, (Long, Int)]]
}
