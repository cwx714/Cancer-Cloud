// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 车位地锁/车位探测器设备实时状态数据的消息定义。
  *
  * @param parkingType
  *  / (必填)车位设备类型。范围：PK_COMP_PKL，车位地锁；PK_COMP_PKD，车位探测器。
  * @param parkingId
  *  / (可选)车位设备编号。此编号为车位设备在其归属设备内的编号，非全局的设备编号。
  * @param parkingTime
  *  / (必填)车位地锁/车位探测器数据采集时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param parkingStatus
  *  / (必填)车位地锁/车位探测器工作状态。
  * @param measureList
  *  / (可选)车位地锁/车位探测器遥测数据列表。
  * @param alarmList
  *  / (可选)车位地锁/车位探测器报警数据列表。
  */
@SerialVersionUID(0L)
final case class DataParking(
    parkingType: com.chargerlink.gateway.bean.common.PkDeviceType,
    parkingId: scala.Option[Int] = None,
    parkingTime: Long,
    parkingStatus: com.chargerlink.gateway.bean.common.PkDeviceStatus,
    measureList: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkMeasure] = _root_.scala.collection.Seq.empty,
    alarmList: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkAlarm] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataParking] with com.trueaccord.lenses.Updatable[DataParking] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, parkingType.value)
      if (parkingId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, parkingId.get) }
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(10, parkingTime)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(11, parkingStatus.value)
      measureList.foreach(measureList => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(measureList.serializedSize) + measureList.serializedSize)
      alarmList.foreach(alarmList => __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(alarmList.serializedSize) + alarmList.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, parkingType.value)
      parkingId.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      _output__.writeInt64(10, parkingTime)
      _output__.writeEnum(11, parkingStatus.value)
      measureList.foreach { __v =>
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      alarmList.foreach { __v =>
        _output__.writeTag(30, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataParking = {
      var __parkingType = this.parkingType
      var __parkingId = this.parkingId
      var __parkingTime = this.parkingTime
      var __parkingStatus = this.parkingStatus
      val __measureList = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataPkMeasure] ++= this.measureList)
      val __alarmList = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.data.DataPkAlarm] ++= this.alarmList)
      var __requiredFields0: Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __parkingType = com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __parkingId = Some(_input__.readUInt32())
          case 80 =>
            __parkingTime = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 88 =>
            __parkingStatus = com.chargerlink.gateway.bean.common.PkDeviceStatus.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffbL
          case 162 =>
            __measureList += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataPkMeasure.defaultInstance)
          case 242 =>
            __alarmList += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataPkAlarm.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataParking(
          parkingType = __parkingType,
          parkingId = __parkingId,
          parkingTime = __parkingTime,
          parkingStatus = __parkingStatus,
          measureList = __measureList.result(),
          alarmList = __alarmList.result()
      )
    }
    def withParkingType(__v: com.chargerlink.gateway.bean.common.PkDeviceType): DataParking = copy(parkingType = __v)
    def getParkingId: Int = parkingId.getOrElse(0)
    def clearParkingId: DataParking = copy(parkingId = None)
    def withParkingId(__v: Int): DataParking = copy(parkingId = Some(__v))
    def withParkingTime(__v: Long): DataParking = copy(parkingTime = __v)
    def withParkingStatus(__v: com.chargerlink.gateway.bean.common.PkDeviceStatus): DataParking = copy(parkingStatus = __v)
    def clearMeasureList = copy(measureList = _root_.scala.collection.Seq.empty)
    def addMeasureList(__vs: com.chargerlink.gateway.bean.data.DataPkMeasure*): DataParking = addAllMeasureList(__vs)
    def addAllMeasureList(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataPkMeasure]): DataParking = copy(measureList = measureList ++ __vs)
    def withMeasureList(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkMeasure]): DataParking = copy(measureList = __v)
    def clearAlarmList = copy(alarmList = _root_.scala.collection.Seq.empty)
    def addAlarmList(__vs: com.chargerlink.gateway.bean.data.DataPkAlarm*): DataParking = addAllAlarmList(__vs)
    def addAllAlarmList(__vs: TraversableOnce[com.chargerlink.gateway.bean.data.DataPkAlarm]): DataParking = copy(alarmList = alarmList ++ __vs)
    def withAlarmList(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkAlarm]): DataParking = copy(alarmList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => parkingType.javaValueDescriptor
        case 2 => parkingId.orNull
        case 10 => parkingTime
        case 11 => parkingStatus.javaValueDescriptor
        case 20 => measureList
        case 30 => alarmList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(parkingType.scalaValueDescriptor)
        case 2 => parkingId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => _root_.scalapb.descriptors.PLong(parkingTime)
        case 11 => _root_.scalapb.descriptors.PEnum(parkingStatus.scalaValueDescriptor)
        case 20 => _root_.scalapb.descriptors.PRepeated(measureList.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 30 => _root_.scalapb.descriptors.PRepeated(alarmList.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataParking
}

object DataParking extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataParking] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataParking] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataParking = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataParking(
      com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap(__fields.get(2)).asInstanceOf[Long],
      com.chargerlink.gateway.bean.common.PkDeviceStatus.fromValue(__fieldsMap(__fields.get(3)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkMeasure]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkAlarm]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataParking] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataParking(
        com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[Long],
        com.chargerlink.gateway.bean.common.PkDeviceStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkMeasure]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkAlarm]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataParkingProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataParkingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 20 => __out = com.chargerlink.gateway.bean.data.DataPkMeasure
      case 30 => __out = com.chargerlink.gateway.bean.data.DataPkAlarm
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.PkDeviceType
      case 11 => com.chargerlink.gateway.bean.common.PkDeviceStatus
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataParking(
    parkingType = com.chargerlink.gateway.bean.common.PkDeviceType.PK_DEVICE_NONE,
    parkingTime = 0L,
    parkingStatus = com.chargerlink.gateway.bean.common.PkDeviceStatus.PK_DEVICE_STATUS_UNLOCK
  )
  implicit class DataParkingLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataParking]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataParking](_l) {
    def parkingType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.PkDeviceType] = field(_.parkingType)((c_, f_) => c_.copy(parkingType = f_))
    def parkingId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getParkingId)((c_, f_) => c_.copy(parkingId = Some(f_)))
    def optionalParkingId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.parkingId)((c_, f_) => c_.copy(parkingId = f_))
    def parkingTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.parkingTime)((c_, f_) => c_.copy(parkingTime = f_))
    def parkingStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.PkDeviceStatus] = field(_.parkingStatus)((c_, f_) => c_.copy(parkingStatus = f_))
    def measureList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkMeasure]] = field(_.measureList)((c_, f_) => c_.copy(measureList = f_))
    def alarmList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataPkAlarm]] = field(_.alarmList)((c_, f_) => c_.copy(alarmList = f_))
  }
  final val PARKING_TYPE_FIELD_NUMBER = 1
  final val PARKING_ID_FIELD_NUMBER = 2
  final val PARKING_TIME_FIELD_NUMBER = 10
  final val PARKING_STATUS_FIELD_NUMBER = 11
  final val MEASURE_LIST_FIELD_NUMBER = 20
  final val ALARM_LIST_FIELD_NUMBER = 30
}
