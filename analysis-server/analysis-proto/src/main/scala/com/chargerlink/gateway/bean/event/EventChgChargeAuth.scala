// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 充电桩TCU设备充电鉴权请求事件的消息定义。其中：event_id为请求消息的消息头的消息序列号。
  *
  * @param userInfo
  *  / (必填)用户身份识别信息。
  * @param payMoney
  *  / (可选)用户请求扣费金额。单位：0.01元。
  * @param plugId
  *  / (可选)充电枪ID(从1开始)。
  */
@SerialVersionUID(0L)
final case class EventChgChargeAuth(
    userInfo: com.chargerlink.gateway.bean.data.DataChgUser,
    payMoney: scala.Option[Int] = None,
    plugId: scala.Option[Int] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EventChgChargeAuth] with com.trueaccord.lenses.Updatable[EventChgChargeAuth] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(userInfo.serializedSize) + userInfo.serializedSize
      if (payMoney.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, payMoney.get) }
      if (plugId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, plugId.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(userInfo.serializedSize)
      userInfo.writeTo(_output__)
      payMoney.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      plugId.foreach { __v =>
        _output__.writeUInt32(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.EventChgChargeAuth = {
      var __userInfo = this.userInfo
      var __payMoney = this.payMoney
      var __plugId = this.plugId
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __userInfo = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __userInfo)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __payMoney = Some(_input__.readUInt32())
          case 24 =>
            __plugId = Some(_input__.readUInt32())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.EventChgChargeAuth(
          userInfo = __userInfo,
          payMoney = __payMoney,
          plugId = __plugId
      )
    }
    def withUserInfo(__v: com.chargerlink.gateway.bean.data.DataChgUser): EventChgChargeAuth = copy(userInfo = __v)
    def getPayMoney: Int = payMoney.getOrElse(0)
    def clearPayMoney: EventChgChargeAuth = copy(payMoney = None)
    def withPayMoney(__v: Int): EventChgChargeAuth = copy(payMoney = Some(__v))
    def getPlugId: Int = plugId.getOrElse(0)
    def clearPlugId: EventChgChargeAuth = copy(plugId = None)
    def withPlugId(__v: Int): EventChgChargeAuth = copy(plugId = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => userInfo
        case 2 => payMoney.orNull
        case 3 => plugId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => userInfo.toPMessage
        case 2 => payMoney.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => plugId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.EventChgChargeAuth
}

object EventChgChargeAuth extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventChgChargeAuth] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventChgChargeAuth] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.EventChgChargeAuth = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.EventChgChargeAuth(
      __fieldsMap(__fields.get(0)).asInstanceOf[com.chargerlink.gateway.bean.data.DataChgUser],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.EventChgChargeAuth] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.EventChgChargeAuth(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[com.chargerlink.gateway.bean.data.DataChgUser],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventChargerProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventChargerProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataChgUser
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.EventChgChargeAuth(
    userInfo = com.chargerlink.gateway.bean.data.DataChgUser.defaultInstance
  )
  implicit class EventChgChargeAuthLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeAuth]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.EventChgChargeAuth](_l) {
    def userInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataChgUser] = field(_.userInfo)((c_, f_) => c_.copy(userInfo = f_))
    def payMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPayMoney)((c_, f_) => c_.copy(payMoney = Some(f_)))
    def optionalPayMoney: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.payMoney)((c_, f_) => c_.copy(payMoney = f_))
    def plugId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getPlugId)((c_, f_) => c_.copy(plugId = Some(f_)))
    def optionalPlugId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.plugId)((c_, f_) => c_.copy(plugId = f_))
  }
  final val USER_INFO_FIELD_NUMBER = 1
  final val PAY_MONEY_FIELD_NUMBER = 2
  final val PLUG_ID_FIELD_NUMBER = 3
}
