// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 行车记录仪/后视镜设备实时状态数据的消息定义。
  *
  * @param posData
  *  / (必填)位置信息。
  * @param trackId
  *  / (必填)行程ID。采用行程开始的毫秒时间戳作为行程的ID。
  * @param statList
  *  / (可选)行程统计信息列表。格式为：行程统计项-&gt;行程统计值。其中：行程统计项使用StatType常量的值。
  * @param extendData
  *  / (可选)记录仪扩展数据的数组。
  */
@SerialVersionUID(0L)
final case class DataRecorder(
    posData: com.chargerlink.gateway.bean.data.DataVehPos,
    trackId: Long,
    statList: scala.collection.immutable.Map[Int, Int] = scala.collection.immutable.Map.empty,
    extendData: scala.Option[com.google.protobuf.any.Any] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataRecorder] with com.trueaccord.lenses.Updatable[DataRecorder] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(posData.serializedSize) + posData.serializedSize
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, trackId)
      statList.foreach(statList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase(statList).serializedSize) + com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase(statList).serializedSize)
      if (extendData.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(extendData.get.serializedSize) + extendData.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeTag(1, 2)
      _output__.writeUInt32NoTag(posData.serializedSize)
      posData.writeTo(_output__)
      _output__.writeInt64(2, trackId)
      statList.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase(__v).serializedSize)
        com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase(__v).writeTo(_output__)
      };
      extendData.foreach { __v =>
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataRecorder = {
      var __posData = this.posData
      var __trackId = this.trackId
      val __statList = (scala.collection.immutable.Map.newBuilder[Int, Int] ++= this.statList)
      var __extendData = this.extendData
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __posData = _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __posData)
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __trackId = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __statList += com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toCustom(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry.defaultInstance))
          case 802 =>
            __extendData = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataRecorder(
          posData = __posData,
          trackId = __trackId,
          statList = __statList.result(),
          extendData = __extendData
      )
    }
    def withPosData(__v: com.chargerlink.gateway.bean.data.DataVehPos): DataRecorder = copy(posData = __v)
    def withTrackId(__v: Long): DataRecorder = copy(trackId = __v)
    def clearStatList = copy(statList = scala.collection.immutable.Map.empty)
    def addStatList(__vs: (Int, Int)*): DataRecorder = addAllStatList(__vs)
    def addAllStatList(__vs: TraversableOnce[(Int, Int)]): DataRecorder = copy(statList = statList ++ __vs)
    def withStatList(__v: scala.collection.immutable.Map[Int, Int]): DataRecorder = copy(statList = __v)
    def getExtendData: com.google.protobuf.any.Any = extendData.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearExtendData: DataRecorder = copy(extendData = None)
    def withExtendData(__v: com.google.protobuf.any.Any): DataRecorder = copy(extendData = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => posData
        case 2 => trackId
        case 3 => statList.map(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase)(_root_.scala.collection.breakOut)
        case 100 => extendData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => posData.toPMessage
        case 2 => _root_.scalapb.descriptors.PLong(trackId)
        case 3 => _root_.scalapb.descriptors.PRepeated(statList.map(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toBase(_).toPMessage)(_root_.scala.collection.breakOut))
        case 100 => extendData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataRecorder
}

object DataRecorder extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataRecorder] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataRecorder] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataRecorder = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataRecorder(
      __fieldsMap(__fields.get(0)).asInstanceOf[com.chargerlink.gateway.bean.data.DataVehPos],
      __fieldsMap(__fields.get(1)).asInstanceOf[Long],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry]].map(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toCustom)(_root_.scala.collection.breakOut),
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataRecorder] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataRecorder(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[com.chargerlink.gateway.bean.data.DataVehPos],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry]]).getOrElse(_root_.scala.collection.Seq.empty).map(com.chargerlink.gateway.bean.data.DataRecorder._typemapper_statList.toCustom)(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataRecorderProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataRecorderProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.data.DataVehPos
      case 3 => __out = com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry
      case 100 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataRecorder(
    posData = com.chargerlink.gateway.bean.data.DataVehPos.defaultInstance,
    trackId = 0L
  )
  sealed trait StatType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = StatType
    def isStatAccelerateCnt: Boolean = false
    def isStatDecelerateCnt: Boolean = false
    def isStatOverspeedCnt: Boolean = false
    def isStatTurnoverCnt: Boolean = false
    def isStatTotalMileage: Boolean = false
    def isStatTotalOil: Boolean = false
    def isStatMaxSpeed: Boolean = false
    def isStatMaxRotate: Boolean = false
    def isStatMaxTemp: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[StatType] = com.chargerlink.gateway.bean.data.DataRecorder.StatType
  }
  
  object StatType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[StatType] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[StatType] = this
    @SerialVersionUID(0L)
    case object STAT_ACCELERATE_CNT extends StatType {
      val value = 0
      val index = 0
      val name = "STAT_ACCELERATE_CNT"
      override def isStatAccelerateCnt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_DECELERATE_CNT extends StatType {
      val value = 1
      val index = 1
      val name = "STAT_DECELERATE_CNT"
      override def isStatDecelerateCnt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_OVERSPEED_CNT extends StatType {
      val value = 2
      val index = 2
      val name = "STAT_OVERSPEED_CNT"
      override def isStatOverspeedCnt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_TURNOVER_CNT extends StatType {
      val value = 3
      val index = 3
      val name = "STAT_TURNOVER_CNT"
      override def isStatTurnoverCnt: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_TOTAL_MILEAGE extends StatType {
      val value = 10
      val index = 4
      val name = "STAT_TOTAL_MILEAGE"
      override def isStatTotalMileage: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_TOTAL_OIL extends StatType {
      val value = 11
      val index = 5
      val name = "STAT_TOTAL_OIL"
      override def isStatTotalOil: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_MAX_SPEED extends StatType {
      val value = 12
      val index = 6
      val name = "STAT_MAX_SPEED"
      override def isStatMaxSpeed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_MAX_ROTATE extends StatType {
      val value = 13
      val index = 7
      val name = "STAT_MAX_ROTATE"
      override def isStatMaxRotate: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STAT_MAX_TEMP extends StatType {
      val value = 14
      val index = 8
      val name = "STAT_MAX_TEMP"
      override def isStatMaxTemp: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends StatType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(STAT_ACCELERATE_CNT, STAT_DECELERATE_CNT, STAT_OVERSPEED_CNT, STAT_TURNOVER_CNT, STAT_TOTAL_MILEAGE, STAT_TOTAL_OIL, STAT_MAX_SPEED, STAT_MAX_ROTATE, STAT_MAX_TEMP)
    def fromValue(value: Int): StatType = value match {
      case 0 => STAT_ACCELERATE_CNT
      case 1 => STAT_DECELERATE_CNT
      case 2 => STAT_OVERSPEED_CNT
      case 3 => STAT_TURNOVER_CNT
      case 10 => STAT_TOTAL_MILEAGE
      case 11 => STAT_TOTAL_OIL
      case 12 => STAT_MAX_SPEED
      case 13 => STAT_MAX_ROTATE
      case 14 => STAT_MAX_TEMP
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.data.DataRecorder.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.data.DataRecorder.scalaDescriptor.enums(0)
  }
  @SerialVersionUID(0L)
  final case class StatListEntry(
      key: scala.Option[Int] = None,
      value: scala.Option[Int] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[StatListEntry] with com.trueaccord.lenses.Updatable[StatListEntry] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (key.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, key.get) }
        if (value.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, value.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        key.foreach { __v =>
          _output__.writeInt32(1, __v)
        };
        value.foreach { __v =>
          _output__.writeInt32(2, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry = {
        var __key = this.key
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __key = Some(_input__.readInt32())
            case 16 =>
              __value = Some(_input__.readInt32())
            case tag => _input__.skipField(tag)
          }
        }
        com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry(
            key = __key,
            value = __value
        )
      }
      def getKey: Int = key.getOrElse(0)
      def clearKey: StatListEntry = copy(key = None)
      def withKey(__v: Int): StatListEntry = copy(key = Some(__v))
      def getValue: Int = value.getOrElse(0)
      def clearValue: StatListEntry = copy(value = None)
      def withValue(__v: Int): StatListEntry = copy(value = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => key.orNull
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => key.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => value.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
      def companion = com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry
  }
  
  object StatListEntry extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataRecorder.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.chargerlink.gateway.bean.data.DataRecorder.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry(
    )
    implicit class StatListEntryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry](_l) {
      def key: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getKey)((c_, f_) => c_.copy(key = Some(f_)))
      def optionalKey: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getValue)((c_, f_) => c_.copy(value = Some(f_)))
      def optionalValue: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    implicit val keyValueMapper: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry, (Int, Int)] =
      _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry, (Int, Int)](__m => (__m.getKey, __m.getValue))(__p => com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry(Some(__p._1), Some(__p._2)))
  }
  
  implicit class DataRecorderLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataRecorder]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataRecorder](_l) {
    def posData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehPos] = field(_.posData)((c_, f_) => c_.copy(posData = f_))
    def trackId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.trackId)((c_, f_) => c_.copy(trackId = f_))
    def statList: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.collection.immutable.Map[Int, Int]] = field(_.statList)((c_, f_) => c_.copy(statList = f_))
    def extendData: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getExtendData)((c_, f_) => c_.copy(extendData = Some(f_)))
    def optionalExtendData: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.google.protobuf.any.Any]] = field(_.extendData)((c_, f_) => c_.copy(extendData = f_))
  }
  final val POS_DATA_FIELD_NUMBER = 1
  final val TRACK_ID_FIELD_NUMBER = 2
  final val STAT_LIST_FIELD_NUMBER = 3
  final val EXTEND_DATA_FIELD_NUMBER = 100
  @transient
  private val _typemapper_statList: _root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry, (Int, Int)] = implicitly[_root_.com.trueaccord.scalapb.TypeMapper[com.chargerlink.gateway.bean.data.DataRecorder.StatListEntry, (Int, Int)]]
}
