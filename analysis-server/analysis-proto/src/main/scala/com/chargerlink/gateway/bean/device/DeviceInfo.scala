// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.device



/** * 终端设备信息的消息定义。其中：设备详情的定义分别在以下文件中：DeviceVehicle.proto、DeviceCharger.proto、DeviceRecorder.proto。
  *
  * @param deviceType
  *  / (必填)终端设备类型。
  * @param deviceId
  *  / (必填)终端设备ID。格式由对应类型设备自行定义, 设备类型和设备ID组成设备的全局唯一标识。
  * @param deviceTime
  *  / (必填)终端设备自身时钟的时间(北京时间的毫秒时间戳)。用于自动校对时钟。单位：毫秒。null：表示终端从未上传过数据。
  * @param deviceSeq
  *  / (可选)终端设备序列号。
  * @param createdOn
  *  / (必填)终端设备数据录入的时间(北京时间的毫秒时间戳)。单位：毫秒。
  * @param updatedOn
  *  / (必填)终端设备注册/注销的时间(北京时间的毫秒时间戳)。单位：毫秒。0：表示终端尚未注册。
  * @param registerStatus
  *  / (必填)终端设备注册状态。true：设备已注册，false：设备未注册/已注销。
  * @param onlineStatus
  *  / (必填)终端设备在线/离线状态。true：设备在线，false：设备离线。
  */
@SerialVersionUID(0L)
final case class DeviceInfo(
    deviceType: com.chargerlink.gateway.bean.common.DeviceType,
    deviceId: String,
    deviceTime: scala.Option[Long] = None,
    deviceSeq: scala.Option[String] = None,
    createdOn: Long,
    updatedOn: Long,
    registerStatus: Boolean,
    onlineStatus: Boolean,
    deviceDetail: com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DeviceInfo] with com.trueaccord.lenses.Updatable[DeviceInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, deviceType.value)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, deviceId)
      if (deviceTime.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, deviceTime.get) }
      if (deviceSeq.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, deviceSeq.get) }
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, createdOn)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, updatedOn)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, registerStatus)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, onlineStatus)
      if (deviceDetail.vehicleGbV1.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceDetail.vehicleGbV1.get.serializedSize) + deviceDetail.vehicleGbV1.get.serializedSize }
      if (deviceDetail.recorderAmiV1.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceDetail.recorderAmiV1.get.serializedSize) + deviceDetail.recorderAmiV1.get.serializedSize }
      if (deviceDetail.chargerClV2.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceDetail.chargerClV2.get.serializedSize) + deviceDetail.chargerClV2.get.serializedSize }
      if (deviceDetail.parkingClV2.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceDetail.parkingClV2.get.serializedSize) + deviceDetail.parkingClV2.get.serializedSize }
      if (deviceDetail.otherDevice.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceDetail.otherDevice.get.serializedSize) + deviceDetail.otherDevice.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, deviceType.value)
      _output__.writeString(2, deviceId)
      deviceTime.foreach { __v =>
        _output__.writeInt64(3, __v)
      };
      deviceSeq.foreach { __v =>
        _output__.writeString(4, __v)
      };
      _output__.writeInt64(5, createdOn)
      _output__.writeInt64(6, updatedOn)
      _output__.writeBool(7, registerStatus)
      _output__.writeBool(8, onlineStatus)
      deviceDetail.vehicleGbV1.foreach { __v =>
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deviceDetail.recorderAmiV1.foreach { __v =>
        _output__.writeTag(200, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deviceDetail.chargerClV2.foreach { __v =>
        _output__.writeTag(300, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deviceDetail.parkingClV2.foreach { __v =>
        _output__.writeTag(400, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      deviceDetail.otherDevice.foreach { __v =>
        _output__.writeTag(999, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.device.DeviceInfo = {
      var __deviceType = this.deviceType
      var __deviceId = this.deviceId
      var __deviceTime = this.deviceTime
      var __deviceSeq = this.deviceSeq
      var __createdOn = this.createdOn
      var __updatedOn = this.updatedOn
      var __registerStatus = this.registerStatus
      var __onlineStatus = this.onlineStatus
      var __requiredFields0: Long = 0x3fL
      var __deviceDetail = this.deviceDetail
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __deviceType = com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __deviceId = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __deviceTime = Some(_input__.readInt64())
          case 34 =>
            __deviceSeq = Some(_input__.readString())
          case 40 =>
            __createdOn = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 48 =>
            __updatedOn = _input__.readInt64()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 56 =>
            __registerStatus = _input__.readBool()
            __requiredFields0 &= 0xffffffffffffffefL
          case 64 =>
            __onlineStatus = _input__.readBool()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 802 =>
            __deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.VehicleGbV1(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, deviceDetail.vehicleGbV1.getOrElse(com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1.defaultInstance)))
          case 1602 =>
            __deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.RecorderAmiV1(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, deviceDetail.recorderAmiV1.getOrElse(com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1.defaultInstance)))
          case 2402 =>
            __deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ChargerClV2(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, deviceDetail.chargerClV2.getOrElse(com.chargerlink.gateway.bean.device.DeviceChargerCL_v2.defaultInstance)))
          case 3202 =>
            __deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ParkingClV2(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, deviceDetail.parkingClV2.getOrElse(com.chargerlink.gateway.bean.device.DeviceParkingCL_v2.defaultInstance)))
          case 7994 =>
            __deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.OtherDevice(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, deviceDetail.otherDevice.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.device.DeviceInfo(
          deviceType = __deviceType,
          deviceId = __deviceId,
          deviceTime = __deviceTime,
          deviceSeq = __deviceSeq,
          createdOn = __createdOn,
          updatedOn = __updatedOn,
          registerStatus = __registerStatus,
          onlineStatus = __onlineStatus,
          deviceDetail = __deviceDetail
      )
    }
    def withDeviceType(__v: com.chargerlink.gateway.bean.common.DeviceType): DeviceInfo = copy(deviceType = __v)
    def withDeviceId(__v: String): DeviceInfo = copy(deviceId = __v)
    def getDeviceTime: Long = deviceTime.getOrElse(0L)
    def clearDeviceTime: DeviceInfo = copy(deviceTime = None)
    def withDeviceTime(__v: Long): DeviceInfo = copy(deviceTime = Some(__v))
    def getDeviceSeq: String = deviceSeq.getOrElse("")
    def clearDeviceSeq: DeviceInfo = copy(deviceSeq = None)
    def withDeviceSeq(__v: String): DeviceInfo = copy(deviceSeq = Some(__v))
    def withCreatedOn(__v: Long): DeviceInfo = copy(createdOn = __v)
    def withUpdatedOn(__v: Long): DeviceInfo = copy(updatedOn = __v)
    def withRegisterStatus(__v: Boolean): DeviceInfo = copy(registerStatus = __v)
    def withOnlineStatus(__v: Boolean): DeviceInfo = copy(onlineStatus = __v)
    def getVehicleGbV1: com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1 = deviceDetail.vehicleGbV1.getOrElse(com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1.defaultInstance)
    def withVehicleGbV1(__v: com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1): DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.VehicleGbV1(__v))
    def getRecorderAmiV1: com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1 = deviceDetail.recorderAmiV1.getOrElse(com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1.defaultInstance)
    def withRecorderAmiV1(__v: com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1): DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.RecorderAmiV1(__v))
    def getChargerClV2: com.chargerlink.gateway.bean.device.DeviceChargerCL_v2 = deviceDetail.chargerClV2.getOrElse(com.chargerlink.gateway.bean.device.DeviceChargerCL_v2.defaultInstance)
    def withChargerClV2(__v: com.chargerlink.gateway.bean.device.DeviceChargerCL_v2): DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ChargerClV2(__v))
    def getParkingClV2: com.chargerlink.gateway.bean.device.DeviceParkingCL_v2 = deviceDetail.parkingClV2.getOrElse(com.chargerlink.gateway.bean.device.DeviceParkingCL_v2.defaultInstance)
    def withParkingClV2(__v: com.chargerlink.gateway.bean.device.DeviceParkingCL_v2): DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ParkingClV2(__v))
    def getOtherDevice: com.google.protobuf.any.Any = deviceDetail.otherDevice.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def withOtherDevice(__v: com.google.protobuf.any.Any): DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.OtherDevice(__v))
    def clearDeviceDetail: DeviceInfo = copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.Empty)
    def withDeviceDetail(__v: com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail): DeviceInfo = copy(deviceDetail = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceType.javaValueDescriptor
        case 2 => deviceId
        case 3 => deviceTime.orNull
        case 4 => deviceSeq.orNull
        case 5 => createdOn
        case 6 => updatedOn
        case 7 => registerStatus
        case 8 => onlineStatus
        case 100 => deviceDetail.vehicleGbV1.orNull
        case 200 => deviceDetail.recorderAmiV1.orNull
        case 300 => deviceDetail.chargerClV2.orNull
        case 400 => deviceDetail.parkingClV2.orNull
        case 999 => deviceDetail.otherDevice.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(deviceType.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(deviceId)
        case 3 => deviceTime.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => deviceSeq.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PLong(createdOn)
        case 6 => _root_.scalapb.descriptors.PLong(updatedOn)
        case 7 => _root_.scalapb.descriptors.PBoolean(registerStatus)
        case 8 => _root_.scalapb.descriptors.PBoolean(onlineStatus)
        case 100 => deviceDetail.vehicleGbV1.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 200 => deviceDetail.recorderAmiV1.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 300 => deviceDetail.chargerClV2.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 400 => deviceDetail.parkingClV2.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 999 => deviceDetail.otherDevice.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.device.DeviceInfo
}

object DeviceInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.device.DeviceInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.device.DeviceInfo(
      com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap(__fields.get(4)).asInstanceOf[Long],
      __fieldsMap(__fields.get(5)).asInstanceOf[Long],
      __fieldsMap(__fields.get(6)).asInstanceOf[Boolean],
      __fieldsMap(__fields.get(7)).asInstanceOf[Boolean],
      deviceDetail = __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1]].map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.VehicleGbV1) orElse
__fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1]].map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.RecorderAmiV1) orElse
__fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2]].map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ChargerClV2) orElse
__fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2]].map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ParkingClV2) orElse
__fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[com.google.protobuf.any.Any]].map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.OtherDevice) getOrElse com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.device.DeviceInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.device.DeviceInfo(
        com.chargerlink.gateway.bean.common.DeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[Long],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[Boolean],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[Boolean],
        deviceDetail = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1]]).map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.VehicleGbV1) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(200).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1]]).map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.RecorderAmiV1) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(300).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2]]).map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ChargerClV2) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(400).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2]]).map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ParkingClV2) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(999).get).flatMap(_.as[scala.Option[com.google.protobuf.any.Any]]).map(com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.OtherDevice) getOrElse com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DeviceBaseProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DeviceBaseProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 100 => __out = com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1
      case 200 => __out = com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1
      case 300 => __out = com.chargerlink.gateway.bean.device.DeviceChargerCL_v2
      case 400 => __out = com.chargerlink.gateway.bean.device.DeviceParkingCL_v2
      case 999 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.DeviceType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.device.DeviceInfo(
    deviceType = com.chargerlink.gateway.bean.common.DeviceType.DEVICE_VEHICLE_GB_V1,
    deviceId = "",
    createdOn = 0L,
    updatedOn = 0L,
    registerStatus = false,
    onlineStatus = false
  )
  sealed trait DeviceDetail extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isVehicleGbV1: Boolean = false
    def isRecorderAmiV1: Boolean = false
    def isChargerClV2: Boolean = false
    def isParkingClV2: Boolean = false
    def isOtherDevice: Boolean = false
    def vehicleGbV1: scala.Option[com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1] = None
    def recorderAmiV1: scala.Option[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] = None
    def chargerClV2: scala.Option[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] = None
    def parkingClV2: scala.Option[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] = None
    def otherDevice: scala.Option[com.google.protobuf.any.Any] = None
  }
  object DeviceDetail extends {
    @SerialVersionUID(0L)
    case object Empty extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
      override def value: scala.Any = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    case class VehicleGbV1(value: com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1) extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isVehicleGbV1: Boolean = true
      override def vehicleGbV1: scala.Option[com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1] = Some(value)
      override def number: Int = 100
    }
    @SerialVersionUID(0L)
    case class RecorderAmiV1(value: com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1) extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isRecorderAmiV1: Boolean = true
      override def recorderAmiV1: scala.Option[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] = Some(value)
      override def number: Int = 200
    }
    @SerialVersionUID(0L)
    case class ChargerClV2(value: com.chargerlink.gateway.bean.device.DeviceChargerCL_v2) extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isChargerClV2: Boolean = true
      override def chargerClV2: scala.Option[com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] = Some(value)
      override def number: Int = 300
    }
    @SerialVersionUID(0L)
    case class ParkingClV2(value: com.chargerlink.gateway.bean.device.DeviceParkingCL_v2) extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isParkingClV2: Boolean = true
      override def parkingClV2: scala.Option[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] = Some(value)
      override def number: Int = 400
    }
    @SerialVersionUID(0L)
    case class OtherDevice(value: com.google.protobuf.any.Any) extends com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail {
      override def isOtherDevice: Boolean = true
      override def otherDevice: scala.Option[com.google.protobuf.any.Any] = Some(value)
      override def number: Int = 999
    }
  }
  implicit class DeviceInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.device.DeviceInfo](_l) {
    def deviceType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.DeviceType] = field(_.deviceType)((c_, f_) => c_.copy(deviceType = f_))
    def deviceId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def deviceTime: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDeviceTime)((c_, f_) => c_.copy(deviceTime = Some(f_)))
    def optionalDeviceTime: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.deviceTime)((c_, f_) => c_.copy(deviceTime = f_))
    def deviceSeq: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getDeviceSeq)((c_, f_) => c_.copy(deviceSeq = Some(f_)))
    def optionalDeviceSeq: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.deviceSeq)((c_, f_) => c_.copy(deviceSeq = f_))
    def createdOn: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.createdOn)((c_, f_) => c_.copy(createdOn = f_))
    def updatedOn: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.updatedOn)((c_, f_) => c_.copy(updatedOn = f_))
    def registerStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.registerStatus)((c_, f_) => c_.copy(registerStatus = f_))
    def onlineStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.onlineStatus)((c_, f_) => c_.copy(onlineStatus = f_))
    def vehicleGbV1: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceVehicleGB_v1] = field(_.getVehicleGbV1)((c_, f_) => c_.copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.VehicleGbV1(f_)))
    def recorderAmiV1: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] = field(_.getRecorderAmiV1)((c_, f_) => c_.copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.RecorderAmiV1(f_)))
    def chargerClV2: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceChargerCL_v2] = field(_.getChargerClV2)((c_, f_) => c_.copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ChargerClV2(f_)))
    def parkingClV2: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] = field(_.getParkingClV2)((c_, f_) => c_.copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.ParkingClV2(f_)))
    def otherDevice: _root_.com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getOtherDevice)((c_, f_) => c_.copy(deviceDetail = com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail.OtherDevice(f_)))
    def deviceDetail: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceInfo.DeviceDetail] = field(_.deviceDetail)((c_, f_) => c_.copy(deviceDetail = f_))
  }
  final val DEVICE_TYPE_FIELD_NUMBER = 1
  final val DEVICE_ID_FIELD_NUMBER = 2
  final val DEVICE_TIME_FIELD_NUMBER = 3
  final val DEVICE_SEQ_FIELD_NUMBER = 4
  final val CREATED_ON_FIELD_NUMBER = 5
  final val UPDATED_ON_FIELD_NUMBER = 6
  final val REGISTER_STATUS_FIELD_NUMBER = 7
  final val ONLINE_STATUS_FIELD_NUMBER = 8
  final val VEHICLE_GB_V1_FIELD_NUMBER = 100
  final val RECORDER_AMI_V1_FIELD_NUMBER = 200
  final val CHARGER_CL_V2_FIELD_NUMBER = 300
  final val PARKING_CL_V2_FIELD_NUMBER = 400
  final val OTHER_DEVICE_FIELD_NUMBER = 999
}
