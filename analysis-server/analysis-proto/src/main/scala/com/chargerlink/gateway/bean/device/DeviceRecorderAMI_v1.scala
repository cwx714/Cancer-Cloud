// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.device



/** * Amitek公司的行车记录仪/后视镜设备信息的消息定义。设备类型：DEVICE_RECORDER_AMI_V1，设备ID：固定16位数字的字符串(1位类型+15位IMEI号或MAC地址)。
  *
  * @param factory
  *  / (必填)设备厂商。
  * @param model
  *  / (必填)设备型号。
  * @param hardware
  *  / (必填)硬件版本。采用yyyymmdd格式。
  * @param software
  *  / (必填)软件版本。采用x.y.z格式。
  * @param msisdn
  *  / (可选)SIM卡手机号码(去掉+86前缀)。
  * @param iccid
  *  / (可选)SIM卡ICCID号码。
  * @param imsi
  *  / (可选)SIM卡IMSI号码。
  * @param imei
  *  / (可选)设备IMEI号码。
  */
@SerialVersionUID(0L)
final case class DeviceRecorderAMI_v1(
    factory: String,
    model: String,
    hardware: String,
    software: String,
    msisdn: scala.Option[String] = None,
    iccid: scala.Option[String] = None,
    imsi: scala.Option[String] = None,
    imei: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DeviceRecorderAMI_v1] with com.trueaccord.lenses.Updatable[DeviceRecorderAMI_v1] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, factory)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, model)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, hardware)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, software)
      if (msisdn.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, msisdn.get) }
      if (iccid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, iccid.get) }
      if (imsi.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, imsi.get) }
      if (imei.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, imei.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeString(1, factory)
      _output__.writeString(2, model)
      _output__.writeString(3, hardware)
      _output__.writeString(4, software)
      msisdn.foreach { __v =>
        _output__.writeString(5, __v)
      };
      iccid.foreach { __v =>
        _output__.writeString(6, __v)
      };
      imsi.foreach { __v =>
        _output__.writeString(7, __v)
      };
      imei.foreach { __v =>
        _output__.writeString(8, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1 = {
      var __factory = this.factory
      var __model = this.model
      var __hardware = this.hardware
      var __software = this.software
      var __msisdn = this.msisdn
      var __iccid = this.iccid
      var __imsi = this.imsi
      var __imei = this.imei
      var __requiredFields0: Long = 0xfL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __factory = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 18 =>
            __model = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 26 =>
            __hardware = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 34 =>
            __software = _input__.readString()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 42 =>
            __msisdn = Some(_input__.readString())
          case 50 =>
            __iccid = Some(_input__.readString())
          case 58 =>
            __imsi = Some(_input__.readString())
          case 66 =>
            __imei = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1(
          factory = __factory,
          model = __model,
          hardware = __hardware,
          software = __software,
          msisdn = __msisdn,
          iccid = __iccid,
          imsi = __imsi,
          imei = __imei
      )
    }
    def withFactory(__v: String): DeviceRecorderAMI_v1 = copy(factory = __v)
    def withModel(__v: String): DeviceRecorderAMI_v1 = copy(model = __v)
    def withHardware(__v: String): DeviceRecorderAMI_v1 = copy(hardware = __v)
    def withSoftware(__v: String): DeviceRecorderAMI_v1 = copy(software = __v)
    def getMsisdn: String = msisdn.getOrElse("")
    def clearMsisdn: DeviceRecorderAMI_v1 = copy(msisdn = None)
    def withMsisdn(__v: String): DeviceRecorderAMI_v1 = copy(msisdn = Some(__v))
    def getIccid: String = iccid.getOrElse("")
    def clearIccid: DeviceRecorderAMI_v1 = copy(iccid = None)
    def withIccid(__v: String): DeviceRecorderAMI_v1 = copy(iccid = Some(__v))
    def getImsi: String = imsi.getOrElse("")
    def clearImsi: DeviceRecorderAMI_v1 = copy(imsi = None)
    def withImsi(__v: String): DeviceRecorderAMI_v1 = copy(imsi = Some(__v))
    def getImei: String = imei.getOrElse("")
    def clearImei: DeviceRecorderAMI_v1 = copy(imei = None)
    def withImei(__v: String): DeviceRecorderAMI_v1 = copy(imei = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => factory
        case 2 => model
        case 3 => hardware
        case 4 => software
        case 5 => msisdn.orNull
        case 6 => iccid.orNull
        case 7 => imsi.orNull
        case 8 => imei.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(factory)
        case 2 => _root_.scalapb.descriptors.PString(model)
        case 3 => _root_.scalapb.descriptors.PString(hardware)
        case 4 => _root_.scalapb.descriptors.PString(software)
        case 5 => msisdn.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => iccid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => imsi.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => imei.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1
}

object DeviceRecorderAMI_v1 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1(
      __fieldsMap(__fields.get(0)).asInstanceOf[String],
      __fieldsMap(__fields.get(1)).asInstanceOf[String],
      __fieldsMap(__fields.get(2)).asInstanceOf[String],
      __fieldsMap(__fields.get(3)).asInstanceOf[String],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).get.as[String],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DeviceRecorderProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DeviceRecorderProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1(
    factory = "",
    model = "",
    hardware = "",
    software = ""
  )
  implicit class DeviceRecorderAMI_v1Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.device.DeviceRecorderAMI_v1](_l) {
    def factory: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.factory)((c_, f_) => c_.copy(factory = f_))
    def model: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.model)((c_, f_) => c_.copy(model = f_))
    def hardware: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.hardware)((c_, f_) => c_.copy(hardware = f_))
    def software: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.software)((c_, f_) => c_.copy(software = f_))
    def msisdn: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getMsisdn)((c_, f_) => c_.copy(msisdn = Some(f_)))
    def optionalMsisdn: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.msisdn)((c_, f_) => c_.copy(msisdn = f_))
    def iccid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getIccid)((c_, f_) => c_.copy(iccid = Some(f_)))
    def optionalIccid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.iccid)((c_, f_) => c_.copy(iccid = f_))
    def imsi: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getImsi)((c_, f_) => c_.copy(imsi = Some(f_)))
    def optionalImsi: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.imsi)((c_, f_) => c_.copy(imsi = f_))
    def imei: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getImei)((c_, f_) => c_.copy(imei = Some(f_)))
    def optionalImei: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.imei)((c_, f_) => c_.copy(imei = f_))
  }
  final val FACTORY_FIELD_NUMBER = 1
  final val MODEL_FIELD_NUMBER = 2
  final val HARDWARE_FIELD_NUMBER = 3
  final val SOFTWARE_FIELD_NUMBER = 4
  final val MSISDN_FIELD_NUMBER = 5
  final val ICCID_FIELD_NUMBER = 6
  final val IMSI_FIELD_NUMBER = 7
  final val IMEI_FIELD_NUMBER = 8
}
