// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.api



/** * 导入/更新终端设备信息的请求消息定义。
  *
  * @param deviceList
  *  / (必填)终端设备的列表。
  * @param overwrite
  *  / (必填)覆盖已有设备信息。true：覆盖已有设备信息，false：设备存在时不覆盖并返回失败。
  */
@SerialVersionUID(0L)
final case class ImportDeviceInfo(
    deviceList: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.device.DeviceInfo] = _root_.scala.collection.Seq.empty,
    overwrite: Boolean
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ImportDeviceInfo] with com.trueaccord.lenses.Updatable[ImportDeviceInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      deviceList.foreach(deviceList => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceList.serializedSize) + deviceList.serializedSize)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, overwrite)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      deviceList.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      _output__.writeBool(2, overwrite)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.ImportDeviceInfo = {
      val __deviceList = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.device.DeviceInfo] ++= this.deviceList)
      var __overwrite = this.overwrite
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __deviceList += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.chargerlink.gateway.bean.device.DeviceInfo.defaultInstance)
          case 16 =>
            __overwrite = _input__.readBool()
            __requiredFields0 &= 0xfffffffffffffffeL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.api.ImportDeviceInfo(
          deviceList = __deviceList.result(),
          overwrite = __overwrite
      )
    }
    def clearDeviceList = copy(deviceList = _root_.scala.collection.Seq.empty)
    def addDeviceList(__vs: com.chargerlink.gateway.bean.device.DeviceInfo*): ImportDeviceInfo = addAllDeviceList(__vs)
    def addAllDeviceList(__vs: TraversableOnce[com.chargerlink.gateway.bean.device.DeviceInfo]): ImportDeviceInfo = copy(deviceList = deviceList ++ __vs)
    def withDeviceList(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.device.DeviceInfo]): ImportDeviceInfo = copy(deviceList = __v)
    def withOverwrite(__v: Boolean): ImportDeviceInfo = copy(overwrite = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceList
        case 2 => overwrite
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(deviceList.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PBoolean(overwrite)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.api.ImportDeviceInfo
}

object ImportDeviceInfo extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.ImportDeviceInfo] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.ImportDeviceInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.ImportDeviceInfo = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.api.ImportDeviceInfo(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.device.DeviceInfo]],
      __fieldsMap(__fields.get(1)).asInstanceOf[Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.ImportDeviceInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.api.ImportDeviceInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[com.chargerlink.gateway.bean.device.DeviceInfo]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Boolean]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiBaseProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiBaseProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.device.DeviceInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.api.ImportDeviceInfo(
    overwrite = false
  )
  implicit class ImportDeviceInfoLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.ImportDeviceInfo]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.ImportDeviceInfo](_l) {
    def deviceList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.device.DeviceInfo]] = field(_.deviceList)((c_, f_) => c_.copy(deviceList = f_))
    def overwrite: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.overwrite)((c_, f_) => c_.copy(overwrite = f_))
  }
  final val DEVICE_LIST_FIELD_NUMBER = 1
  final val OVERWRITE_FIELD_NUMBER = 2
}
