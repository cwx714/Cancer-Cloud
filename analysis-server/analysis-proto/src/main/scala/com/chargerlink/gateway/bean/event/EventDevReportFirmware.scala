// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 通用终端设备固件更新状态通知事件的消息定义。
  *
  * @param firmwareStatus
  *  / (必填)固件更新状态。
  */
@SerialVersionUID(0L)
final case class EventDevReportFirmware(
    firmwareStatus: com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[EventDevReportFirmware] with com.trueaccord.lenses.Updatable[EventDevReportFirmware] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, firmwareStatus.value)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, firmwareStatus.value)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.EventDevReportFirmware = {
      var __firmwareStatus = this.firmwareStatus
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __firmwareStatus = com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.event.EventDevReportFirmware(
          firmwareStatus = __firmwareStatus
      )
    }
    def withFirmwareStatus(__v: com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus): EventDevReportFirmware = copy(firmwareStatus = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => firmwareStatus.javaValueDescriptor
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(firmwareStatus.scalaValueDescriptor)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.EventDevReportFirmware
}

object EventDevReportFirmware extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventDevReportFirmware] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.EventDevReportFirmware] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.EventDevReportFirmware = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.EventDevReportFirmware(
      com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.EventDevReportFirmware] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.EventDevReportFirmware(
        com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventDeviceProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventDeviceProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.EventDevReportFirmware(
    firmwareStatus = com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus.FIRMWARE_STATUS_IDLE
  )
  sealed trait FirmwareStatus extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = FirmwareStatus
    def isFirmwareStatusIdle: Boolean = false
    def isFirmwareStatusAccepted: Boolean = false
    def isFirmwareStatusDownloading: Boolean = false
    def isFirmwareStatusDownloaded: Boolean = false
    def isFirmwareStatusDownloadFailed: Boolean = false
    def isFirmwareStatusInstallFailed: Boolean = false
    def isFirmwareStatusInstalling: Boolean = false
    def isFirmwareStatusInstalled: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FirmwareStatus] = com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus
  }
  
  object FirmwareStatus extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FirmwareStatus] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[FirmwareStatus] = this
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_IDLE extends FirmwareStatus {
      val value = 0
      val index = 0
      val name = "FIRMWARE_STATUS_IDLE"
      override def isFirmwareStatusIdle: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_ACCEPTED extends FirmwareStatus {
      val value = 1
      val index = 1
      val name = "FIRMWARE_STATUS_ACCEPTED"
      override def isFirmwareStatusAccepted: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_DOWNLOADING extends FirmwareStatus {
      val value = 2
      val index = 2
      val name = "FIRMWARE_STATUS_DOWNLOADING"
      override def isFirmwareStatusDownloading: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_DOWNLOADED extends FirmwareStatus {
      val value = 3
      val index = 3
      val name = "FIRMWARE_STATUS_DOWNLOADED"
      override def isFirmwareStatusDownloaded: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_DOWNLOAD_FAILED extends FirmwareStatus {
      val value = 4
      val index = 4
      val name = "FIRMWARE_STATUS_DOWNLOAD_FAILED"
      override def isFirmwareStatusDownloadFailed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_INSTALL_FAILED extends FirmwareStatus {
      val value = 5
      val index = 5
      val name = "FIRMWARE_STATUS_INSTALL_FAILED"
      override def isFirmwareStatusInstallFailed: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_INSTALLING extends FirmwareStatus {
      val value = 6
      val index = 6
      val name = "FIRMWARE_STATUS_INSTALLING"
      override def isFirmwareStatusInstalling: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRMWARE_STATUS_INSTALLED extends FirmwareStatus {
      val value = 7
      val index = 7
      val name = "FIRMWARE_STATUS_INSTALLED"
      override def isFirmwareStatusInstalled: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends FirmwareStatus with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(FIRMWARE_STATUS_IDLE, FIRMWARE_STATUS_ACCEPTED, FIRMWARE_STATUS_DOWNLOADING, FIRMWARE_STATUS_DOWNLOADED, FIRMWARE_STATUS_DOWNLOAD_FAILED, FIRMWARE_STATUS_INSTALL_FAILED, FIRMWARE_STATUS_INSTALLING, FIRMWARE_STATUS_INSTALLED)
    def fromValue(value: Int): FirmwareStatus = value match {
      case 0 => FIRMWARE_STATUS_IDLE
      case 1 => FIRMWARE_STATUS_ACCEPTED
      case 2 => FIRMWARE_STATUS_DOWNLOADING
      case 3 => FIRMWARE_STATUS_DOWNLOADED
      case 4 => FIRMWARE_STATUS_DOWNLOAD_FAILED
      case 5 => FIRMWARE_STATUS_INSTALL_FAILED
      case 6 => FIRMWARE_STATUS_INSTALLING
      case 7 => FIRMWARE_STATUS_INSTALLED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.chargerlink.gateway.bean.event.EventDevReportFirmware.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.chargerlink.gateway.bean.event.EventDevReportFirmware.scalaDescriptor.enums(0)
  }
  implicit class EventDevReportFirmwareLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportFirmware]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportFirmware](_l) {
    def firmwareStatus: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.EventDevReportFirmware.FirmwareStatus] = field(_.firmwareStatus)((c_, f_) => c_.copy(firmwareStatus = f_))
  }
  final val FIRMWARE_STATUS_FIELD_NUMBER = 1
}
