// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 可充电储能装置电压数据的消息定义。对应电动车国标'0x08可充电储能装置电压数据'。
  *
  * @param index
  *  / (必填，国标字段)可充电储能装置子系统号。
  * @param voltage
  *  / (必填，国标字段)可充电储能装置子系统电压。单位：0.1V，范围：0.0V～6000.0V，0xFFFE：异常，0xFFFF：无效。
  * @param current
  *  / (必填，国标字段)可充电储能装置子系统电流。单位：0.1A，偏移：-1000.0A，范围：-1000.0A～1000.0A，0xFFFE：异常，0xFFFF：无效。
  * @param volList
  *  / (必填，国标字段)单体电池电压列表。单位：0.001V，范围：0.000V～60.000V，0xFFFE：异常，0xFFFF：无效。
  */
@SerialVersionUID(0L)
final case class DataVehBmsVol(
    index: Int,
    voltage: Int,
    current: Int,
    volList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehBmsVol] with com.trueaccord.lenses.Updatable[DataVehBmsVol] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, index)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, voltage)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, current)
      volList.foreach(volList => __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, volList))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, index)
      _output__.writeUInt32(2, voltage)
      _output__.writeUInt32(3, current)
      volList.foreach { __v =>
        _output__.writeUInt32(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehBmsVol = {
      var __index = this.index
      var __voltage = this.voltage
      var __current = this.current
      val __volList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.volList)
      var __requiredFields0: Long = 0x7L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __index = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __voltage = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __current = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __volList += _input__.readUInt32()
          case 34 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __volList += _input__.readUInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehBmsVol(
          index = __index,
          voltage = __voltage,
          current = __current,
          volList = __volList.result()
      )
    }
    def withIndex(__v: Int): DataVehBmsVol = copy(index = __v)
    def withVoltage(__v: Int): DataVehBmsVol = copy(voltage = __v)
    def withCurrent(__v: Int): DataVehBmsVol = copy(current = __v)
    def clearVolList = copy(volList = _root_.scala.collection.Seq.empty)
    def addVolList(__vs: Int*): DataVehBmsVol = addAllVolList(__vs)
    def addAllVolList(__vs: TraversableOnce[Int]): DataVehBmsVol = copy(volList = volList ++ __vs)
    def withVolList(__v: _root_.scala.collection.Seq[Int]): DataVehBmsVol = copy(volList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => index
        case 2 => voltage
        case 3 => current
        case 4 => volList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(index)
        case 2 => _root_.scalapb.descriptors.PInt(voltage)
        case 3 => _root_.scalapb.descriptors.PInt(current)
        case 4 => _root_.scalapb.descriptors.PRepeated(volList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehBmsVol
}

object DataVehBmsVol extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehBmsVol] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehBmsVol] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehBmsVol = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehBmsVol(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehBmsVol] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehBmsVol(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehBmsVol(
    index = 0,
    voltage = 0,
    current = 0
  )
  implicit class DataVehBmsVolLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehBmsVol]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehBmsVol](_l) {
    def index: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.index)((c_, f_) => c_.copy(index = f_))
    def voltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.voltage)((c_, f_) => c_.copy(voltage = f_))
    def current: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.current)((c_, f_) => c_.copy(current = f_))
    def volList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.volList)((c_, f_) => c_.copy(volList = f_))
  }
  final val INDEX_FIELD_NUMBER = 1
  final val VOLTAGE_FIELD_NUMBER = 2
  final val CURRENT_FIELD_NUMBER = 3
  final val VOL_LIST_FIELD_NUMBER = 4
}
