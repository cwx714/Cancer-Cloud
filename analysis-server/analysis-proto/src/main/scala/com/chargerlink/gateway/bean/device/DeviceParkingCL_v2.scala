// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.device



/** * ChargeLink公司的车位地锁/车位探测器设备的消息定义。设备类型：DEVICE_PARKING_CL_V1/DEVICE_PARKING_CL_V2，设备ID：最多11位数字的字符串。当设备为DEVICE_PARKING_CL_V1时，最后2位数字为原协议的Sensor设备ID，其余数字为原协议的cpid。
  *
  * @param parkingType
  *  / (必填)车位设备类型。范围：PK_COMP_PKL，车位地锁；PK_COMP_PKD，车位探测器。
  * @param parkingId
  *  / (可选)车位设备编号。此编号为车位设备在其归属设备内的编号，非全局的设备编号。
  * @param vendorId
  *  / (可选)供应商名称。缺省：空串。
  * @param modelNumber
  *  / (可选)设备型号。缺省：空串。
  * @param serialNumber
  *  / (可选)设备序列号。缺省：空串。
  * @param firmwareVersion
  *  / (可选)固件版本号。缺省：空串。
  * @param protocolVersion
  *  / (可选)协议版本号。缺省：空串。
  * @param clientVersion
  *  / (可选)客户端程序版本号。缺省：空串。
  * @param simIccid
  *  / (可选)SIM卡ICCID号。缺省：空串。
  */
@SerialVersionUID(0L)
final case class DeviceParkingCL_v2(
    parkingType: com.chargerlink.gateway.bean.common.PkDeviceType,
    parkingId: scala.Option[Int] = None,
    vendorId: scala.Option[String] = None,
    modelNumber: scala.Option[String] = None,
    serialNumber: scala.Option[String] = None,
    firmwareVersion: scala.Option[String] = None,
    protocolVersion: scala.Option[String] = None,
    clientVersion: scala.Option[String] = None,
    simIccid: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DeviceParkingCL_v2] with com.trueaccord.lenses.Updatable[DeviceParkingCL_v2] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, parkingType.value)
      if (parkingId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, parkingId.get) }
      if (vendorId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, vendorId.get) }
      if (modelNumber.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, modelNumber.get) }
      if (serialNumber.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, serialNumber.get) }
      if (firmwareVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, firmwareVersion.get) }
      if (protocolVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, protocolVersion.get) }
      if (clientVersion.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, clientVersion.get) }
      if (simIccid.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, simIccid.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeEnum(1, parkingType.value)
      parkingId.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      vendorId.foreach { __v =>
        _output__.writeString(3, __v)
      };
      modelNumber.foreach { __v =>
        _output__.writeString(4, __v)
      };
      serialNumber.foreach { __v =>
        _output__.writeString(5, __v)
      };
      firmwareVersion.foreach { __v =>
        _output__.writeString(6, __v)
      };
      protocolVersion.foreach { __v =>
        _output__.writeString(7, __v)
      };
      clientVersion.foreach { __v =>
        _output__.writeString(8, __v)
      };
      simIccid.foreach { __v =>
        _output__.writeString(9, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.device.DeviceParkingCL_v2 = {
      var __parkingType = this.parkingType
      var __parkingId = this.parkingId
      var __vendorId = this.vendorId
      var __modelNumber = this.modelNumber
      var __serialNumber = this.serialNumber
      var __firmwareVersion = this.firmwareVersion
      var __protocolVersion = this.protocolVersion
      var __clientVersion = this.clientVersion
      var __simIccid = this.simIccid
      var __requiredFields0: Long = 0x1L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __parkingType = com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(_input__.readEnum())
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __parkingId = Some(_input__.readUInt32())
          case 26 =>
            __vendorId = Some(_input__.readString())
          case 34 =>
            __modelNumber = Some(_input__.readString())
          case 42 =>
            __serialNumber = Some(_input__.readString())
          case 50 =>
            __firmwareVersion = Some(_input__.readString())
          case 58 =>
            __protocolVersion = Some(_input__.readString())
          case 66 =>
            __clientVersion = Some(_input__.readString())
          case 74 =>
            __simIccid = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.device.DeviceParkingCL_v2(
          parkingType = __parkingType,
          parkingId = __parkingId,
          vendorId = __vendorId,
          modelNumber = __modelNumber,
          serialNumber = __serialNumber,
          firmwareVersion = __firmwareVersion,
          protocolVersion = __protocolVersion,
          clientVersion = __clientVersion,
          simIccid = __simIccid
      )
    }
    def withParkingType(__v: com.chargerlink.gateway.bean.common.PkDeviceType): DeviceParkingCL_v2 = copy(parkingType = __v)
    def getParkingId: Int = parkingId.getOrElse(0)
    def clearParkingId: DeviceParkingCL_v2 = copy(parkingId = None)
    def withParkingId(__v: Int): DeviceParkingCL_v2 = copy(parkingId = Some(__v))
    def getVendorId: String = vendorId.getOrElse("")
    def clearVendorId: DeviceParkingCL_v2 = copy(vendorId = None)
    def withVendorId(__v: String): DeviceParkingCL_v2 = copy(vendorId = Some(__v))
    def getModelNumber: String = modelNumber.getOrElse("")
    def clearModelNumber: DeviceParkingCL_v2 = copy(modelNumber = None)
    def withModelNumber(__v: String): DeviceParkingCL_v2 = copy(modelNumber = Some(__v))
    def getSerialNumber: String = serialNumber.getOrElse("")
    def clearSerialNumber: DeviceParkingCL_v2 = copy(serialNumber = None)
    def withSerialNumber(__v: String): DeviceParkingCL_v2 = copy(serialNumber = Some(__v))
    def getFirmwareVersion: String = firmwareVersion.getOrElse("")
    def clearFirmwareVersion: DeviceParkingCL_v2 = copy(firmwareVersion = None)
    def withFirmwareVersion(__v: String): DeviceParkingCL_v2 = copy(firmwareVersion = Some(__v))
    def getProtocolVersion: String = protocolVersion.getOrElse("")
    def clearProtocolVersion: DeviceParkingCL_v2 = copy(protocolVersion = None)
    def withProtocolVersion(__v: String): DeviceParkingCL_v2 = copy(protocolVersion = Some(__v))
    def getClientVersion: String = clientVersion.getOrElse("")
    def clearClientVersion: DeviceParkingCL_v2 = copy(clientVersion = None)
    def withClientVersion(__v: String): DeviceParkingCL_v2 = copy(clientVersion = Some(__v))
    def getSimIccid: String = simIccid.getOrElse("")
    def clearSimIccid: DeviceParkingCL_v2 = copy(simIccid = None)
    def withSimIccid(__v: String): DeviceParkingCL_v2 = copy(simIccid = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => parkingType.javaValueDescriptor
        case 2 => parkingId.orNull
        case 3 => vendorId.orNull
        case 4 => modelNumber.orNull
        case 5 => serialNumber.orNull
        case 6 => firmwareVersion.orNull
        case 7 => protocolVersion.orNull
        case 8 => clientVersion.orNull
        case 9 => simIccid.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(parkingType.scalaValueDescriptor)
        case 2 => parkingId.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => vendorId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => modelNumber.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => serialNumber.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => firmwareVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => protocolVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => clientVersion.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => simIccid.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.device.DeviceParkingCL_v2
}

object DeviceParkingCL_v2 extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.device.DeviceParkingCL_v2 = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.device.DeviceParkingCL_v2(
      com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__fieldsMap(__fields.get(0)).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.device.DeviceParkingCL_v2] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.device.DeviceParkingCL_v2(
        com.chargerlink.gateway.bean.common.PkDeviceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[_root_.scalapb.descriptors.EnumValueDescriptor].number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DeviceParkingProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DeviceParkingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.PkDeviceType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.device.DeviceParkingCL_v2(
    parkingType = com.chargerlink.gateway.bean.common.PkDeviceType.PK_DEVICE_NONE
  )
  implicit class DeviceParkingCL_v2Lens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceParkingCL_v2]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.device.DeviceParkingCL_v2](_l) {
    def parkingType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.common.PkDeviceType] = field(_.parkingType)((c_, f_) => c_.copy(parkingType = f_))
    def parkingId: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getParkingId)((c_, f_) => c_.copy(parkingId = Some(f_)))
    def optionalParkingId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.parkingId)((c_, f_) => c_.copy(parkingId = f_))
    def vendorId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVendorId)((c_, f_) => c_.copy(vendorId = Some(f_)))
    def optionalVendorId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.vendorId)((c_, f_) => c_.copy(vendorId = f_))
    def modelNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getModelNumber)((c_, f_) => c_.copy(modelNumber = Some(f_)))
    def optionalModelNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.modelNumber)((c_, f_) => c_.copy(modelNumber = f_))
    def serialNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSerialNumber)((c_, f_) => c_.copy(serialNumber = Some(f_)))
    def optionalSerialNumber: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.serialNumber)((c_, f_) => c_.copy(serialNumber = f_))
    def firmwareVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getFirmwareVersion)((c_, f_) => c_.copy(firmwareVersion = Some(f_)))
    def optionalFirmwareVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.firmwareVersion)((c_, f_) => c_.copy(firmwareVersion = f_))
    def protocolVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProtocolVersion)((c_, f_) => c_.copy(protocolVersion = Some(f_)))
    def optionalProtocolVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.protocolVersion)((c_, f_) => c_.copy(protocolVersion = f_))
    def clientVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getClientVersion)((c_, f_) => c_.copy(clientVersion = Some(f_)))
    def optionalClientVersion: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.clientVersion)((c_, f_) => c_.copy(clientVersion = f_))
    def simIccid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getSimIccid)((c_, f_) => c_.copy(simIccid = Some(f_)))
    def optionalSimIccid: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.simIccid)((c_, f_) => c_.copy(simIccid = f_))
  }
  final val PARKING_TYPE_FIELD_NUMBER = 1
  final val PARKING_ID_FIELD_NUMBER = 2
  final val VENDOR_ID_FIELD_NUMBER = 3
  final val MODEL_NUMBER_FIELD_NUMBER = 4
  final val SERIAL_NUMBER_FIELD_NUMBER = 5
  final val FIRMWARE_VERSION_FIELD_NUMBER = 6
  final val PROTOCOL_VERSION_FIELD_NUMBER = 7
  final val CLIENT_VERSION_FIELD_NUMBER = 8
  final val SIM_ICCID_FIELD_NUMBER = 9
}
