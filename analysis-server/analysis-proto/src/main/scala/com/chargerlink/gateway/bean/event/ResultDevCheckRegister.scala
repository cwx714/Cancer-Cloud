// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.event



/** * 终端设备注册激活事件应答的消息定义。
  *
  * @param deviceInfo
  *  / (必填)注册激活的设备信息。null或register_status为false：注册激活失败。如果注册成功且请求消息的device_id为空串，则业务平台必须在应答消息中返回新生成的唯一设备ID。
  * @param errorMsg
  *  / (可选)注册激活的失败原因。
  * @param loginCode
  *  / (可选)设备登录验证码。
  */
@SerialVersionUID(0L)
final case class ResultDevCheckRegister(
    deviceInfo: scala.Option[com.chargerlink.gateway.bean.device.DeviceInfo] = None,
    errorMsg: scala.Option[String] = None,
    loginCode: scala.Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ResultDevCheckRegister] with com.trueaccord.lenses.Updatable[ResultDevCheckRegister] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (deviceInfo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(deviceInfo.get.serializedSize) + deviceInfo.get.serializedSize }
      if (errorMsg.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, errorMsg.get) }
      if (loginCode.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, loginCode.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      deviceInfo.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      errorMsg.foreach { __v =>
        _output__.writeString(2, __v)
      };
      loginCode.foreach { __v =>
        _output__.writeString(3, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.event.ResultDevCheckRegister = {
      var __deviceInfo = this.deviceInfo
      var __errorMsg = this.errorMsg
      var __loginCode = this.loginCode
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __deviceInfo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __deviceInfo.getOrElse(com.chargerlink.gateway.bean.device.DeviceInfo.defaultInstance)))
          case 18 =>
            __errorMsg = Some(_input__.readString())
          case 26 =>
            __loginCode = Some(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.event.ResultDevCheckRegister(
          deviceInfo = __deviceInfo,
          errorMsg = __errorMsg,
          loginCode = __loginCode
      )
    }
    def getDeviceInfo: com.chargerlink.gateway.bean.device.DeviceInfo = deviceInfo.getOrElse(com.chargerlink.gateway.bean.device.DeviceInfo.defaultInstance)
    def clearDeviceInfo: ResultDevCheckRegister = copy(deviceInfo = None)
    def withDeviceInfo(__v: com.chargerlink.gateway.bean.device.DeviceInfo): ResultDevCheckRegister = copy(deviceInfo = Some(__v))
    def getErrorMsg: String = errorMsg.getOrElse("")
    def clearErrorMsg: ResultDevCheckRegister = copy(errorMsg = None)
    def withErrorMsg(__v: String): ResultDevCheckRegister = copy(errorMsg = Some(__v))
    def getLoginCode: String = loginCode.getOrElse("")
    def clearLoginCode: ResultDevCheckRegister = copy(loginCode = None)
    def withLoginCode(__v: String): ResultDevCheckRegister = copy(loginCode = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => deviceInfo.orNull
        case 2 => errorMsg.orNull
        case 3 => loginCode.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => deviceInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => errorMsg.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => loginCode.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.event.ResultDevCheckRegister
}

object ResultDevCheckRegister extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultDevCheckRegister] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.event.ResultDevCheckRegister] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.event.ResultDevCheckRegister = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.event.ResultDevCheckRegister(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.chargerlink.gateway.bean.device.DeviceInfo]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.event.ResultDevCheckRegister] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.event.ResultDevCheckRegister(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.chargerlink.gateway.bean.device.DeviceInfo]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = EventDeviceProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = EventDeviceProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.chargerlink.gateway.bean.device.DeviceInfo
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.event.ResultDevCheckRegister(
  )
  implicit class ResultDevCheckRegisterLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.event.ResultDevCheckRegister]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.event.ResultDevCheckRegister](_l) {
    def deviceInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.device.DeviceInfo] = field(_.getDeviceInfo)((c_, f_) => c_.copy(deviceInfo = Some(f_)))
    def optionalDeviceInfo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.chargerlink.gateway.bean.device.DeviceInfo]] = field(_.deviceInfo)((c_, f_) => c_.copy(deviceInfo = f_))
    def errorMsg: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getErrorMsg)((c_, f_) => c_.copy(errorMsg = Some(f_)))
    def optionalErrorMsg: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.errorMsg)((c_, f_) => c_.copy(errorMsg = f_))
    def loginCode: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getLoginCode)((c_, f_) => c_.copy(loginCode = Some(f_)))
    def optionalLoginCode: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.loginCode)((c_, f_) => c_.copy(loginCode = f_))
  }
  final val DEVICE_INFO_FIELD_NUMBER = 1
  final val ERROR_MSG_FIELD_NUMBER = 2
  final val LOGIN_CODE_FIELD_NUMBER = 3
}
