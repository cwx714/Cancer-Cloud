// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 燃料电池数据的消息定义。对应电动车国标'0x03燃料电池数据'。
  *
  * @param totalVoltage
  *  / (必填，国标字段)燃料电池电压。单位：0.1V，范围：0.0V～6000.0V，0xFFFE：异常，0xFFFF：无效。
  * @param totalCurrent
  *  / (必填，国标字段)燃料电池电流。单位：0.1A，范围：0.0A～2000.0A，0xFFFE：异常，0xFFFF：无效。
  * @param consumeRate
  *  / (必填，国标字段)燃料消耗率。单位：0.01kg/100km，范围：0.00kg/100km～600.00kg/100km，0xFFFE：异常，0xFFFF：无效。
  * @param tempList
  *  / (必填，国标字段)燃料电池温度探针温度值列表。单位：1°C，偏移：-40°C，范围：-40°C～200°C，0xFE：异常，0xFF：无效。
  * @param maxTempVal
  *  / (必填，国标字段)氢系统中最高温度。单位：0.1°C，偏移：-40.0°C，范围：-40.0°C～200.0°C，0xFFFE：异常，0xFFFF：无效。
  * @param maxTempIdx
  *  / (必填，国标字段)氢系统中最高温度探针编号。范围：1～252，0xFE：异常，0xFF：无效。
  * @param maxDenseVal
  *  / (必填，国标字段)氢系统中最高浓度。单位：1mg/kg，范围：0mg/kg～50000mg/kg，0xFFFE：异常，0xFFFF：无效。
  * @param maxDenseIdx
  *  / (必填，国标字段)氢系统中最高浓度探针编号。范围：1～252，0xFE：异常，0xFF：无效。
  * @param maxPressVal
  *  / (必填，国标字段)氢系统中最高压力。单位：0.1MPa，范围：0.0MPa～100.0MPa，0xFFFE：异常，0xFFFF：无效。
  * @param maxPressIdx
  *  / (必填，国标字段)氢系统中最高压力探针编号。范围：1～252，0xFE：异常，0xFF：无效。
  * @param highVolDc
  *  / (必填，国标字段)高压DC/DC状态。0x01：工作，0x02：断开，0xFE：异常，0xFF：无效。
  */
@SerialVersionUID(0L)
final case class DataVehBattery(
    totalVoltage: Int,
    totalCurrent: Int,
    consumeRate: Int,
    tempList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
    maxTempVal: Int,
    maxTempIdx: Int,
    maxDenseVal: Int,
    maxDenseIdx: Int,
    maxPressVal: Int,
    maxPressIdx: Int,
    highVolDc: Int
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehBattery] with com.trueaccord.lenses.Updatable[DataVehBattery] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, totalVoltage)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, totalCurrent)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, consumeRate)
      tempList.foreach(tempList => __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(4, tempList))
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(5, maxTempVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(6, maxTempIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(7, maxDenseVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(8, maxDenseIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(9, maxPressVal)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(10, maxPressIdx)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(11, highVolDc)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, totalVoltage)
      _output__.writeUInt32(2, totalCurrent)
      _output__.writeUInt32(3, consumeRate)
      tempList.foreach { __v =>
        _output__.writeUInt32(4, __v)
      };
      _output__.writeUInt32(5, maxTempVal)
      _output__.writeUInt32(6, maxTempIdx)
      _output__.writeUInt32(7, maxDenseVal)
      _output__.writeUInt32(8, maxDenseIdx)
      _output__.writeUInt32(9, maxPressVal)
      _output__.writeUInt32(10, maxPressIdx)
      _output__.writeUInt32(11, highVolDc)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehBattery = {
      var __totalVoltage = this.totalVoltage
      var __totalCurrent = this.totalCurrent
      var __consumeRate = this.consumeRate
      val __tempList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.tempList)
      var __maxTempVal = this.maxTempVal
      var __maxTempIdx = this.maxTempIdx
      var __maxDenseVal = this.maxDenseVal
      var __maxDenseIdx = this.maxDenseIdx
      var __maxPressVal = this.maxPressVal
      var __maxPressIdx = this.maxPressIdx
      var __highVolDc = this.highVolDc
      var __requiredFields0: Long = 0x3ffL
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __totalVoltage = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __totalCurrent = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __consumeRate = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffbL
          case 32 =>
            __tempList += _input__.readUInt32()
          case 34 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __tempList += _input__.readUInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 40 =>
            __maxTempVal = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffff7L
          case 48 =>
            __maxTempIdx = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffefL
          case 56 =>
            __maxDenseVal = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffdfL
          case 64 =>
            __maxDenseIdx = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffffbfL
          case 72 =>
            __maxPressVal = _input__.readUInt32()
            __requiredFields0 &= 0xffffffffffffff7fL
          case 80 =>
            __maxPressIdx = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffeffL
          case 88 =>
            __highVolDc = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffdffL
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehBattery(
          totalVoltage = __totalVoltage,
          totalCurrent = __totalCurrent,
          consumeRate = __consumeRate,
          tempList = __tempList.result(),
          maxTempVal = __maxTempVal,
          maxTempIdx = __maxTempIdx,
          maxDenseVal = __maxDenseVal,
          maxDenseIdx = __maxDenseIdx,
          maxPressVal = __maxPressVal,
          maxPressIdx = __maxPressIdx,
          highVolDc = __highVolDc
      )
    }
    def withTotalVoltage(__v: Int): DataVehBattery = copy(totalVoltage = __v)
    def withTotalCurrent(__v: Int): DataVehBattery = copy(totalCurrent = __v)
    def withConsumeRate(__v: Int): DataVehBattery = copy(consumeRate = __v)
    def clearTempList = copy(tempList = _root_.scala.collection.Seq.empty)
    def addTempList(__vs: Int*): DataVehBattery = addAllTempList(__vs)
    def addAllTempList(__vs: TraversableOnce[Int]): DataVehBattery = copy(tempList = tempList ++ __vs)
    def withTempList(__v: _root_.scala.collection.Seq[Int]): DataVehBattery = copy(tempList = __v)
    def withMaxTempVal(__v: Int): DataVehBattery = copy(maxTempVal = __v)
    def withMaxTempIdx(__v: Int): DataVehBattery = copy(maxTempIdx = __v)
    def withMaxDenseVal(__v: Int): DataVehBattery = copy(maxDenseVal = __v)
    def withMaxDenseIdx(__v: Int): DataVehBattery = copy(maxDenseIdx = __v)
    def withMaxPressVal(__v: Int): DataVehBattery = copy(maxPressVal = __v)
    def withMaxPressIdx(__v: Int): DataVehBattery = copy(maxPressIdx = __v)
    def withHighVolDc(__v: Int): DataVehBattery = copy(highVolDc = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => totalVoltage
        case 2 => totalCurrent
        case 3 => consumeRate
        case 4 => tempList
        case 5 => maxTempVal
        case 6 => maxTempIdx
        case 7 => maxDenseVal
        case 8 => maxDenseIdx
        case 9 => maxPressVal
        case 10 => maxPressIdx
        case 11 => highVolDc
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(totalVoltage)
        case 2 => _root_.scalapb.descriptors.PInt(totalCurrent)
        case 3 => _root_.scalapb.descriptors.PInt(consumeRate)
        case 4 => _root_.scalapb.descriptors.PRepeated(tempList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PInt(maxTempVal)
        case 6 => _root_.scalapb.descriptors.PInt(maxTempIdx)
        case 7 => _root_.scalapb.descriptors.PInt(maxDenseVal)
        case 8 => _root_.scalapb.descriptors.PInt(maxDenseIdx)
        case 9 => _root_.scalapb.descriptors.PInt(maxPressVal)
        case 10 => _root_.scalapb.descriptors.PInt(maxPressIdx)
        case 11 => _root_.scalapb.descriptors.PInt(highVolDc)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehBattery
}

object DataVehBattery extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehBattery] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehBattery] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehBattery = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehBattery(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap(__fields.get(2)).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
      __fieldsMap(__fields.get(4)).asInstanceOf[Int],
      __fieldsMap(__fields.get(5)).asInstanceOf[Int],
      __fieldsMap(__fields.get(6)).asInstanceOf[Int],
      __fieldsMap(__fields.get(7)).asInstanceOf[Int],
      __fieldsMap(__fields.get(8)).asInstanceOf[Int],
      __fieldsMap(__fields.get(9)).asInstanceOf[Int],
      __fieldsMap(__fields.get(10)).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehBattery] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehBattery(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).get.as[Int]
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehBattery(
    totalVoltage = 0,
    totalCurrent = 0,
    consumeRate = 0,
    maxTempVal = 0,
    maxTempIdx = 0,
    maxDenseVal = 0,
    maxDenseIdx = 0,
    maxPressVal = 0,
    maxPressIdx = 0,
    highVolDc = 0
  )
  implicit class DataVehBatteryLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehBattery]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehBattery](_l) {
    def totalVoltage: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.totalVoltage)((c_, f_) => c_.copy(totalVoltage = f_))
    def totalCurrent: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.totalCurrent)((c_, f_) => c_.copy(totalCurrent = f_))
    def consumeRate: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.consumeRate)((c_, f_) => c_.copy(consumeRate = f_))
    def tempList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.tempList)((c_, f_) => c_.copy(tempList = f_))
    def maxTempVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxTempVal)((c_, f_) => c_.copy(maxTempVal = f_))
    def maxTempIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxTempIdx)((c_, f_) => c_.copy(maxTempIdx = f_))
    def maxDenseVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxDenseVal)((c_, f_) => c_.copy(maxDenseVal = f_))
    def maxDenseIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxDenseIdx)((c_, f_) => c_.copy(maxDenseIdx = f_))
    def maxPressVal: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxPressVal)((c_, f_) => c_.copy(maxPressVal = f_))
    def maxPressIdx: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.maxPressIdx)((c_, f_) => c_.copy(maxPressIdx = f_))
    def highVolDc: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.highVolDc)((c_, f_) => c_.copy(highVolDc = f_))
  }
  final val TOTAL_VOLTAGE_FIELD_NUMBER = 1
  final val TOTAL_CURRENT_FIELD_NUMBER = 2
  final val CONSUME_RATE_FIELD_NUMBER = 3
  final val TEMP_LIST_FIELD_NUMBER = 4
  final val MAX_TEMP_VAL_FIELD_NUMBER = 5
  final val MAX_TEMP_IDX_FIELD_NUMBER = 6
  final val MAX_DENSE_VAL_FIELD_NUMBER = 7
  final val MAX_DENSE_IDX_FIELD_NUMBER = 8
  final val MAX_PRESS_VAL_FIELD_NUMBER = 9
  final val MAX_PRESS_IDX_FIELD_NUMBER = 10
  final val HIGH_VOL_DC_FIELD_NUMBER = 11
}
