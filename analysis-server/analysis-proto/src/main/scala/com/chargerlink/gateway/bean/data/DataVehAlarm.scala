// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.data



/** * 报警数据的消息定义。对应电动车国标'0x07报警数据'。
  *
  * @param alarmLevel
  *  / (必填，国标字段)最高报警等级。0：表示无故障，1：表示1级故障，指代不影响车辆正常行驶的故障，2：表示2级故障，指影响车辆性能需驾驶员限制行驶的故障，3：表示3级故障，为最高级别故障，指代驾驶员应立即停车处理或请求救援的故障，0xFE：异常，0xFF：无效。
  * @param alarmFlag
  *  / (必填，国标字段)通用报警标志。具体含义见电动车国标协议中实时信息上报消息的'通用报警标志'。
  * @param bmsErrList
  *  / (必填，国标字段)可充电储能装置代码列表。
  * @param driveErrList
  *  / (必填，国标字段)驱动电机故障代码列表。
  * @param motorErrList
  *  / (必填，国标字段)发动机故障代码列表。
  * @param otherErrList
  *  / (必填，国标字段)其他故障代码列表。
  */
@SerialVersionUID(0L)
final case class DataVehAlarm(
    alarmLevel: Int,
    alarmFlag: Int,
    bmsErrList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
    driveErrList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
    motorErrList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
    otherErrList: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[DataVehAlarm] with com.trueaccord.lenses.Updatable[DataVehAlarm] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, alarmLevel)
      __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, alarmFlag)
      bmsErrList.foreach(bmsErrList => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, bmsErrList))
      driveErrList.foreach(driveErrList => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, driveErrList))
      motorErrList.foreach(motorErrList => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, motorErrList))
      otherErrList.foreach(otherErrList => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, otherErrList))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      _output__.writeUInt32(1, alarmLevel)
      _output__.writeInt32(2, alarmFlag)
      bmsErrList.foreach { __v =>
        _output__.writeInt32(3, __v)
      };
      driveErrList.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      motorErrList.foreach { __v =>
        _output__.writeInt32(5, __v)
      };
      otherErrList.foreach { __v =>
        _output__.writeInt32(6, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.data.DataVehAlarm = {
      var __alarmLevel = this.alarmLevel
      var __alarmFlag = this.alarmFlag
      val __bmsErrList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.bmsErrList)
      val __driveErrList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.driveErrList)
      val __motorErrList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.motorErrList)
      val __otherErrList = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.otherErrList)
      var __requiredFields0: Long = 0x3L
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __alarmLevel = _input__.readUInt32()
            __requiredFields0 &= 0xfffffffffffffffeL
          case 16 =>
            __alarmFlag = _input__.readInt32()
            __requiredFields0 &= 0xfffffffffffffffdL
          case 24 =>
            __bmsErrList += _input__.readInt32()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __bmsErrList += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 32 =>
            __driveErrList += _input__.readInt32()
          case 34 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __driveErrList += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 40 =>
            __motorErrList += _input__.readInt32()
          case 42 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __motorErrList += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 48 =>
            __otherErrList += _input__.readInt32()
          case 50 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __otherErrList += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
      com.chargerlink.gateway.bean.data.DataVehAlarm(
          alarmLevel = __alarmLevel,
          alarmFlag = __alarmFlag,
          bmsErrList = __bmsErrList.result(),
          driveErrList = __driveErrList.result(),
          motorErrList = __motorErrList.result(),
          otherErrList = __otherErrList.result()
      )
    }
    def withAlarmLevel(__v: Int): DataVehAlarm = copy(alarmLevel = __v)
    def withAlarmFlag(__v: Int): DataVehAlarm = copy(alarmFlag = __v)
    def clearBmsErrList = copy(bmsErrList = _root_.scala.collection.Seq.empty)
    def addBmsErrList(__vs: Int*): DataVehAlarm = addAllBmsErrList(__vs)
    def addAllBmsErrList(__vs: TraversableOnce[Int]): DataVehAlarm = copy(bmsErrList = bmsErrList ++ __vs)
    def withBmsErrList(__v: _root_.scala.collection.Seq[Int]): DataVehAlarm = copy(bmsErrList = __v)
    def clearDriveErrList = copy(driveErrList = _root_.scala.collection.Seq.empty)
    def addDriveErrList(__vs: Int*): DataVehAlarm = addAllDriveErrList(__vs)
    def addAllDriveErrList(__vs: TraversableOnce[Int]): DataVehAlarm = copy(driveErrList = driveErrList ++ __vs)
    def withDriveErrList(__v: _root_.scala.collection.Seq[Int]): DataVehAlarm = copy(driveErrList = __v)
    def clearMotorErrList = copy(motorErrList = _root_.scala.collection.Seq.empty)
    def addMotorErrList(__vs: Int*): DataVehAlarm = addAllMotorErrList(__vs)
    def addAllMotorErrList(__vs: TraversableOnce[Int]): DataVehAlarm = copy(motorErrList = motorErrList ++ __vs)
    def withMotorErrList(__v: _root_.scala.collection.Seq[Int]): DataVehAlarm = copy(motorErrList = __v)
    def clearOtherErrList = copy(otherErrList = _root_.scala.collection.Seq.empty)
    def addOtherErrList(__vs: Int*): DataVehAlarm = addAllOtherErrList(__vs)
    def addAllOtherErrList(__vs: TraversableOnce[Int]): DataVehAlarm = copy(otherErrList = otherErrList ++ __vs)
    def withOtherErrList(__v: _root_.scala.collection.Seq[Int]): DataVehAlarm = copy(otherErrList = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => alarmLevel
        case 2 => alarmFlag
        case 3 => bmsErrList
        case 4 => driveErrList
        case 5 => motorErrList
        case 6 => otherErrList
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(alarmLevel)
        case 2 => _root_.scalapb.descriptors.PInt(alarmFlag)
        case 3 => _root_.scalapb.descriptors.PRepeated(bmsErrList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(driveErrList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 5 => _root_.scalapb.descriptors.PRepeated(motorErrList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(otherErrList.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.data.DataVehAlarm
}

object DataVehAlarm extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehAlarm] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.data.DataVehAlarm] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.data.DataVehAlarm = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.data.DataVehAlarm(
      __fieldsMap(__fields.get(0)).asInstanceOf[Int],
      __fieldsMap(__fields.get(1)).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.data.DataVehAlarm] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.data.DataVehAlarm(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Int],
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = DataVehicleProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = DataVehicleProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.chargerlink.gateway.bean.data.DataVehAlarm(
    alarmLevel = 0,
    alarmFlag = 0
  )
  implicit class DataVehAlarmLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.data.DataVehAlarm]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.data.DataVehAlarm](_l) {
    def alarmLevel: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.alarmLevel)((c_, f_) => c_.copy(alarmLevel = f_))
    def alarmFlag: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.alarmFlag)((c_, f_) => c_.copy(alarmFlag = f_))
    def bmsErrList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.bmsErrList)((c_, f_) => c_.copy(bmsErrList = f_))
    def driveErrList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.driveErrList)((c_, f_) => c_.copy(driveErrList = f_))
    def motorErrList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.motorErrList)((c_, f_) => c_.copy(motorErrList = f_))
    def otherErrList: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.otherErrList)((c_, f_) => c_.copy(otherErrList = f_))
  }
  final val ALARM_LEVEL_FIELD_NUMBER = 1
  final val ALARM_FLAG_FIELD_NUMBER = 2
  final val BMS_ERR_LIST_FIELD_NUMBER = 3
  final val DRIVE_ERR_LIST_FIELD_NUMBER = 4
  final val MOTOR_ERR_LIST_FIELD_NUMBER = 5
  final val OTHER_ERR_LIST_FIELD_NUMBER = 6
}
