// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.chargerlink.gateway.bean.api



/** * 注册终端设备的上行报警消息推送的请求。
  *
  * @param withAlarmTypes
  *  / (可选)注册的报警类型的推送条件。只有报警类型在此列表中的报警消息才会被推送。空列表：表示注册所有类型的报警消息。
  * @param withAlarmCodes
  *  / (可选)注册的报警代码的推送条件。只有报警代码在此列表中的报警消息才会被推送。空列表：表示注册所有类型的报警消息。
  * @param withDeviceTypes
  *  / (可选)注册的终端类型的推送条件。只有在此列表中的终端类型产生的消息才会被推送。空列表：表示注册所有设备类型的报警消息。
  * @param withDeviceIds
  *  / (可选)注册的终端ID的推送条件。只有在此列表中的终端ID产生的消息才会被推送。空列表：表示注册所有设备ID的报警消息。
  */
@SerialVersionUID(0L)
final case class PushAlarmRequest(
    withAlarmTypes: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.AlarmType] = _root_.scala.collection.Seq.empty,
    withAlarmCodes: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
    withDeviceTypes: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.DeviceType] = _root_.scala.collection.Seq.empty,
    withDeviceIds: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[PushAlarmRequest] with com.trueaccord.lenses.Updatable[PushAlarmRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      withAlarmTypes.foreach(withAlarmTypes => __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, withAlarmTypes.value))
      withAlarmCodes.foreach(withAlarmCodes => __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, withAlarmCodes))
      withDeviceTypes.foreach(withDeviceTypes => __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, withDeviceTypes.value))
      withDeviceIds.foreach(withDeviceIds => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, withDeviceIds))
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      withAlarmTypes.foreach { __v =>
        _output__.writeEnum(1, __v.value)
      };
      withAlarmCodes.foreach { __v =>
        _output__.writeUInt32(2, __v)
      };
      withDeviceTypes.foreach { __v =>
        _output__.writeEnum(3, __v.value)
      };
      withDeviceIds.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.chargerlink.gateway.bean.api.PushAlarmRequest = {
      val __withAlarmTypes = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.common.AlarmType] ++= this.withAlarmTypes)
      val __withAlarmCodes = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.withAlarmCodes)
      val __withDeviceTypes = (_root_.scala.collection.immutable.Vector.newBuilder[com.chargerlink.gateway.bean.common.DeviceType] ++= this.withDeviceTypes)
      val __withDeviceIds = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.withDeviceIds)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __withAlarmTypes += com.chargerlink.gateway.bean.common.AlarmType.fromValue(_input__.readEnum())
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __withAlarmTypes += com.chargerlink.gateway.bean.common.AlarmType.fromValue(_input__.readEnum)
            }
            _input__.popLimit(oldLimit)
          }
          case 16 =>
            __withAlarmCodes += _input__.readUInt32()
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __withAlarmCodes += _input__.readUInt32
            }
            _input__.popLimit(oldLimit)
          }
          case 24 =>
            __withDeviceTypes += com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum())
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __withDeviceTypes += com.chargerlink.gateway.bean.common.DeviceType.fromValue(_input__.readEnum)
            }
            _input__.popLimit(oldLimit)
          }
          case 34 =>
            __withDeviceIds += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.chargerlink.gateway.bean.api.PushAlarmRequest(
          withAlarmTypes = __withAlarmTypes.result(),
          withAlarmCodes = __withAlarmCodes.result(),
          withDeviceTypes = __withDeviceTypes.result(),
          withDeviceIds = __withDeviceIds.result()
      )
    }
    def clearWithAlarmTypes = copy(withAlarmTypes = _root_.scala.collection.Seq.empty)
    def addWithAlarmTypes(__vs: com.chargerlink.gateway.bean.common.AlarmType*): PushAlarmRequest = addAllWithAlarmTypes(__vs)
    def addAllWithAlarmTypes(__vs: TraversableOnce[com.chargerlink.gateway.bean.common.AlarmType]): PushAlarmRequest = copy(withAlarmTypes = withAlarmTypes ++ __vs)
    def withWithAlarmTypes(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.AlarmType]): PushAlarmRequest = copy(withAlarmTypes = __v)
    def clearWithAlarmCodes = copy(withAlarmCodes = _root_.scala.collection.Seq.empty)
    def addWithAlarmCodes(__vs: Int*): PushAlarmRequest = addAllWithAlarmCodes(__vs)
    def addAllWithAlarmCodes(__vs: TraversableOnce[Int]): PushAlarmRequest = copy(withAlarmCodes = withAlarmCodes ++ __vs)
    def withWithAlarmCodes(__v: _root_.scala.collection.Seq[Int]): PushAlarmRequest = copy(withAlarmCodes = __v)
    def clearWithDeviceTypes = copy(withDeviceTypes = _root_.scala.collection.Seq.empty)
    def addWithDeviceTypes(__vs: com.chargerlink.gateway.bean.common.DeviceType*): PushAlarmRequest = addAllWithDeviceTypes(__vs)
    def addAllWithDeviceTypes(__vs: TraversableOnce[com.chargerlink.gateway.bean.common.DeviceType]): PushAlarmRequest = copy(withDeviceTypes = withDeviceTypes ++ __vs)
    def withWithDeviceTypes(__v: _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.DeviceType]): PushAlarmRequest = copy(withDeviceTypes = __v)
    def clearWithDeviceIds = copy(withDeviceIds = _root_.scala.collection.Seq.empty)
    def addWithDeviceIds(__vs: String*): PushAlarmRequest = addAllWithDeviceIds(__vs)
    def addAllWithDeviceIds(__vs: TraversableOnce[String]): PushAlarmRequest = copy(withDeviceIds = withDeviceIds ++ __vs)
    def withWithDeviceIds(__v: _root_.scala.collection.Seq[String]): PushAlarmRequest = copy(withDeviceIds = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => withAlarmTypes.map(_.javaValueDescriptor)(_root_.scala.collection.breakOut)
        case 2 => withAlarmCodes
        case 3 => withDeviceTypes.map(_.javaValueDescriptor)(_root_.scala.collection.breakOut)
        case 4 => withDeviceIds
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(withAlarmTypes.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor))(_root_.scala.collection.breakOut))
        case 2 => _root_.scalapb.descriptors.PRepeated(withAlarmCodes.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
        case 3 => _root_.scalapb.descriptors.PRepeated(withDeviceTypes.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor))(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(withDeviceIds.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion = com.chargerlink.gateway.bean.api.PushAlarmRequest
}

object PushAlarmRequest extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.PushAlarmRequest] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.chargerlink.gateway.bean.api.PushAlarmRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.chargerlink.gateway.bean.api.PushAlarmRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.chargerlink.gateway.bean.api.PushAlarmRequest(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.AlarmType.fromValue(__e.getNumber))(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.chargerlink.gateway.bean.common.DeviceType.fromValue(__e.getNumber))(_root_.scala.collection.breakOut),
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.chargerlink.gateway.bean.api.PushAlarmRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.chargerlink.gateway.bean.api.PushAlarmRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.collection.Seq.empty).map(__e => com.chargerlink.gateway.bean.common.AlarmType.fromValue(__e.number))(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.collection.Seq.empty).map(__e => com.chargerlink.gateway.bean.common.DeviceType.fromValue(__e.number))(_root_.scala.collection.breakOut),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiBaseProto.javaDescriptor.getMessageTypes.get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiBaseProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => com.chargerlink.gateway.bean.common.AlarmType
      case 3 => com.chargerlink.gateway.bean.common.DeviceType
    }
  }
  lazy val defaultInstance = com.chargerlink.gateway.bean.api.PushAlarmRequest(
  )
  implicit class PushAlarmRequestLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.chargerlink.gateway.bean.api.PushAlarmRequest]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.chargerlink.gateway.bean.api.PushAlarmRequest](_l) {
    def withAlarmTypes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.AlarmType]] = field(_.withAlarmTypes)((c_, f_) => c_.copy(withAlarmTypes = f_))
    def withAlarmCodes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.withAlarmCodes)((c_, f_) => c_.copy(withAlarmCodes = f_))
    def withDeviceTypes: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.chargerlink.gateway.bean.common.DeviceType]] = field(_.withDeviceTypes)((c_, f_) => c_.copy(withDeviceTypes = f_))
    def withDeviceIds: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.withDeviceIds)((c_, f_) => c_.copy(withDeviceIds = f_))
  }
  final val WITH_ALARM_TYPES_FIELD_NUMBER = 1
  final val WITH_ALARM_CODES_FIELD_NUMBER = 2
  final val WITH_DEVICE_TYPES_FIELD_NUMBER = 3
  final val WITH_DEVICE_IDS_FIELD_NUMBER = 4
}
